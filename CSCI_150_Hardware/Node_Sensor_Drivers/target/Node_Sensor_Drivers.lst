
d:/Gilbert/Offline_Projects/CSCI_150FA19_Sensor_Network/CSCI_150_Hardware/Node_Sensor_Drivers/target/Node_Sensor_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001234  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000152e4  2**0
                  CONTENTS
  4 .data         00000068  2003e47c  000d5250  0000e47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000030c  2003e4e4  2003e4e4  0001e4e4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d52b8  000d52b8  000152b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d52e0  000d52e0  000152e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0009d345  00000000  00000000  000152e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c1c1  00000000  00000000  000b2629  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00017768  00000000  00000000  000be7ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001d28  00000000  00000000  000d5f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003808  00000000  00000000  000d7c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002ec36  00000000  00000000  000db482  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001d2e1  00000000  00000000  0010a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000f97f7  00000000  00000000  00127399  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b610  00000000  00000000  00220b90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f000 ff5d 	bl	d4eec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f000 ff62 	bl	d4f02 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e47c 	.word	0x2003e47c
   d4048:	000d5250 	.word	0x000d5250
   d404c:	2003e4e4 	.word	0x2003e4e4
   d4050:	2003e4e4 	.word	0x2003e4e4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fac9 	bl	d45f0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5250 	.word	0x000d5250
   d4080:	000d5218 	.word	0x000d5218

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b815 	b.w	d40b2 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f813 	bl	d40b4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 ba7b 	b.w	d458c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 b94d 	b.w	d4334 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 b953 	b.w	d4344 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 b951 	b.w	d4344 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <setup>:
   d40b2:	4770      	bx	lr

000d40b4 <loop>:
  // Put initialization like pinMode and begin functions here.

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d40b4:	4770      	bx	lr

000d40b6 <_GLOBAL__sub_I_setup>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40b6:	f000 b811 	b.w	d40dc <HAL_Pin_Map>
	...

000d40bc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d40bc:	b508      	push	{r3, lr}
   d40be:	4b02      	ldr	r3, [pc, #8]	; (d40c8 <netdb_freeaddrinfo+0xc>)
   d40c0:	681b      	ldr	r3, [r3, #0]
   d40c2:	689b      	ldr	r3, [r3, #8]
   d40c4:	9301      	str	r3, [sp, #4]
   d40c6:	bd08      	pop	{r3, pc}
   d40c8:	00030268 	.word	0x00030268

000d40cc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d40cc:	b508      	push	{r3, lr}
   d40ce:	4b02      	ldr	r3, [pc, #8]	; (d40d8 <netdb_getaddrinfo+0xc>)
   d40d0:	681b      	ldr	r3, [r3, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	9301      	str	r3, [sp, #4]
   d40d6:	bd08      	pop	{r3, pc}
   d40d8:	00030268 	.word	0x00030268

000d40dc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d40dc:	b508      	push	{r3, lr}
   d40de:	4b02      	ldr	r3, [pc, #8]	; (d40e8 <HAL_Pin_Map+0xc>)
   d40e0:	681b      	ldr	r3, [r3, #0]
   d40e2:	681b      	ldr	r3, [r3, #0]
   d40e4:	9301      	str	r3, [sp, #4]
   d40e6:	bd08      	pop	{r3, pc}
   d40e8:	0003022c 	.word	0x0003022c

000d40ec <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d40ec:	b508      	push	{r3, lr}
   d40ee:	4b02      	ldr	r3, [pc, #8]	; (d40f8 <HAL_SPI_Init+0xc>)
   d40f0:	681b      	ldr	r3, [r3, #0]
   d40f2:	69db      	ldr	r3, [r3, #28]
   d40f4:	9301      	str	r3, [sp, #4]
   d40f6:	bd08      	pop	{r3, pc}
   d40f8:	00030230 	.word	0x00030230

000d40fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d40fc:	b508      	push	{r3, lr}
   d40fe:	4b02      	ldr	r3, [pc, #8]	; (d4108 <HAL_RNG_GetRandomNumber+0xc>)
   d4100:	681b      	ldr	r3, [r3, #0]
   d4102:	685b      	ldr	r3, [r3, #4]
   d4104:	9301      	str	r3, [sp, #4]
   d4106:	bd08      	pop	{r3, pc}
   d4108:	00030218 	.word	0x00030218

000d410c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d410c:	b508      	push	{r3, lr}
   d410e:	4b02      	ldr	r3, [pc, #8]	; (d4118 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4110:	681b      	ldr	r3, [r3, #0]
   d4112:	695b      	ldr	r3, [r3, #20]
   d4114:	9301      	str	r3, [sp, #4]
   d4116:	bd08      	pop	{r3, pc}
   d4118:	00030218 	.word	0x00030218

000d411c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d411c:	b508      	push	{r3, lr}
   d411e:	4b02      	ldr	r3, [pc, #8]	; (d4128 <os_thread_is_current+0xc>)
   d4120:	681b      	ldr	r3, [r3, #0]
   d4122:	689b      	ldr	r3, [r3, #8]
   d4124:	9301      	str	r3, [sp, #4]
   d4126:	bd08      	pop	{r3, pc}
   d4128:	00030248 	.word	0x00030248

000d412c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d412c:	b508      	push	{r3, lr}
   d412e:	4b02      	ldr	r3, [pc, #8]	; (d4138 <os_thread_join+0xc>)
   d4130:	681b      	ldr	r3, [r3, #0]
   d4132:	691b      	ldr	r3, [r3, #16]
   d4134:	9301      	str	r3, [sp, #4]
   d4136:	bd08      	pop	{r3, pc}
   d4138:	00030248 	.word	0x00030248

000d413c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d413c:	b508      	push	{r3, lr}
   d413e:	4b02      	ldr	r3, [pc, #8]	; (d4148 <os_thread_cleanup+0xc>)
   d4140:	681b      	ldr	r3, [r3, #0]
   d4142:	695b      	ldr	r3, [r3, #20]
   d4144:	9301      	str	r3, [sp, #4]
   d4146:	bd08      	pop	{r3, pc}
   d4148:	00030248 	.word	0x00030248

000d414c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d414c:	b508      	push	{r3, lr}
   d414e:	4b02      	ldr	r3, [pc, #8]	; (d4158 <os_mutex_create+0xc>)
   d4150:	681b      	ldr	r3, [r3, #0]
   d4152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4154:	9301      	str	r3, [sp, #4]
   d4156:	bd08      	pop	{r3, pc}
   d4158:	00030248 	.word	0x00030248

000d415c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d415c:	b508      	push	{r3, lr}
   d415e:	4b02      	ldr	r3, [pc, #8]	; (d4168 <os_mutex_recursive_create+0xc>)
   d4160:	681b      	ldr	r3, [r3, #0]
   d4162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4164:	9301      	str	r3, [sp, #4]
   d4166:	bd08      	pop	{r3, pc}
   d4168:	00030248 	.word	0x00030248

000d416c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d416c:	b508      	push	{r3, lr}
   d416e:	4b02      	ldr	r3, [pc, #8]	; (d4178 <inet_inet_ntop+0xc>)
   d4170:	681b      	ldr	r3, [r3, #0]
   d4172:	695b      	ldr	r3, [r3, #20]
   d4174:	9301      	str	r3, [sp, #4]
   d4176:	bd08      	pop	{r3, pc}
   d4178:	00030264 	.word	0x00030264

000d417c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d417c:	b508      	push	{r3, lr}
   d417e:	4b02      	ldr	r3, [pc, #8]	; (d4188 <HAL_USART_Init+0xc>)
   d4180:	681b      	ldr	r3, [r3, #0]
   d4182:	681b      	ldr	r3, [r3, #0]
   d4184:	9301      	str	r3, [sp, #4]
   d4186:	bd08      	pop	{r3, pc}
   d4188:	0003023c 	.word	0x0003023c

000d418c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d418c:	b508      	push	{r3, lr}
   d418e:	4b02      	ldr	r3, [pc, #8]	; (d4198 <HAL_USART_Write_Data+0xc>)
   d4190:	681b      	ldr	r3, [r3, #0]
   d4192:	68db      	ldr	r3, [r3, #12]
   d4194:	9301      	str	r3, [sp, #4]
   d4196:	bd08      	pop	{r3, pc}
   d4198:	0003023c 	.word	0x0003023c

000d419c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d419c:	b508      	push	{r3, lr}
   d419e:	4b02      	ldr	r3, [pc, #8]	; (d41a8 <HAL_USART_Available_Data+0xc>)
   d41a0:	681b      	ldr	r3, [r3, #0]
   d41a2:	691b      	ldr	r3, [r3, #16]
   d41a4:	9301      	str	r3, [sp, #4]
   d41a6:	bd08      	pop	{r3, pc}
   d41a8:	0003023c 	.word	0x0003023c

000d41ac <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d41ac:	b508      	push	{r3, lr}
   d41ae:	4b02      	ldr	r3, [pc, #8]	; (d41b8 <HAL_USART_Read_Data+0xc>)
   d41b0:	681b      	ldr	r3, [r3, #0]
   d41b2:	695b      	ldr	r3, [r3, #20]
   d41b4:	9301      	str	r3, [sp, #4]
   d41b6:	bd08      	pop	{r3, pc}
   d41b8:	0003023c 	.word	0x0003023c

000d41bc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d41bc:	b508      	push	{r3, lr}
   d41be:	4b02      	ldr	r3, [pc, #8]	; (d41c8 <HAL_USART_Peek_Data+0xc>)
   d41c0:	681b      	ldr	r3, [r3, #0]
   d41c2:	699b      	ldr	r3, [r3, #24]
   d41c4:	9301      	str	r3, [sp, #4]
   d41c6:	bd08      	pop	{r3, pc}
   d41c8:	0003023c 	.word	0x0003023c

000d41cc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d41cc:	b508      	push	{r3, lr}
   d41ce:	4b02      	ldr	r3, [pc, #8]	; (d41d8 <HAL_USART_Flush_Data+0xc>)
   d41d0:	681b      	ldr	r3, [r3, #0]
   d41d2:	69db      	ldr	r3, [r3, #28]
   d41d4:	9301      	str	r3, [sp, #4]
   d41d6:	bd08      	pop	{r3, pc}
   d41d8:	0003023c 	.word	0x0003023c

000d41dc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d41dc:	b508      	push	{r3, lr}
   d41de:	4b02      	ldr	r3, [pc, #8]	; (d41e8 <HAL_USART_Available_Data_For_Write+0xc>)
   d41e0:	681b      	ldr	r3, [r3, #0]
   d41e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d41e4:	9301      	str	r3, [sp, #4]
   d41e6:	bd08      	pop	{r3, pc}
   d41e8:	0003023c 	.word	0x0003023c

000d41ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d41ec:	b508      	push	{r3, lr}
   d41ee:	4b02      	ldr	r3, [pc, #8]	; (d41f8 <HAL_USB_USART_Init+0xc>)
   d41f0:	681b      	ldr	r3, [r3, #0]
   d41f2:	681b      	ldr	r3, [r3, #0]
   d41f4:	9301      	str	r3, [sp, #4]
   d41f6:	bd08      	pop	{r3, pc}
   d41f8:	0003024c 	.word	0x0003024c

000d41fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d41fc:	b508      	push	{r3, lr}
   d41fe:	4b02      	ldr	r3, [pc, #8]	; (d4208 <HAL_USB_USART_Available_Data+0xc>)
   d4200:	681b      	ldr	r3, [r3, #0]
   d4202:	691b      	ldr	r3, [r3, #16]
   d4204:	9301      	str	r3, [sp, #4]
   d4206:	bd08      	pop	{r3, pc}
   d4208:	0003024c 	.word	0x0003024c

000d420c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d420c:	b508      	push	{r3, lr}
   d420e:	4b02      	ldr	r3, [pc, #8]	; (d4218 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4210:	681b      	ldr	r3, [r3, #0]
   d4212:	695b      	ldr	r3, [r3, #20]
   d4214:	9301      	str	r3, [sp, #4]
   d4216:	bd08      	pop	{r3, pc}
   d4218:	0003024c 	.word	0x0003024c

000d421c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d421c:	b508      	push	{r3, lr}
   d421e:	4b02      	ldr	r3, [pc, #8]	; (d4228 <HAL_USB_USART_Receive_Data+0xc>)
   d4220:	681b      	ldr	r3, [r3, #0]
   d4222:	699b      	ldr	r3, [r3, #24]
   d4224:	9301      	str	r3, [sp, #4]
   d4226:	bd08      	pop	{r3, pc}
   d4228:	0003024c 	.word	0x0003024c

000d422c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d422c:	b508      	push	{r3, lr}
   d422e:	4b02      	ldr	r3, [pc, #8]	; (d4238 <HAL_USB_USART_Send_Data+0xc>)
   d4230:	681b      	ldr	r3, [r3, #0]
   d4232:	69db      	ldr	r3, [r3, #28]
   d4234:	9301      	str	r3, [sp, #4]
   d4236:	bd08      	pop	{r3, pc}
   d4238:	0003024c 	.word	0x0003024c

000d423c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d423c:	b508      	push	{r3, lr}
   d423e:	4b02      	ldr	r3, [pc, #8]	; (d4248 <HAL_USB_USART_Flush_Data+0xc>)
   d4240:	681b      	ldr	r3, [r3, #0]
   d4242:	6a1b      	ldr	r3, [r3, #32]
   d4244:	9301      	str	r3, [sp, #4]
   d4246:	bd08      	pop	{r3, pc}
   d4248:	0003024c 	.word	0x0003024c

000d424c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d424c:	b508      	push	{r3, lr}
   d424e:	4b02      	ldr	r3, [pc, #8]	; (d4258 <set_system_mode+0xc>)
   d4250:	681b      	ldr	r3, [r3, #0]
   d4252:	685b      	ldr	r3, [r3, #4]
   d4254:	9301      	str	r3, [sp, #4]
   d4256:	bd08      	pop	{r3, pc}
   d4258:	00030220 	.word	0x00030220

000d425c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d425c:	b508      	push	{r3, lr}
   d425e:	4b03      	ldr	r3, [pc, #12]	; (d426c <system_ctrl_set_app_request_handler+0x10>)
   d4260:	681b      	ldr	r3, [r3, #0]
   d4262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4266:	9301      	str	r3, [sp, #4]
   d4268:	bd08      	pop	{r3, pc}
   d426a:	0000      	.short	0x0000
   d426c:	00030220 	.word	0x00030220

000d4270 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4270:	b508      	push	{r3, lr}
   d4272:	4b03      	ldr	r3, [pc, #12]	; (d4280 <system_ctrl_set_result+0x10>)
   d4274:	681b      	ldr	r3, [r3, #0]
   d4276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d427a:	9301      	str	r3, [sp, #4]
   d427c:	bd08      	pop	{r3, pc}
   d427e:	0000      	.short	0x0000
   d4280:	00030220 	.word	0x00030220

000d4284 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4284:	b508      	push	{r3, lr}
   d4286:	4b02      	ldr	r3, [pc, #8]	; (d4290 <network_connect+0xc>)
   d4288:	681b      	ldr	r3, [r3, #0]
   d428a:	685b      	ldr	r3, [r3, #4]
   d428c:	9301      	str	r3, [sp, #4]
   d428e:	bd08      	pop	{r3, pc}
   d4290:	00030240 	.word	0x00030240

000d4294 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4294:	b508      	push	{r3, lr}
   d4296:	4b02      	ldr	r3, [pc, #8]	; (d42a0 <network_connecting+0xc>)
   d4298:	681b      	ldr	r3, [r3, #0]
   d429a:	689b      	ldr	r3, [r3, #8]
   d429c:	9301      	str	r3, [sp, #4]
   d429e:	bd08      	pop	{r3, pc}
   d42a0:	00030240 	.word	0x00030240

000d42a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d42a4:	b508      	push	{r3, lr}
   d42a6:	4b02      	ldr	r3, [pc, #8]	; (d42b0 <network_disconnect+0xc>)
   d42a8:	681b      	ldr	r3, [r3, #0]
   d42aa:	68db      	ldr	r3, [r3, #12]
   d42ac:	9301      	str	r3, [sp, #4]
   d42ae:	bd08      	pop	{r3, pc}
   d42b0:	00030240 	.word	0x00030240

000d42b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d42b4:	b508      	push	{r3, lr}
   d42b6:	4b02      	ldr	r3, [pc, #8]	; (d42c0 <network_ready+0xc>)
   d42b8:	681b      	ldr	r3, [r3, #0]
   d42ba:	691b      	ldr	r3, [r3, #16]
   d42bc:	9301      	str	r3, [sp, #4]
   d42be:	bd08      	pop	{r3, pc}
   d42c0:	00030240 	.word	0x00030240

000d42c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d42c4:	b508      	push	{r3, lr}
   d42c6:	4b02      	ldr	r3, [pc, #8]	; (d42d0 <network_on+0xc>)
   d42c8:	681b      	ldr	r3, [r3, #0]
   d42ca:	695b      	ldr	r3, [r3, #20]
   d42cc:	9301      	str	r3, [sp, #4]
   d42ce:	bd08      	pop	{r3, pc}
   d42d0:	00030240 	.word	0x00030240

000d42d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d42d4:	b508      	push	{r3, lr}
   d42d6:	4b02      	ldr	r3, [pc, #8]	; (d42e0 <network_off+0xc>)
   d42d8:	681b      	ldr	r3, [r3, #0]
   d42da:	699b      	ldr	r3, [r3, #24]
   d42dc:	9301      	str	r3, [sp, #4]
   d42de:	bd08      	pop	{r3, pc}
   d42e0:	00030240 	.word	0x00030240

000d42e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d42e4:	b508      	push	{r3, lr}
   d42e6:	4b02      	ldr	r3, [pc, #8]	; (d42f0 <network_listen+0xc>)
   d42e8:	681b      	ldr	r3, [r3, #0]
   d42ea:	69db      	ldr	r3, [r3, #28]
   d42ec:	9301      	str	r3, [sp, #4]
   d42ee:	bd08      	pop	{r3, pc}
   d42f0:	00030240 	.word	0x00030240

000d42f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d42f4:	b508      	push	{r3, lr}
   d42f6:	4b02      	ldr	r3, [pc, #8]	; (d4300 <network_listening+0xc>)
   d42f8:	681b      	ldr	r3, [r3, #0]
   d42fa:	6a1b      	ldr	r3, [r3, #32]
   d42fc:	9301      	str	r3, [sp, #4]
   d42fe:	bd08      	pop	{r3, pc}
   d4300:	00030240 	.word	0x00030240

000d4304 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <network_set_listen_timeout+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	00030240 	.word	0x00030240

000d4314 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <network_get_listen_timeout+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	00030240 	.word	0x00030240

000d4324 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	00030244 	.word	0x00030244

000d4334 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <malloc+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	681b      	ldr	r3, [r3, #0]
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	0003021c 	.word	0x0003021c

000d4344 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <free+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	685b      	ldr	r3, [r3, #4]
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	0003021c 	.word	0x0003021c

000d4354 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4354:	2200      	movs	r2, #0
   d4356:	4611      	mov	r1, r2
   d4358:	6840      	ldr	r0, [r0, #4]
   d435a:	f7ff bfcb 	b.w	d42f4 <network_listening>

000d435e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d435e:	2200      	movs	r2, #0
   d4360:	4611      	mov	r1, r2
   d4362:	6840      	ldr	r0, [r0, #4]
   d4364:	f7ff bfd6 	b.w	d4314 <network_get_listen_timeout>

000d4368 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4368:	2200      	movs	r2, #0
   d436a:	6840      	ldr	r0, [r0, #4]
   d436c:	f7ff bfca 	b.w	d4304 <network_set_listen_timeout>

000d4370 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4370:	2200      	movs	r2, #0
   d4372:	f081 0101 	eor.w	r1, r1, #1
   d4376:	6840      	ldr	r0, [r0, #4]
   d4378:	f7ff bfb4 	b.w	d42e4 <network_listen>

000d437c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d437c:	2300      	movs	r3, #0
   d437e:	461a      	mov	r2, r3
   d4380:	4619      	mov	r1, r3
   d4382:	6840      	ldr	r0, [r0, #4]
   d4384:	f7ff bfa6 	b.w	d42d4 <network_off>

000d4388 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4388:	2300      	movs	r3, #0
   d438a:	461a      	mov	r2, r3
   d438c:	4619      	mov	r1, r3
   d438e:	6840      	ldr	r0, [r0, #4]
   d4390:	f7ff bf98 	b.w	d42c4 <network_on>

000d4394 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4394:	2200      	movs	r2, #0
   d4396:	4611      	mov	r1, r2
   d4398:	6840      	ldr	r0, [r0, #4]
   d439a:	f7ff bf8b 	b.w	d42b4 <network_ready>

000d439e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d439e:	2200      	movs	r2, #0
   d43a0:	4611      	mov	r1, r2
   d43a2:	6840      	ldr	r0, [r0, #4]
   d43a4:	f7ff bf76 	b.w	d4294 <network_connecting>

000d43a8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d43a8:	2200      	movs	r2, #0
   d43aa:	2102      	movs	r1, #2
   d43ac:	6840      	ldr	r0, [r0, #4]
   d43ae:	f7ff bf79 	b.w	d42a4 <network_disconnect>

000d43b2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d43b2:	2300      	movs	r3, #0
   d43b4:	461a      	mov	r2, r3
   d43b6:	6840      	ldr	r0, [r0, #4]
   d43b8:	f7ff bf64 	b.w	d4284 <network_connect>

000d43bc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d43bc:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d43be:	2203      	movs	r2, #3
   d43c0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d43c2:	4a02      	ldr	r2, [pc, #8]	; (d43cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d43c4:	601a      	str	r2, [r3, #0]
   d43c6:	4770      	bx	lr
   d43c8:	2003e4e8 	.word	0x2003e4e8
   d43cc:	000d4f90 	.word	0x000d4f90

000d43d0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d43d0:	4770      	bx	lr

000d43d2 <_ZN8SPIClassD0Ev>:
   d43d2:	b510      	push	{r4, lr}
   d43d4:	2110      	movs	r1, #16
   d43d6:	4604      	mov	r4, r0
   d43d8:	f000 fc2f 	bl	d4c3a <_ZdlPvj>
   d43dc:	4620      	mov	r0, r4
   d43de:	bd10      	pop	{r4, pc}

000d43e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d43e0:	b570      	push	{r4, r5, r6, lr}
   d43e2:	4b08      	ldr	r3, [pc, #32]	; (d4404 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d43e4:	6003      	str	r3, [r0, #0]
   d43e6:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d43e8:	2500      	movs	r5, #0
   d43ea:	460e      	mov	r6, r1
   d43ec:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d43f0:	f7ff feac 	bl	d414c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d43f4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d43f6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d43f8:	f7ff fe78 	bl	d40ec <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d43fc:	60a5      	str	r5, [r4, #8]
}
   d43fe:	4620      	mov	r0, r4
   d4400:	bd70      	pop	{r4, r5, r6, pc}
   d4402:	bf00      	nop
   d4404:	000d4fc4 	.word	0x000d4fc4

000d4408 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4408:	4b04      	ldr	r3, [pc, #16]	; (d441c <_GLOBAL__sub_I_System+0x14>)
   d440a:	2000      	movs	r0, #0
   d440c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4410:	7018      	strb	r0, [r3, #0]
   d4412:	8058      	strh	r0, [r3, #2]
   d4414:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4416:	f7ff bf19 	b.w	d424c <set_system_mode>
   d441a:	bf00      	nop
   d441c:	2003e4f0 	.word	0x2003e4f0

000d4420 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4420:	4802      	ldr	r0, [pc, #8]	; (d442c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4422:	2300      	movs	r3, #0
   d4424:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4426:	f7ff be99 	b.w	d415c <os_mutex_recursive_create>
   d442a:	bf00      	nop
   d442c:	2003e4f8 	.word	0x2003e4f8

000d4430 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4432:	4606      	mov	r6, r0
   d4434:	460d      	mov	r5, r1
   d4436:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4438:	2400      	movs	r4, #0
  while (size--) {
   d443a:	42bd      	cmp	r5, r7
   d443c:	d00c      	beq.n	d4458 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d443e:	6833      	ldr	r3, [r6, #0]
   d4440:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4444:	689b      	ldr	r3, [r3, #8]
   d4446:	4630      	mov	r0, r6
   d4448:	4798      	blx	r3
     if (chunk>=0)
   d444a:	2800      	cmp	r0, #0
   d444c:	db01      	blt.n	d4452 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d444e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4450:	e7f3      	b.n	d443a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4452:	2c00      	cmp	r4, #0
   d4454:	bf08      	it	eq
   d4456:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4458:	4620      	mov	r0, r4
   d445a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d445c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d445c:	b570      	push	{r4, r5, r6, lr}
   d445e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4460:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4462:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4464:	b149      	cbz	r1, d447a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4466:	f000 fd7d 	bl	d4f64 <strlen>
   d446a:	682b      	ldr	r3, [r5, #0]
   d446c:	4602      	mov	r2, r0
   d446e:	4621      	mov	r1, r4
   d4470:	4628      	mov	r0, r5
   d4472:	68db      	ldr	r3, [r3, #12]
    }
   d4474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4478:	4718      	bx	r3
    }
   d447a:	bd70      	pop	{r4, r5, r6, pc}

000d447c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d447c:	6803      	ldr	r3, [r0, #0]
   d447e:	689b      	ldr	r3, [r3, #8]
   d4480:	4718      	bx	r3

000d4482 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4482:	b530      	push	{r4, r5, lr}
   d4484:	b08b      	sub	sp, #44	; 0x2c
   d4486:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4488:	2100      	movs	r1, #0
   d448a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d448e:	2a01      	cmp	r2, #1
   d4490:	bf98      	it	ls
   d4492:	220a      	movls	r2, #10
   d4494:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4498:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d449c:	fb05 3312 	mls	r3, r5, r2, r3
   d44a0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d44a4:	2b09      	cmp	r3, #9
   d44a6:	bf94      	ite	ls
   d44a8:	3330      	addls	r3, #48	; 0x30
   d44aa:	3337      	addhi	r3, #55	; 0x37
   d44ac:	b2db      	uxtb	r3, r3
   d44ae:	4621      	mov	r1, r4
   d44b0:	f804 3901 	strb.w	r3, [r4], #-1
   d44b4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d44b6:	2d00      	cmp	r5, #0
   d44b8:	d1ee      	bne.n	d4498 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d44ba:	f7ff ffcf 	bl	d445c <_ZN5Print5writeEPKc>
}
   d44be:	b00b      	add	sp, #44	; 0x2c
   d44c0:	bd30      	pop	{r4, r5, pc}

000d44c2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d44c2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d44c4:	b92a      	cbnz	r2, d44d2 <_ZN5Print5printEmi+0x10>
   d44c6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d44c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d44cc:	689b      	ldr	r3, [r3, #8]
   d44ce:	b2c9      	uxtb	r1, r1
   d44d0:	4718      	bx	r3
  else return printNumber(n, base);
   d44d2:	b2d2      	uxtb	r2, r2
}
   d44d4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d44d8:	f7ff bfd3 	b.w	d4482 <_ZN5Print11printNumberEmh>

000d44dc <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d44dc:	f7ff bff1 	b.w	d44c2 <_ZN5Print5printEmi>

000d44e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d44e0:	4b01      	ldr	r3, [pc, #4]	; (d44e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d44e2:	4a02      	ldr	r2, [pc, #8]	; (d44ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d44e4:	601a      	str	r2, [r3, #0]
   d44e6:	4770      	bx	lr
   d44e8:	2003e4fc 	.word	0x2003e4fc
   d44ec:	000d503f 	.word	0x000d503f

000d44f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d44f0:	4b02      	ldr	r3, [pc, #8]	; (d44fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d44f2:	681a      	ldr	r2, [r3, #0]
   d44f4:	4b02      	ldr	r3, [pc, #8]	; (d4500 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d44f6:	601a      	str	r2, [r3, #0]
   d44f8:	4770      	bx	lr
   d44fa:	bf00      	nop
   d44fc:	2003e47c 	.word	0x2003e47c
   d4500:	2003e500 	.word	0x2003e500

000d4504 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4504:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4506:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4508:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d450a:	b113      	cbz	r3, d4512 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d450c:	2203      	movs	r2, #3
   d450e:	4601      	mov	r1, r0
   d4510:	4798      	blx	r3
    }
   d4512:	4620      	mov	r0, r4
   d4514:	bd10      	pop	{r4, pc}

000d4516 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4516:	b510      	push	{r4, lr}
   d4518:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d451a:	f7ff fff3 	bl	d4504 <_ZNSt14_Function_baseD1Ev>
   d451e:	4620      	mov	r0, r4
   d4520:	bd10      	pop	{r4, pc}
	...

000d4524 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4524:	4803      	ldr	r0, [pc, #12]	; (d4534 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4526:	4a04      	ldr	r2, [pc, #16]	; (d4538 <_GLOBAL__sub_I_RGB+0x14>)
   d4528:	4904      	ldr	r1, [pc, #16]	; (d453c <_GLOBAL__sub_I_RGB+0x18>)
   d452a:	2300      	movs	r3, #0
   d452c:	6083      	str	r3, [r0, #8]
   d452e:	f000 bb7f 	b.w	d4c30 <__aeabi_atexit>
   d4532:	bf00      	nop
   d4534:	2003e504 	.word	0x2003e504
   d4538:	2003e4e4 	.word	0x2003e4e4
   d453c:	000d4517 	.word	0x000d4517

000d4540 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4540:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4542:	4b0f      	ldr	r3, [pc, #60]	; (d4580 <serialEventRun+0x40>)
   d4544:	b133      	cbz	r3, d4554 <serialEventRun+0x14>
   d4546:	f000 f93d 	bl	d47c4 <_Z16_fetch_usbserialv>
   d454a:	6803      	ldr	r3, [r0, #0]
   d454c:	691b      	ldr	r3, [r3, #16]
   d454e:	4798      	blx	r3
   d4550:	2800      	cmp	r0, #0
   d4552:	dc0d      	bgt.n	d4570 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4554:	4b0b      	ldr	r3, [pc, #44]	; (d4584 <serialEventRun+0x44>)
   d4556:	b133      	cbz	r3, d4566 <serialEventRun+0x26>
   d4558:	f000 f9b2 	bl	d48c0 <_Z22__fetch_global_Serial1v>
   d455c:	6803      	ldr	r3, [r0, #0]
   d455e:	691b      	ldr	r3, [r3, #16]
   d4560:	4798      	blx	r3
   d4562:	2800      	cmp	r0, #0
   d4564:	dc07      	bgt.n	d4576 <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d4566:	4b08      	ldr	r3, [pc, #32]	; (d4588 <serialEventRun+0x48>)
   d4568:	b143      	cbz	r3, d457c <serialEventRun+0x3c>
   d456a:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d456e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4570:	f3af 8000 	nop.w
   d4574:	e7ee      	b.n	d4554 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4576:	f3af 8000 	nop.w
   d457a:	e7f4      	b.n	d4566 <serialEventRun+0x26>
   d457c:	bd08      	pop	{r3, pc}
   d457e:	bf00      	nop
	...

000d458c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d458c:	b508      	push	{r3, lr}
	serialEventRun();
   d458e:	f7ff ffd7 	bl	d4540 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4592:	f7ff fdbb 	bl	d410c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4596:	4b01      	ldr	r3, [pc, #4]	; (d459c <_post_loop+0x10>)
   d4598:	6018      	str	r0, [r3, #0]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	2003e74c 	.word	0x2003e74c

000d45a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d45a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d45a2:	2300      	movs	r3, #0
   d45a4:	9300      	str	r3, [sp, #0]
   d45a6:	461a      	mov	r2, r3
   d45a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d45ac:	f7ff fe60 	bl	d4270 <system_ctrl_set_result>
}
   d45b0:	b003      	add	sp, #12
   d45b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d45b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d45b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d45ba:	8843      	ldrh	r3, [r0, #2]
   d45bc:	2b0a      	cmp	r3, #10
   d45be:	d008      	beq.n	d45d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d45c0:	2b50      	cmp	r3, #80	; 0x50
   d45c2:	d109      	bne.n	d45d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d45c4:	4b09      	ldr	r3, [pc, #36]	; (d45ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d45c6:	681b      	ldr	r3, [r3, #0]
   d45c8:	b13b      	cbz	r3, d45da <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d45ca:	b003      	add	sp, #12
   d45cc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d45d0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d45d2:	f7ff ffe5 	bl	d45a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d45d6:	e006      	b.n	d45e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d45d8:	2300      	movs	r3, #0
   d45da:	9300      	str	r3, [sp, #0]
   d45dc:	461a      	mov	r2, r3
   d45de:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d45e2:	f7ff fe45 	bl	d4270 <system_ctrl_set_result>
        break;
    }
}
   d45e6:	b003      	add	sp, #12
   d45e8:	f85d fb04 	ldr.w	pc, [sp], #4
   d45ec:	2003e514 	.word	0x2003e514

000d45f0 <module_user_init_hook>:

void module_user_init_hook()
{
   d45f0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d45f2:	f7ff fd83 	bl	d40fc <HAL_RNG_GetRandomNumber>
   d45f6:	4604      	mov	r4, r0
    srand(seed);
   d45f8:	f000 fc8c 	bl	d4f14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d45fc:	4b07      	ldr	r3, [pc, #28]	; (d461c <module_user_init_hook+0x2c>)
   d45fe:	b113      	cbz	r3, d4606 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4600:	4620      	mov	r0, r4
   d4602:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4606:	2100      	movs	r1, #0
   d4608:	4804      	ldr	r0, [pc, #16]	; (d461c <module_user_init_hook+0x2c>)
   d460a:	f7ff fe8b 	bl	d4324 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d460e:	2100      	movs	r1, #0
   d4610:	4803      	ldr	r0, [pc, #12]	; (d4620 <module_user_init_hook+0x30>)
}
   d4612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4616:	f7ff be21 	b.w	d425c <system_ctrl_set_app_request_handler>
   d461a:	bf00      	nop
   d461c:	00000000 	.word	0x00000000
   d4620:	000d45b9 	.word	0x000d45b9

000d4624 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4624:	4770      	bx	lr

000d4626 <_ZN9IPAddressD0Ev>:
   d4626:	b510      	push	{r4, lr}
   d4628:	2118      	movs	r1, #24
   d462a:	4604      	mov	r4, r0
   d462c:	f000 fb05 	bl	d4c3a <_ZdlPvj>
   d4630:	4620      	mov	r0, r4
   d4632:	bd10      	pop	{r4, pc}

000d4634 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4634:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4636:	7d03      	ldrb	r3, [r0, #20]
   d4638:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d463a:	b08d      	sub	sp, #52	; 0x34
   d463c:	460e      	mov	r6, r1
   d463e:	f100 0704 	add.w	r7, r0, #4
   d4642:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4646:	d002      	beq.n	d464e <_ZNK9IPAddress7printToER5Print+0x1a>
   d4648:	f100 0508 	add.w	r5, r0, #8
   d464c:	e018      	b.n	d4680 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d464e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4650:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4652:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4656:	232f      	movs	r3, #47	; 0x2f
   d4658:	462a      	mov	r2, r5
   d465a:	200a      	movs	r0, #10
   d465c:	f7ff fd86 	bl	d416c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4660:	4628      	mov	r0, r5
   d4662:	f000 fc7f 	bl	d4f64 <strlen>
   d4666:	6833      	ldr	r3, [r6, #0]
   d4668:	4602      	mov	r2, r0
   d466a:	68db      	ldr	r3, [r3, #12]
   d466c:	4629      	mov	r1, r5
   d466e:	4630      	mov	r0, r6
   d4670:	4798      	blx	r3
   d4672:	e00f      	b.n	d4694 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4674:	b124      	cbz	r4, d4680 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4676:	212e      	movs	r1, #46	; 0x2e
   d4678:	4630      	mov	r0, r6
   d467a:	f7ff feff 	bl	d447c <_ZN5Print5printEc>
   d467e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4680:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4684:	220a      	movs	r2, #10
   d4686:	4630      	mov	r0, r6
   d4688:	f7ff ff28 	bl	d44dc <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d468c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d468e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4690:	d1f0      	bne.n	d4674 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4692:	4620      	mov	r0, r4
    }
    return n;
}
   d4694:	b00d      	add	sp, #52	; 0x34
   d4696:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4698 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4698:	b510      	push	{r4, lr}
   d469a:	4b05      	ldr	r3, [pc, #20]	; (d46b0 <_ZN9IPAddressC1Ev+0x18>)
   d469c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d469e:	2211      	movs	r2, #17
   d46a0:	f840 3b04 	str.w	r3, [r0], #4
   d46a4:	2100      	movs	r1, #0
   d46a6:	f000 fc2c 	bl	d4f02 <memset>
{
    clear();
}
   d46aa:	4620      	mov	r0, r4
   d46ac:	bd10      	pop	{r4, pc}
   d46ae:	bf00      	nop
   d46b0:	000d50e0 	.word	0x000d50e0

000d46b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d46b4:	4603      	mov	r3, r0
   d46b6:	4a07      	ldr	r2, [pc, #28]	; (d46d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d46b8:	b510      	push	{r4, lr}
   d46ba:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d46be:	f101 0210 	add.w	r2, r1, #16
   d46c2:	f851 4b04 	ldr.w	r4, [r1], #4
   d46c6:	f843 4b04 	str.w	r4, [r3], #4
   d46ca:	4291      	cmp	r1, r2
   d46cc:	d1f9      	bne.n	d46c2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d46ce:	780a      	ldrb	r2, [r1, #0]
   d46d0:	701a      	strb	r2, [r3, #0]
}
   d46d2:	bd10      	pop	{r4, pc}
   d46d4:	000d50e0 	.word	0x000d50e0

000d46d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d46d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d46da:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d46de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d46e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d46e6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d46ea:	2304      	movs	r3, #4
   d46ec:	6041      	str	r1, [r0, #4]
   d46ee:	7503      	strb	r3, [r0, #20]
   d46f0:	bd10      	pop	{r4, pc}

000d46f2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d46f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d46f4:	780d      	ldrb	r5, [r1, #0]
   d46f6:	788b      	ldrb	r3, [r1, #2]
   d46f8:	784a      	ldrb	r2, [r1, #1]
   d46fa:	78c9      	ldrb	r1, [r1, #3]
   d46fc:	9100      	str	r1, [sp, #0]
   d46fe:	4629      	mov	r1, r5
   d4700:	f7ff ffea 	bl	d46d8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4704:	b003      	add	sp, #12
   d4706:	bd30      	pop	{r4, r5, pc}

000d4708 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4708:	7441      	strb	r1, [r0, #17]
   d470a:	4770      	bx	lr

000d470c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d470c:	4770      	bx	lr

000d470e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d470e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4710:	2100      	movs	r1, #0
   d4712:	7c00      	ldrb	r0, [r0, #16]
   d4714:	f7ff fd82 	bl	d421c <HAL_USB_USART_Receive_Data>
}
   d4718:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d471c:	bf28      	it	cs
   d471e:	f04f 30ff 	movcs.w	r0, #4294967295
   d4722:	bd08      	pop	{r3, pc}

000d4724 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4724:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4726:	2101      	movs	r1, #1
   d4728:	7c00      	ldrb	r0, [r0, #16]
   d472a:	f7ff fd77 	bl	d421c <HAL_USB_USART_Receive_Data>
}
   d472e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4732:	bf28      	it	cs
   d4734:	f04f 30ff 	movcs.w	r0, #4294967295
   d4738:	bd08      	pop	{r3, pc}

000d473a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d473a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d473c:	7c00      	ldrb	r0, [r0, #16]
   d473e:	f7ff fd65 	bl	d420c <HAL_USB_USART_Available_Data_For_Write>
}
   d4742:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4746:	bd08      	pop	{r3, pc}

000d4748 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4748:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d474a:	7c00      	ldrb	r0, [r0, #16]
   d474c:	f7ff fd56 	bl	d41fc <HAL_USB_USART_Available_Data>
}
   d4750:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4754:	bd08      	pop	{r3, pc}

000d4756 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4756:	7c00      	ldrb	r0, [r0, #16]
   d4758:	f7ff bd70 	b.w	d423c <HAL_USB_USART_Flush_Data>

000d475c <_ZN9USBSerialD0Ev>:
   d475c:	b510      	push	{r4, lr}
   d475e:	2114      	movs	r1, #20
   d4760:	4604      	mov	r4, r0
   d4762:	f000 fa6a 	bl	d4c3a <_ZdlPvj>
   d4766:	4620      	mov	r0, r4
   d4768:	bd10      	pop	{r4, pc}

000d476a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d476a:	b538      	push	{r3, r4, r5, lr}
   d476c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d476e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4770:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4772:	f7ff fd4b 	bl	d420c <HAL_USB_USART_Available_Data_For_Write>
   d4776:	2800      	cmp	r0, #0
   d4778:	dc01      	bgt.n	d477e <_ZN9USBSerial5writeEh+0x14>
   d477a:	7c60      	ldrb	r0, [r4, #17]
   d477c:	b128      	cbz	r0, d478a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d477e:	4629      	mov	r1, r5
   d4780:	7c20      	ldrb	r0, [r4, #16]
   d4782:	f7ff fd53 	bl	d422c <HAL_USB_USART_Send_Data>
   d4786:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d478a:	bd38      	pop	{r3, r4, r5, pc}

000d478c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d478c:	b510      	push	{r4, lr}
   d478e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4790:	2300      	movs	r3, #0
   d4792:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4798:	60a3      	str	r3, [r4, #8]
   d479a:	4b05      	ldr	r3, [pc, #20]	; (d47b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d479c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d479e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d47a0:	4608      	mov	r0, r1
{
  _serial = serial;
   d47a2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d47a4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d47a6:	4611      	mov	r1, r2
   d47a8:	f7ff fd20 	bl	d41ec <HAL_USB_USART_Init>
}
   d47ac:	4620      	mov	r0, r4
   d47ae:	bd10      	pop	{r4, pc}
   d47b0:	000d50f4 	.word	0x000d50f4

000d47b4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d47b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d47b6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d47b8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d47ba:	2100      	movs	r1, #0
   d47bc:	f000 fba1 	bl	d4f02 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d47c0:	4620      	mov	r0, r4
   d47c2:	bd10      	pop	{r4, pc}

000d47c4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d47c4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d47c6:	4d0e      	ldr	r5, [pc, #56]	; (d4800 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d47c8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d47ca:	a801      	add	r0, sp, #4
   d47cc:	f7ff fff2 	bl	d47b4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d47d0:	6829      	ldr	r1, [r5, #0]
   d47d2:	f011 0401 	ands.w	r4, r1, #1
   d47d6:	d110      	bne.n	d47fa <_Z16_fetch_usbserialv+0x36>
   d47d8:	4628      	mov	r0, r5
   d47da:	f7ff fc62 	bl	d40a2 <__cxa_guard_acquire>
   d47de:	b160      	cbz	r0, d47fa <_Z16_fetch_usbserialv+0x36>
   d47e0:	aa01      	add	r2, sp, #4
   d47e2:	4621      	mov	r1, r4
   d47e4:	4807      	ldr	r0, [pc, #28]	; (d4804 <_Z16_fetch_usbserialv+0x40>)
   d47e6:	f7ff ffd1 	bl	d478c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d47ea:	4628      	mov	r0, r5
   d47ec:	f7ff fc5e 	bl	d40ac <__cxa_guard_release>
   d47f0:	4a05      	ldr	r2, [pc, #20]	; (d4808 <_Z16_fetch_usbserialv+0x44>)
   d47f2:	4906      	ldr	r1, [pc, #24]	; (d480c <_Z16_fetch_usbserialv+0x48>)
   d47f4:	4803      	ldr	r0, [pc, #12]	; (d4804 <_Z16_fetch_usbserialv+0x40>)
   d47f6:	f000 fa1b 	bl	d4c30 <__aeabi_atexit>
	return _usbserial;
}
   d47fa:	4802      	ldr	r0, [pc, #8]	; (d4804 <_Z16_fetch_usbserialv+0x40>)
   d47fc:	b007      	add	sp, #28
   d47fe:	bd30      	pop	{r4, r5, pc}
   d4800:	2003e518 	.word	0x2003e518
   d4804:	2003e51c 	.word	0x2003e51c
   d4808:	2003e4e4 	.word	0x2003e4e4
   d480c:	000d470d 	.word	0x000d470d

000d4810 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4810:	4770      	bx	lr

000d4812 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4812:	7441      	strb	r1, [r0, #17]
   d4814:	4770      	bx	lr

000d4816 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4816:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4818:	7c00      	ldrb	r0, [r0, #16]
   d481a:	f7ff fcdf 	bl	d41dc <HAL_USART_Available_Data_For_Write>
}
   d481e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4822:	bd08      	pop	{r3, pc}

000d4824 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4824:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4826:	7c00      	ldrb	r0, [r0, #16]
   d4828:	f7ff fcb8 	bl	d419c <HAL_USART_Available_Data>
}
   d482c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4830:	bd08      	pop	{r3, pc}

000d4832 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4832:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4834:	7c00      	ldrb	r0, [r0, #16]
   d4836:	f7ff fcc1 	bl	d41bc <HAL_USART_Peek_Data>
}
   d483a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d483e:	bf28      	it	cs
   d4840:	f04f 30ff 	movcs.w	r0, #4294967295
   d4844:	bd08      	pop	{r3, pc}

000d4846 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4846:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4848:	7c00      	ldrb	r0, [r0, #16]
   d484a:	f7ff fcaf 	bl	d41ac <HAL_USART_Read_Data>
}
   d484e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4852:	bf28      	it	cs
   d4854:	f04f 30ff 	movcs.w	r0, #4294967295
   d4858:	bd08      	pop	{r3, pc}

000d485a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d485a:	7c00      	ldrb	r0, [r0, #16]
   d485c:	f7ff bcb6 	b.w	d41cc <HAL_USART_Flush_Data>

000d4860 <_ZN11USARTSerialD0Ev>:
   d4860:	b510      	push	{r4, lr}
   d4862:	2114      	movs	r1, #20
   d4864:	4604      	mov	r4, r0
   d4866:	f000 f9e8 	bl	d4c3a <_ZdlPvj>
   d486a:	4620      	mov	r0, r4
   d486c:	bd10      	pop	{r4, pc}

000d486e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d486e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4870:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4872:	4604      	mov	r4, r0
   d4874:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4876:	b925      	cbnz	r5, d4882 <_ZN11USARTSerial5writeEh+0x14>
   d4878:	7c00      	ldrb	r0, [r0, #16]
   d487a:	f7ff fcaf 	bl	d41dc <HAL_USART_Available_Data_For_Write>
   d487e:	2800      	cmp	r0, #0
   d4880:	dd05      	ble.n	d488e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4882:	4631      	mov	r1, r6
   d4884:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d488a:	f7ff bc7f 	b.w	d418c <HAL_USART_Write_Data>
  }
  return 0;
}
   d488e:	4628      	mov	r0, r5
   d4890:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4894 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4894:	b510      	push	{r4, lr}
   d4896:	4604      	mov	r4, r0
   d4898:	4608      	mov	r0, r1
   d489a:	4611      	mov	r1, r2
   d489c:	2200      	movs	r2, #0
   d489e:	6062      	str	r2, [r4, #4]
   d48a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d48a4:	60a2      	str	r2, [r4, #8]
   d48a6:	4a05      	ldr	r2, [pc, #20]	; (d48bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d48a8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d48aa:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d48ac:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d48ae:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d48b0:	461a      	mov	r2, r3
   d48b2:	f7ff fc63 	bl	d417c <HAL_USART_Init>
}
   d48b6:	4620      	mov	r0, r4
   d48b8:	bd10      	pop	{r4, pc}
   d48ba:	bf00      	nop
   d48bc:	000d5124 	.word	0x000d5124

000d48c0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d48c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d48c2:	4c19      	ldr	r4, [pc, #100]	; (d4928 <_Z22__fetch_global_Serial1v+0x68>)
   d48c4:	6825      	ldr	r5, [r4, #0]
   d48c6:	b94d      	cbnz	r5, d48dc <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d48c8:	2084      	movs	r0, #132	; 0x84
   d48ca:	f7ff fbe4 	bl	d4096 <_Znwj>
   d48ce:	4606      	mov	r6, r0
   d48d0:	b118      	cbz	r0, d48da <_Z22__fetch_global_Serial1v+0x1a>
   d48d2:	2284      	movs	r2, #132	; 0x84
   d48d4:	4629      	mov	r1, r5
   d48d6:	f000 fb14 	bl	d4f02 <memset>
   d48da:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d48dc:	4d13      	ldr	r5, [pc, #76]	; (d492c <_Z22__fetch_global_Serial1v+0x6c>)
   d48de:	682e      	ldr	r6, [r5, #0]
   d48e0:	b94e      	cbnz	r6, d48f6 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d48e2:	2084      	movs	r0, #132	; 0x84
   d48e4:	f7ff fbd7 	bl	d4096 <_Znwj>
   d48e8:	4607      	mov	r7, r0
   d48ea:	b118      	cbz	r0, d48f4 <_Z22__fetch_global_Serial1v+0x34>
   d48ec:	2284      	movs	r2, #132	; 0x84
   d48ee:	4631      	mov	r1, r6
   d48f0:	f000 fb07 	bl	d4f02 <memset>
   d48f4:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d48f6:	4f0e      	ldr	r7, [pc, #56]	; (d4930 <_Z22__fetch_global_Serial1v+0x70>)
   d48f8:	6839      	ldr	r1, [r7, #0]
   d48fa:	f011 0601 	ands.w	r6, r1, #1
   d48fe:	d111      	bne.n	d4924 <_Z22__fetch_global_Serial1v+0x64>
   d4900:	4638      	mov	r0, r7
   d4902:	f7ff fbce 	bl	d40a2 <__cxa_guard_acquire>
   d4906:	b168      	cbz	r0, d4924 <_Z22__fetch_global_Serial1v+0x64>
   d4908:	6822      	ldr	r2, [r4, #0]
   d490a:	682b      	ldr	r3, [r5, #0]
   d490c:	4809      	ldr	r0, [pc, #36]	; (d4934 <_Z22__fetch_global_Serial1v+0x74>)
   d490e:	4631      	mov	r1, r6
   d4910:	f7ff ffc0 	bl	d4894 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4914:	4638      	mov	r0, r7
   d4916:	f7ff fbc9 	bl	d40ac <__cxa_guard_release>
   d491a:	4a07      	ldr	r2, [pc, #28]	; (d4938 <_Z22__fetch_global_Serial1v+0x78>)
   d491c:	4907      	ldr	r1, [pc, #28]	; (d493c <_Z22__fetch_global_Serial1v+0x7c>)
   d491e:	4805      	ldr	r0, [pc, #20]	; (d4934 <_Z22__fetch_global_Serial1v+0x74>)
   d4920:	f000 f986 	bl	d4c30 <__aeabi_atexit>
#endif
	return serial1;
}
   d4924:	4803      	ldr	r0, [pc, #12]	; (d4934 <_Z22__fetch_global_Serial1v+0x74>)
   d4926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4928:	2003e54c 	.word	0x2003e54c
   d492c:	2003e544 	.word	0x2003e544
   d4930:	2003e548 	.word	0x2003e548
   d4934:	2003e530 	.word	0x2003e530
   d4938:	2003e4e4 	.word	0x2003e4e4
   d493c:	000d4811 	.word	0x000d4811

000d4940 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4940:	2200      	movs	r2, #0
   d4942:	4611      	mov	r1, r2
   d4944:	6840      	ldr	r0, [r0, #4]
   d4946:	f7ff bcd5 	b.w	d42f4 <network_listening>

000d494a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d494a:	2200      	movs	r2, #0
   d494c:	4611      	mov	r1, r2
   d494e:	6840      	ldr	r0, [r0, #4]
   d4950:	f7ff bce0 	b.w	d4314 <network_get_listen_timeout>

000d4954 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4954:	2200      	movs	r2, #0
   d4956:	6840      	ldr	r0, [r0, #4]
   d4958:	f7ff bcd4 	b.w	d4304 <network_set_listen_timeout>

000d495c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d495c:	2200      	movs	r2, #0
   d495e:	f081 0101 	eor.w	r1, r1, #1
   d4962:	6840      	ldr	r0, [r0, #4]
   d4964:	f7ff bcbe 	b.w	d42e4 <network_listen>

000d4968 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4968:	2300      	movs	r3, #0
   d496a:	461a      	mov	r2, r3
   d496c:	2101      	movs	r1, #1
   d496e:	6840      	ldr	r0, [r0, #4]
   d4970:	f7ff bcb0 	b.w	d42d4 <network_off>

000d4974 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4974:	2300      	movs	r3, #0
   d4976:	461a      	mov	r2, r3
   d4978:	4619      	mov	r1, r3
   d497a:	6840      	ldr	r0, [r0, #4]
   d497c:	f7ff bca2 	b.w	d42c4 <network_on>

000d4980 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4980:	2200      	movs	r2, #0
   d4982:	4611      	mov	r1, r2
   d4984:	6840      	ldr	r0, [r0, #4]
   d4986:	f7ff bc95 	b.w	d42b4 <network_ready>

000d498a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d498a:	2200      	movs	r2, #0
   d498c:	4611      	mov	r1, r2
   d498e:	6840      	ldr	r0, [r0, #4]
   d4990:	f7ff bc80 	b.w	d4294 <network_connecting>

000d4994 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4994:	2200      	movs	r2, #0
   d4996:	2102      	movs	r1, #2
   d4998:	6840      	ldr	r0, [r0, #4]
   d499a:	f7ff bc83 	b.w	d42a4 <network_disconnect>

000d499e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d499e:	2300      	movs	r3, #0
   d49a0:	461a      	mov	r2, r3
   d49a2:	6840      	ldr	r0, [r0, #4]
   d49a4:	f7ff bc6e 	b.w	d4284 <network_connect>

000d49a8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d49a8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d49aa:	4605      	mov	r5, r0
   d49ac:	b188      	cbz	r0, d49d2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49ae:	6804      	ldr	r4, [r0, #0]
   d49b0:	b14c      	cbz	r4, d49c6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d49b2:	68a3      	ldr	r3, [r4, #8]
   d49b4:	b11b      	cbz	r3, d49be <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d49b6:	2203      	movs	r2, #3
   d49b8:	4621      	mov	r1, r4
   d49ba:	4620      	mov	r0, r4
   d49bc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d49be:	2110      	movs	r1, #16
   d49c0:	4620      	mov	r0, r4
   d49c2:	f000 f93a 	bl	d4c3a <_ZdlPvj>
   d49c6:	4628      	mov	r0, r5
   d49c8:	2114      	movs	r1, #20
      }
   d49ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d49ce:	f000 b934 	b.w	d4c3a <_ZdlPvj>
   d49d2:	bd38      	pop	{r3, r4, r5, pc}

000d49d4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d49d4:	b110      	cbz	r0, d49dc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d49d6:	6803      	ldr	r3, [r0, #0]
   d49d8:	685b      	ldr	r3, [r3, #4]
   d49da:	4718      	bx	r3
   d49dc:	4770      	bx	lr

000d49de <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d49de:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d49e0:	6803      	ldr	r3, [r0, #0]
   d49e2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d49e4:	b1bb      	cbz	r3, d4a16 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d49e6:	6858      	ldr	r0, [r3, #4]
   d49e8:	f7ff fb98 	bl	d411c <os_thread_is_current>
   d49ec:	b978      	cbnz	r0, d4a0e <_ZN6ThreadD1Ev+0x30>
   d49ee:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d49f0:	7c5a      	ldrb	r2, [r3, #17]
   d49f2:	b912      	cbnz	r2, d49fa <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d49f4:	6858      	ldr	r0, [r3, #4]
   d49f6:	f7ff fb99 	bl	d412c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d49fa:	6823      	ldr	r3, [r4, #0]
   d49fc:	6858      	ldr	r0, [r3, #4]
   d49fe:	f7ff fb9d 	bl	d413c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a02:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4a04:	2300      	movs	r3, #0
   d4a06:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4a08:	b128      	cbz	r0, d4a16 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4a0a:	f7ff ffcd 	bl	d49a8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4a0e:	6820      	ldr	r0, [r4, #0]
   d4a10:	b108      	cbz	r0, d4a16 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4a12:	f7ff ffc9 	bl	d49a8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4a16:	4620      	mov	r0, r4
   d4a18:	bd10      	pop	{r4, pc}
	...

000d4a1c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4a1c:	b538      	push	{r3, r4, r5, lr}
   d4a1e:	4b0c      	ldr	r3, [pc, #48]	; (d4a50 <_ZN5spark9MeshClassD1Ev+0x34>)
   d4a20:	6003      	str	r3, [r0, #0]
   d4a22:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4a24:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4a28:	b108      	cbz	r0, d4a2e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4a2a:	f7ff fb38 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4a2e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4a32:	b135      	cbz	r5, d4a42 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4a34:	4628      	mov	r0, r5
   d4a36:	f7ff ffd2 	bl	d49de <_ZN6ThreadD1Ev>
   d4a3a:	2104      	movs	r1, #4
   d4a3c:	4628      	mov	r0, r5
   d4a3e:	f000 f8fc 	bl	d4c3a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4a42:	68a0      	ldr	r0, [r4, #8]
   d4a44:	b108      	cbz	r0, d4a4a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d4a46:	f7ff ffc5 	bl	d49d4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4a4a:	4620      	mov	r0, r4
   d4a4c:	bd38      	pop	{r3, r4, r5, pc}
   d4a4e:	bf00      	nop
   d4a50:	000d5154 	.word	0x000d5154

000d4a54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4a54:	b538      	push	{r3, r4, r5, lr}
   d4a56:	4c0e      	ldr	r4, [pc, #56]	; (d4a90 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4a58:	4b0e      	ldr	r3, [pc, #56]	; (d4a94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4a5a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4a5c:	2500      	movs	r5, #0
   d4a5e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4a60:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4a64:	6063      	str	r3, [r4, #4]
   d4a66:	60a5      	str	r5, [r4, #8]
   d4a68:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4a6c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4a70:	f7ff fb74 	bl	d415c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4a74:	4b08      	ldr	r3, [pc, #32]	; (d4a98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4a76:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4a7a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4a7e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4a80:	4620      	mov	r0, r4
   d4a82:	4a06      	ldr	r2, [pc, #24]	; (d4a9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4a84:	4906      	ldr	r1, [pc, #24]	; (d4aa0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4a8a:	f000 b8d1 	b.w	d4c30 <__aeabi_atexit>
   d4a8e:	bf00      	nop
   d4a90:	2003e550 	.word	0x2003e550
   d4a94:	000d5188 	.word	0x000d5188
   d4a98:	000d5154 	.word	0x000d5154
   d4a9c:	2003e4e4 	.word	0x2003e4e4
   d4aa0:	000d4a1d 	.word	0x000d4a1d

000d4aa4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4aa4:	2300      	movs	r3, #0
   d4aa6:	461a      	mov	r2, r3
   d4aa8:	6840      	ldr	r0, [r0, #4]
   d4aaa:	f7ff bbeb 	b.w	d4284 <network_connect>

000d4aae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4aae:	2200      	movs	r2, #0
   d4ab0:	2102      	movs	r1, #2
   d4ab2:	6840      	ldr	r0, [r0, #4]
   d4ab4:	f7ff bbf6 	b.w	d42a4 <network_disconnect>

000d4ab8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4ab8:	2200      	movs	r2, #0
   d4aba:	4611      	mov	r1, r2
   d4abc:	6840      	ldr	r0, [r0, #4]
   d4abe:	f7ff bbe9 	b.w	d4294 <network_connecting>

000d4ac2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4ac2:	2200      	movs	r2, #0
   d4ac4:	4611      	mov	r1, r2
   d4ac6:	6840      	ldr	r0, [r0, #4]
   d4ac8:	f7ff bbf4 	b.w	d42b4 <network_ready>

000d4acc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4acc:	2300      	movs	r3, #0
   d4ace:	461a      	mov	r2, r3
   d4ad0:	4619      	mov	r1, r3
   d4ad2:	6840      	ldr	r0, [r0, #4]
   d4ad4:	f7ff bbf6 	b.w	d42c4 <network_on>

000d4ad8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4ad8:	2300      	movs	r3, #0
   d4ada:	461a      	mov	r2, r3
   d4adc:	4619      	mov	r1, r3
   d4ade:	6840      	ldr	r0, [r0, #4]
   d4ae0:	f7ff bbf8 	b.w	d42d4 <network_off>

000d4ae4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4ae4:	2200      	movs	r2, #0
   d4ae6:	f081 0101 	eor.w	r1, r1, #1
   d4aea:	6840      	ldr	r0, [r0, #4]
   d4aec:	f7ff bbfa 	b.w	d42e4 <network_listen>

000d4af0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4af0:	2200      	movs	r2, #0
   d4af2:	6840      	ldr	r0, [r0, #4]
   d4af4:	f7ff bc06 	b.w	d4304 <network_set_listen_timeout>

000d4af8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4af8:	2200      	movs	r2, #0
   d4afa:	4611      	mov	r1, r2
   d4afc:	6840      	ldr	r0, [r0, #4]
   d4afe:	f7ff bc09 	b.w	d4314 <network_get_listen_timeout>

000d4b02 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4b02:	2200      	movs	r2, #0
   d4b04:	4611      	mov	r1, r2
   d4b06:	6840      	ldr	r0, [r0, #4]
   d4b08:	f7ff bbf4 	b.w	d42f4 <network_listening>

000d4b0c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4b10:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4b12:	b095      	sub	sp, #84	; 0x54
   d4b14:	4616      	mov	r6, r2
   d4b16:	460d      	mov	r5, r1
   d4b18:	4607      	mov	r7, r0
    IPAddress addr;
   d4b1a:	f7ff fdbd 	bl	d4698 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4b1e:	4621      	mov	r1, r4
   d4b20:	2220      	movs	r2, #32
   d4b22:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4b24:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4b26:	f000 f9ec 	bl	d4f02 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4b2a:	2340      	movs	r3, #64	; 0x40
   d4b2c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4b2e:	4621      	mov	r1, r4
   d4b30:	466b      	mov	r3, sp
   d4b32:	aa0c      	add	r2, sp, #48	; 0x30
   d4b34:	4630      	mov	r0, r6
   d4b36:	f7ff fac9 	bl	d40cc <netdb_getaddrinfo>
    if (!r) {
   d4b3a:	4604      	mov	r4, r0
   d4b3c:	2800      	cmp	r0, #0
   d4b3e:	d144      	bne.n	d4bca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4b40:	4602      	mov	r2, r0
   d4b42:	2101      	movs	r1, #1
   d4b44:	6868      	ldr	r0, [r5, #4]
   d4b46:	f7ff fbb5 	bl	d42b4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4b4a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4b4c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4b4e:	4622      	mov	r2, r4
   d4b50:	6868      	ldr	r0, [r5, #4]
   d4b52:	f7ff fbaf 	bl	d42b4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4b56:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4b58:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4b5a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4b5c:	2e00      	cmp	r6, #0
   d4b5e:	d034      	beq.n	d4bca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4b60:	2900      	cmp	r1, #0
   d4b62:	d132      	bne.n	d4bca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4b64:	6873      	ldr	r3, [r6, #4]
   d4b66:	2b02      	cmp	r3, #2
   d4b68:	d002      	beq.n	d4b70 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4b6a:	2b0a      	cmp	r3, #10
   d4b6c:	d009      	beq.n	d4b82 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4b6e:	e02a      	b.n	d4bc6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4b70:	f1b8 0f00 	cmp.w	r8, #0
   d4b74:	d027      	beq.n	d4bc6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4b76:	6971      	ldr	r1, [r6, #20]
   d4b78:	4638      	mov	r0, r7
   d4b7a:	3104      	adds	r1, #4
   d4b7c:	f7ff fdb9 	bl	d46f2 <_ZN9IPAddressaSEPKh>
   d4b80:	e020      	b.n	d4bc4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4b82:	f1b9 0f00 	cmp.w	r9, #0
   d4b86:	d01e      	beq.n	d4bc6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4b88:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4b8a:	2211      	movs	r2, #17
   d4b8c:	a801      	add	r0, sp, #4
   d4b8e:	f000 f9b8 	bl	d4f02 <memset>
                    a.v = 6;
   d4b92:	2306      	movs	r3, #6
   d4b94:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4b98:	ad01      	add	r5, sp, #4
   d4b9a:	f104 0308 	add.w	r3, r4, #8
   d4b9e:	3418      	adds	r4, #24
   d4ba0:	6818      	ldr	r0, [r3, #0]
   d4ba2:	6859      	ldr	r1, [r3, #4]
   d4ba4:	462a      	mov	r2, r5
   d4ba6:	c203      	stmia	r2!, {r0, r1}
   d4ba8:	3308      	adds	r3, #8
   d4baa:	42a3      	cmp	r3, r4
   d4bac:	4615      	mov	r5, r2
   d4bae:	d1f7      	bne.n	d4ba0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4bb0:	a901      	add	r1, sp, #4
   d4bb2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4bb4:	ad07      	add	r5, sp, #28
   d4bb6:	f7ff fd7d 	bl	d46b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4bbc:	1d3c      	adds	r4, r7, #4
   d4bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4bc0:	682b      	ldr	r3, [r5, #0]
   d4bc2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4bc4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4bc6:	69f6      	ldr	r6, [r6, #28]
   d4bc8:	e7c8      	b.n	d4b5c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4bca:	9800      	ldr	r0, [sp, #0]
   d4bcc:	f7ff fa76 	bl	d40bc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4bd0:	4638      	mov	r0, r7
   d4bd2:	b015      	add	sp, #84	; 0x54
   d4bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4bd8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4bd8:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4bda:	4a03      	ldr	r2, [pc, #12]	; (d4be8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4bdc:	601a      	str	r2, [r3, #0]
   d4bde:	2200      	movs	r2, #0
   d4be0:	605a      	str	r2, [r3, #4]
   d4be2:	4770      	bx	lr
   d4be4:	2003e724 	.word	0x2003e724
   d4be8:	000d5188 	.word	0x000d5188

000d4bec <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4bec:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d4bee:	4c0c      	ldr	r4, [pc, #48]	; (d4c20 <_GLOBAL__sub_I_SPI+0x34>)
   d4bf0:	4e0c      	ldr	r6, [pc, #48]	; (d4c24 <_GLOBAL__sub_I_SPI+0x38>)
   d4bf2:	4d0d      	ldr	r5, [pc, #52]	; (d4c28 <_GLOBAL__sub_I_SPI+0x3c>)
   d4bf4:	2100      	movs	r1, #0
   d4bf6:	4620      	mov	r0, r4
   d4bf8:	f7ff fbf2 	bl	d43e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4bfc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4bfe:	4c0b      	ldr	r4, [pc, #44]	; (d4c2c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d4c00:	4632      	mov	r2, r6
   d4c02:	4629      	mov	r1, r5
   d4c04:	f000 f814 	bl	d4c30 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4c08:	2101      	movs	r1, #1
   d4c0a:	4620      	mov	r0, r4
   d4c0c:	f7ff fbe8 	bl	d43e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4c10:	4632      	mov	r2, r6
   d4c12:	4629      	mov	r1, r5
   d4c14:	4620      	mov	r0, r4
   d4c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4c1a:	f000 b809 	b.w	d4c30 <__aeabi_atexit>
   d4c1e:	bf00      	nop
   d4c20:	2003e72c 	.word	0x2003e72c
   d4c24:	2003e4e4 	.word	0x2003e4e4
   d4c28:	000d43d1 	.word	0x000d43d1
   d4c2c:	2003e73c 	.word	0x2003e73c

000d4c30 <__aeabi_atexit>:
   d4c30:	460b      	mov	r3, r1
   d4c32:	4601      	mov	r1, r0
   d4c34:	4618      	mov	r0, r3
   d4c36:	f000 b94b 	b.w	d4ed0 <__cxa_atexit>

000d4c3a <_ZdlPvj>:
   d4c3a:	f7ff ba2e 	b.w	d409a <_ZdlPv>
	...

000d4c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d4c40:	4b18      	ldr	r3, [pc, #96]	; (d4ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d4c42:	681a      	ldr	r2, [r3, #0]
   d4c44:	07d1      	lsls	r1, r2, #31
   d4c46:	bf5c      	itt	pl
   d4c48:	2201      	movpl	r2, #1
   d4c4a:	601a      	strpl	r2, [r3, #0]
   d4c4c:	4b16      	ldr	r3, [pc, #88]	; (d4ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d4c4e:	681a      	ldr	r2, [r3, #0]
   d4c50:	07d2      	lsls	r2, r2, #31
   d4c52:	bf5c      	itt	pl
   d4c54:	2201      	movpl	r2, #1
   d4c56:	601a      	strpl	r2, [r3, #0]
   d4c58:	4b14      	ldr	r3, [pc, #80]	; (d4cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d4c5a:	681a      	ldr	r2, [r3, #0]
   d4c5c:	07d0      	lsls	r0, r2, #31
   d4c5e:	bf5c      	itt	pl
   d4c60:	2201      	movpl	r2, #1
   d4c62:	601a      	strpl	r2, [r3, #0]
   d4c64:	4b12      	ldr	r3, [pc, #72]	; (d4cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d4c66:	681a      	ldr	r2, [r3, #0]
   d4c68:	07d1      	lsls	r1, r2, #31
   d4c6a:	bf5c      	itt	pl
   d4c6c:	2201      	movpl	r2, #1
   d4c6e:	601a      	strpl	r2, [r3, #0]
   d4c70:	4b10      	ldr	r3, [pc, #64]	; (d4cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d4c72:	681a      	ldr	r2, [r3, #0]
   d4c74:	07d2      	lsls	r2, r2, #31
   d4c76:	bf5c      	itt	pl
   d4c78:	2201      	movpl	r2, #1
   d4c7a:	601a      	strpl	r2, [r3, #0]
   d4c7c:	4b0e      	ldr	r3, [pc, #56]	; (d4cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d4c7e:	681a      	ldr	r2, [r3, #0]
   d4c80:	07d0      	lsls	r0, r2, #31
   d4c82:	bf5c      	itt	pl
   d4c84:	2201      	movpl	r2, #1
   d4c86:	601a      	strpl	r2, [r3, #0]
   d4c88:	4b0c      	ldr	r3, [pc, #48]	; (d4cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d4c8a:	681a      	ldr	r2, [r3, #0]
   d4c8c:	07d1      	lsls	r1, r2, #31
   d4c8e:	bf5c      	itt	pl
   d4c90:	2201      	movpl	r2, #1
   d4c92:	601a      	strpl	r2, [r3, #0]
   d4c94:	4b0a      	ldr	r3, [pc, #40]	; (d4cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d4c96:	681a      	ldr	r2, [r3, #0]
   d4c98:	07d2      	lsls	r2, r2, #31
   d4c9a:	bf5c      	itt	pl
   d4c9c:	2201      	movpl	r2, #1
   d4c9e:	601a      	strpl	r2, [r3, #0]
   d4ca0:	4770      	bx	lr
   d4ca2:	bf00      	nop
   d4ca4:	2003e76c 	.word	0x2003e76c
   d4ca8:	2003e768 	.word	0x2003e768
   d4cac:	2003e764 	.word	0x2003e764
   d4cb0:	2003e760 	.word	0x2003e760
   d4cb4:	2003e75c 	.word	0x2003e75c
   d4cb8:	2003e758 	.word	0x2003e758
   d4cbc:	2003e754 	.word	0x2003e754
   d4cc0:	2003e750 	.word	0x2003e750

000d4cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d4cc4:	4b24      	ldr	r3, [pc, #144]	; (d4d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d4cc6:	681a      	ldr	r2, [r3, #0]
   d4cc8:	07d0      	lsls	r0, r2, #31
   d4cca:	bf5c      	itt	pl
   d4ccc:	2201      	movpl	r2, #1
   d4cce:	601a      	strpl	r2, [r3, #0]
   d4cd0:	4b22      	ldr	r3, [pc, #136]	; (d4d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d4cd2:	681a      	ldr	r2, [r3, #0]
   d4cd4:	07d1      	lsls	r1, r2, #31
   d4cd6:	bf5c      	itt	pl
   d4cd8:	2201      	movpl	r2, #1
   d4cda:	601a      	strpl	r2, [r3, #0]
   d4cdc:	4b20      	ldr	r3, [pc, #128]	; (d4d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d4cde:	681a      	ldr	r2, [r3, #0]
   d4ce0:	07d2      	lsls	r2, r2, #31
   d4ce2:	bf5c      	itt	pl
   d4ce4:	2201      	movpl	r2, #1
   d4ce6:	601a      	strpl	r2, [r3, #0]
   d4ce8:	4b1e      	ldr	r3, [pc, #120]	; (d4d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d4cea:	681a      	ldr	r2, [r3, #0]
   d4cec:	07d0      	lsls	r0, r2, #31
   d4cee:	bf5c      	itt	pl
   d4cf0:	2201      	movpl	r2, #1
   d4cf2:	601a      	strpl	r2, [r3, #0]
   d4cf4:	4b1c      	ldr	r3, [pc, #112]	; (d4d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d4cf6:	681a      	ldr	r2, [r3, #0]
   d4cf8:	07d1      	lsls	r1, r2, #31
   d4cfa:	bf5c      	itt	pl
   d4cfc:	2201      	movpl	r2, #1
   d4cfe:	601a      	strpl	r2, [r3, #0]
   d4d00:	4b1a      	ldr	r3, [pc, #104]	; (d4d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d4d02:	681a      	ldr	r2, [r3, #0]
   d4d04:	07d2      	lsls	r2, r2, #31
   d4d06:	bf5c      	itt	pl
   d4d08:	2201      	movpl	r2, #1
   d4d0a:	601a      	strpl	r2, [r3, #0]
   d4d0c:	4b18      	ldr	r3, [pc, #96]	; (d4d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d4d0e:	681a      	ldr	r2, [r3, #0]
   d4d10:	07d0      	lsls	r0, r2, #31
   d4d12:	bf5c      	itt	pl
   d4d14:	2201      	movpl	r2, #1
   d4d16:	601a      	strpl	r2, [r3, #0]
   d4d18:	4b16      	ldr	r3, [pc, #88]	; (d4d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d4d1a:	681a      	ldr	r2, [r3, #0]
   d4d1c:	07d1      	lsls	r1, r2, #31
   d4d1e:	bf5c      	itt	pl
   d4d20:	2201      	movpl	r2, #1
   d4d22:	601a      	strpl	r2, [r3, #0]
   d4d24:	4b14      	ldr	r3, [pc, #80]	; (d4d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d4d26:	681a      	ldr	r2, [r3, #0]
   d4d28:	07d2      	lsls	r2, r2, #31
   d4d2a:	bf5c      	itt	pl
   d4d2c:	2201      	movpl	r2, #1
   d4d2e:	601a      	strpl	r2, [r3, #0]
   d4d30:	4b12      	ldr	r3, [pc, #72]	; (d4d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d4d32:	681a      	ldr	r2, [r3, #0]
   d4d34:	07d0      	lsls	r0, r2, #31
   d4d36:	bf5c      	itt	pl
   d4d38:	2201      	movpl	r2, #1
   d4d3a:	601a      	strpl	r2, [r3, #0]
   d4d3c:	4b10      	ldr	r3, [pc, #64]	; (d4d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d4d3e:	681a      	ldr	r2, [r3, #0]
   d4d40:	07d1      	lsls	r1, r2, #31
   d4d42:	bf5c      	itt	pl
   d4d44:	2201      	movpl	r2, #1
   d4d46:	601a      	strpl	r2, [r3, #0]
   d4d48:	4b0e      	ldr	r3, [pc, #56]	; (d4d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d4d4a:	681a      	ldr	r2, [r3, #0]
   d4d4c:	07d2      	lsls	r2, r2, #31
   d4d4e:	bf5c      	itt	pl
   d4d50:	2201      	movpl	r2, #1
   d4d52:	601a      	strpl	r2, [r3, #0]
   d4d54:	4770      	bx	lr
   d4d56:	bf00      	nop
   d4d58:	2003e79c 	.word	0x2003e79c
   d4d5c:	2003e798 	.word	0x2003e798
   d4d60:	2003e794 	.word	0x2003e794
   d4d64:	2003e790 	.word	0x2003e790
   d4d68:	2003e78c 	.word	0x2003e78c
   d4d6c:	2003e788 	.word	0x2003e788
   d4d70:	2003e784 	.word	0x2003e784
   d4d74:	2003e780 	.word	0x2003e780
   d4d78:	2003e77c 	.word	0x2003e77c
   d4d7c:	2003e778 	.word	0x2003e778
   d4d80:	2003e774 	.word	0x2003e774
   d4d84:	2003e770 	.word	0x2003e770

000d4d88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d4d88:	4b24      	ldr	r3, [pc, #144]	; (d4e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d4d8a:	681a      	ldr	r2, [r3, #0]
   d4d8c:	07d0      	lsls	r0, r2, #31
   d4d8e:	bf5c      	itt	pl
   d4d90:	2201      	movpl	r2, #1
   d4d92:	601a      	strpl	r2, [r3, #0]
   d4d94:	4b22      	ldr	r3, [pc, #136]	; (d4e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d4d96:	681a      	ldr	r2, [r3, #0]
   d4d98:	07d1      	lsls	r1, r2, #31
   d4d9a:	bf5c      	itt	pl
   d4d9c:	2201      	movpl	r2, #1
   d4d9e:	601a      	strpl	r2, [r3, #0]
   d4da0:	4b20      	ldr	r3, [pc, #128]	; (d4e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d4da2:	681a      	ldr	r2, [r3, #0]
   d4da4:	07d2      	lsls	r2, r2, #31
   d4da6:	bf5c      	itt	pl
   d4da8:	2201      	movpl	r2, #1
   d4daa:	601a      	strpl	r2, [r3, #0]
   d4dac:	4b1e      	ldr	r3, [pc, #120]	; (d4e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d4dae:	681a      	ldr	r2, [r3, #0]
   d4db0:	07d0      	lsls	r0, r2, #31
   d4db2:	bf5c      	itt	pl
   d4db4:	2201      	movpl	r2, #1
   d4db6:	601a      	strpl	r2, [r3, #0]
   d4db8:	4b1c      	ldr	r3, [pc, #112]	; (d4e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d4dba:	681a      	ldr	r2, [r3, #0]
   d4dbc:	07d1      	lsls	r1, r2, #31
   d4dbe:	bf5c      	itt	pl
   d4dc0:	2201      	movpl	r2, #1
   d4dc2:	601a      	strpl	r2, [r3, #0]
   d4dc4:	4b1a      	ldr	r3, [pc, #104]	; (d4e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d4dc6:	681a      	ldr	r2, [r3, #0]
   d4dc8:	07d2      	lsls	r2, r2, #31
   d4dca:	bf5c      	itt	pl
   d4dcc:	2201      	movpl	r2, #1
   d4dce:	601a      	strpl	r2, [r3, #0]
   d4dd0:	4b18      	ldr	r3, [pc, #96]	; (d4e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d4dd2:	681a      	ldr	r2, [r3, #0]
   d4dd4:	07d0      	lsls	r0, r2, #31
   d4dd6:	bf5c      	itt	pl
   d4dd8:	2201      	movpl	r2, #1
   d4dda:	601a      	strpl	r2, [r3, #0]
   d4ddc:	4b16      	ldr	r3, [pc, #88]	; (d4e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d4dde:	681a      	ldr	r2, [r3, #0]
   d4de0:	07d1      	lsls	r1, r2, #31
   d4de2:	bf5c      	itt	pl
   d4de4:	2201      	movpl	r2, #1
   d4de6:	601a      	strpl	r2, [r3, #0]
   d4de8:	4b14      	ldr	r3, [pc, #80]	; (d4e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d4dea:	681a      	ldr	r2, [r3, #0]
   d4dec:	07d2      	lsls	r2, r2, #31
   d4dee:	bf5c      	itt	pl
   d4df0:	2201      	movpl	r2, #1
   d4df2:	601a      	strpl	r2, [r3, #0]
   d4df4:	4b12      	ldr	r3, [pc, #72]	; (d4e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d4df6:	681a      	ldr	r2, [r3, #0]
   d4df8:	07d0      	lsls	r0, r2, #31
   d4dfa:	bf5c      	itt	pl
   d4dfc:	2201      	movpl	r2, #1
   d4dfe:	601a      	strpl	r2, [r3, #0]
   d4e00:	4b10      	ldr	r3, [pc, #64]	; (d4e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d4e02:	681a      	ldr	r2, [r3, #0]
   d4e04:	07d1      	lsls	r1, r2, #31
   d4e06:	bf5c      	itt	pl
   d4e08:	2201      	movpl	r2, #1
   d4e0a:	601a      	strpl	r2, [r3, #0]
   d4e0c:	4b0e      	ldr	r3, [pc, #56]	; (d4e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d4e0e:	681a      	ldr	r2, [r3, #0]
   d4e10:	07d2      	lsls	r2, r2, #31
   d4e12:	bf5c      	itt	pl
   d4e14:	2201      	movpl	r2, #1
   d4e16:	601a      	strpl	r2, [r3, #0]
   d4e18:	4770      	bx	lr
   d4e1a:	bf00      	nop
   d4e1c:	2003e7cc 	.word	0x2003e7cc
   d4e20:	2003e7c8 	.word	0x2003e7c8
   d4e24:	2003e7c4 	.word	0x2003e7c4
   d4e28:	2003e7c0 	.word	0x2003e7c0
   d4e2c:	2003e7bc 	.word	0x2003e7bc
   d4e30:	2003e7b8 	.word	0x2003e7b8
   d4e34:	2003e7b4 	.word	0x2003e7b4
   d4e38:	2003e7b0 	.word	0x2003e7b0
   d4e3c:	2003e7ac 	.word	0x2003e7ac
   d4e40:	2003e7a8 	.word	0x2003e7a8
   d4e44:	2003e7a4 	.word	0x2003e7a4
   d4e48:	2003e7a0 	.word	0x2003e7a0

000d4e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d4e4c:	4b18      	ldr	r3, [pc, #96]	; (d4eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d4e4e:	681a      	ldr	r2, [r3, #0]
   d4e50:	07d1      	lsls	r1, r2, #31
   d4e52:	bf5c      	itt	pl
   d4e54:	2201      	movpl	r2, #1
   d4e56:	601a      	strpl	r2, [r3, #0]
   d4e58:	4b16      	ldr	r3, [pc, #88]	; (d4eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d4e5a:	681a      	ldr	r2, [r3, #0]
   d4e5c:	07d2      	lsls	r2, r2, #31
   d4e5e:	bf5c      	itt	pl
   d4e60:	2201      	movpl	r2, #1
   d4e62:	601a      	strpl	r2, [r3, #0]
   d4e64:	4b14      	ldr	r3, [pc, #80]	; (d4eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d4e66:	681a      	ldr	r2, [r3, #0]
   d4e68:	07d0      	lsls	r0, r2, #31
   d4e6a:	bf5c      	itt	pl
   d4e6c:	2201      	movpl	r2, #1
   d4e6e:	601a      	strpl	r2, [r3, #0]
   d4e70:	4b12      	ldr	r3, [pc, #72]	; (d4ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d4e72:	681a      	ldr	r2, [r3, #0]
   d4e74:	07d1      	lsls	r1, r2, #31
   d4e76:	bf5c      	itt	pl
   d4e78:	2201      	movpl	r2, #1
   d4e7a:	601a      	strpl	r2, [r3, #0]
   d4e7c:	4b10      	ldr	r3, [pc, #64]	; (d4ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d4e7e:	681a      	ldr	r2, [r3, #0]
   d4e80:	07d2      	lsls	r2, r2, #31
   d4e82:	bf5c      	itt	pl
   d4e84:	2201      	movpl	r2, #1
   d4e86:	601a      	strpl	r2, [r3, #0]
   d4e88:	4b0e      	ldr	r3, [pc, #56]	; (d4ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d4e8a:	681a      	ldr	r2, [r3, #0]
   d4e8c:	07d0      	lsls	r0, r2, #31
   d4e8e:	bf5c      	itt	pl
   d4e90:	2201      	movpl	r2, #1
   d4e92:	601a      	strpl	r2, [r3, #0]
   d4e94:	4b0c      	ldr	r3, [pc, #48]	; (d4ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d4e96:	681a      	ldr	r2, [r3, #0]
   d4e98:	07d1      	lsls	r1, r2, #31
   d4e9a:	bf5c      	itt	pl
   d4e9c:	2201      	movpl	r2, #1
   d4e9e:	601a      	strpl	r2, [r3, #0]
   d4ea0:	4b0a      	ldr	r3, [pc, #40]	; (d4ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d4ea2:	681a      	ldr	r2, [r3, #0]
   d4ea4:	07d2      	lsls	r2, r2, #31
   d4ea6:	bf5c      	itt	pl
   d4ea8:	2201      	movpl	r2, #1
   d4eaa:	601a      	strpl	r2, [r3, #0]
   d4eac:	4770      	bx	lr
   d4eae:	bf00      	nop
   d4eb0:	2003e7ec 	.word	0x2003e7ec
   d4eb4:	2003e7e8 	.word	0x2003e7e8
   d4eb8:	2003e7e4 	.word	0x2003e7e4
   d4ebc:	2003e7e0 	.word	0x2003e7e0
   d4ec0:	2003e7dc 	.word	0x2003e7dc
   d4ec4:	2003e7d8 	.word	0x2003e7d8
   d4ec8:	2003e7d4 	.word	0x2003e7d4
   d4ecc:	2003e7d0 	.word	0x2003e7d0

000d4ed0 <__cxa_atexit>:
   d4ed0:	b510      	push	{r4, lr}
   d4ed2:	4c05      	ldr	r4, [pc, #20]	; (d4ee8 <__cxa_atexit+0x18>)
   d4ed4:	4613      	mov	r3, r2
   d4ed6:	b12c      	cbz	r4, d4ee4 <__cxa_atexit+0x14>
   d4ed8:	460a      	mov	r2, r1
   d4eda:	4601      	mov	r1, r0
   d4edc:	2002      	movs	r0, #2
   d4ede:	f3af 8000 	nop.w
   d4ee2:	bd10      	pop	{r4, pc}
   d4ee4:	4620      	mov	r0, r4
   d4ee6:	bd10      	pop	{r4, pc}
   d4ee8:	00000000 	.word	0x00000000

000d4eec <memcpy>:
   d4eec:	b510      	push	{r4, lr}
   d4eee:	1e43      	subs	r3, r0, #1
   d4ef0:	440a      	add	r2, r1
   d4ef2:	4291      	cmp	r1, r2
   d4ef4:	d004      	beq.n	d4f00 <memcpy+0x14>
   d4ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d4efa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d4efe:	e7f8      	b.n	d4ef2 <memcpy+0x6>
   d4f00:	bd10      	pop	{r4, pc}

000d4f02 <memset>:
   d4f02:	4402      	add	r2, r0
   d4f04:	4603      	mov	r3, r0
   d4f06:	4293      	cmp	r3, r2
   d4f08:	d002      	beq.n	d4f10 <memset+0xe>
   d4f0a:	f803 1b01 	strb.w	r1, [r3], #1
   d4f0e:	e7fa      	b.n	d4f06 <memset+0x4>
   d4f10:	4770      	bx	lr
	...

000d4f14 <srand>:
   d4f14:	b538      	push	{r3, r4, r5, lr}
   d4f16:	4b12      	ldr	r3, [pc, #72]	; (d4f60 <srand+0x4c>)
   d4f18:	681c      	ldr	r4, [r3, #0]
   d4f1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d4f1c:	4605      	mov	r5, r0
   d4f1e:	b9d3      	cbnz	r3, d4f56 <srand+0x42>
   d4f20:	2018      	movs	r0, #24
   d4f22:	f7ff fa07 	bl	d4334 <malloc>
   d4f26:	f243 330e 	movw	r3, #13070	; 0x330e
   d4f2a:	63a0      	str	r0, [r4, #56]	; 0x38
   d4f2c:	8003      	strh	r3, [r0, #0]
   d4f2e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d4f32:	8043      	strh	r3, [r0, #2]
   d4f34:	f241 2334 	movw	r3, #4660	; 0x1234
   d4f38:	8083      	strh	r3, [r0, #4]
   d4f3a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d4f3e:	80c3      	strh	r3, [r0, #6]
   d4f40:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d4f44:	8103      	strh	r3, [r0, #8]
   d4f46:	2305      	movs	r3, #5
   d4f48:	8143      	strh	r3, [r0, #10]
   d4f4a:	230b      	movs	r3, #11
   d4f4c:	8183      	strh	r3, [r0, #12]
   d4f4e:	2201      	movs	r2, #1
   d4f50:	2300      	movs	r3, #0
   d4f52:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d4f56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d4f58:	2200      	movs	r2, #0
   d4f5a:	611d      	str	r5, [r3, #16]
   d4f5c:	615a      	str	r2, [r3, #20]
   d4f5e:	bd38      	pop	{r3, r4, r5, pc}
   d4f60:	2003e4e0 	.word	0x2003e4e0

000d4f64 <strlen>:
   d4f64:	4603      	mov	r3, r0
   d4f66:	f813 2b01 	ldrb.w	r2, [r3], #1
   d4f6a:	2a00      	cmp	r2, #0
   d4f6c:	d1fb      	bne.n	d4f66 <strlen+0x2>
   d4f6e:	1a18      	subs	r0, r3, r0
   d4f70:	3801      	subs	r0, #1
   d4f72:	4770      	bx	lr

000d4f74 <dynalib_user>:
   d4f74:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d4f84:	0000 0000                                   ....

000d4f88 <_ZTVN5spark13EthernetClassE>:
	...
   d4f90:	43b3 000d 43a9 000d 439f 000d 4395 000d     .C...C...C...C..
   d4fa0:	4389 000d 437d 000d 4371 000d 4369 000d     .C..}C..qC..iC..
   d4fb0:	435f 000d 4355 000d 4b0d 000d               _C..UC...K..

000d4fbc <_ZTV8SPIClass>:
	...
   d4fc4:	43d1 000d 43d3 000d 6162 6475 5300 7265     .C...C..baud.Ser
   d4fd4:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d4fe4:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d4ff4:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d5004:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d5014:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d5024:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d5034:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d5044:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d5054:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d5064:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d5074:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d5084:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d5094:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d50a4:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d50b4:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d50c4:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d50d4:	0065 0000                                   e...

000d50d8 <_ZTV9IPAddress>:
	...
   d50e0:	4635 000d 4625 000d 4627 000d               5F..%F..'F..

000d50ec <_ZTV9USBSerial>:
	...
   d50f4:	470d 000d 475d 000d 476b 000d 4431 000d     .G..]G..kG..1D..
   d5104:	4749 000d 470f 000d 4725 000d 4757 000d     IG...G..%G..WG..
   d5114:	473b 000d 4709 000d                         ;G...G..

000d511c <_ZTV11USARTSerial>:
	...
   d5124:	4811 000d 4861 000d 486f 000d 4431 000d     .H..aH..oH..1D..
   d5134:	4825 000d 4847 000d 4833 000d 485b 000d     %H..GH..3H..[H..
   d5144:	4813 000d 4817 000d                         .H...H..

000d514c <_ZTVN5spark9MeshClassE>:
	...
   d5154:	499f 000d 4995 000d 498b 000d 4981 000d     .I...I...I...I..
   d5164:	4975 000d 4969 000d 495d 000d 4955 000d     uI..iI..]I..UI..
   d5174:	494b 000d 4941 000d 4b0d 000d               KI..AI...K..

000d5180 <_ZTVN5spark12NetworkClassE>:
	...
   d5188:	4aa5 000d 4aaf 000d 4ab9 000d 4ac3 000d     .J...J...J...J..
   d5198:	4acd 000d 4ad9 000d 4ae5 000d 4af1 000d     .J...J...J...J..
   d51a8:	4af9 000d 4b03 000d 4b0d 000d               .J...K...K..

000d51b4 <__sf_fake_stdin>:
	...

000d51d4 <__sf_fake_stdout>:
	...

000d51f4 <__sf_fake_stderr>:
	...
   d5214:	0043                                        C.

000d5216 <link_const_variable_data_end>:
	...

000d5218 <link_constructors_location>:
   d5218:	000d40b7 	.word	0x000d40b7
   d521c:	000d43bd 	.word	0x000d43bd
   d5220:	000d4409 	.word	0x000d4409
   d5224:	000d4421 	.word	0x000d4421
   d5228:	000d44e1 	.word	0x000d44e1
   d522c:	000d44f1 	.word	0x000d44f1
   d5230:	000d4525 	.word	0x000d4525
   d5234:	000d4a55 	.word	0x000d4a55
   d5238:	000d4bd9 	.word	0x000d4bd9
   d523c:	000d4bed 	.word	0x000d4bed
   d5240:	000d4c41 	.word	0x000d4c41
   d5244:	000d4cc5 	.word	0x000d4cc5
   d5248:	000d4d89 	.word	0x000d4d89
   d524c:	000d4e4d 	.word	0x000d4e4d
