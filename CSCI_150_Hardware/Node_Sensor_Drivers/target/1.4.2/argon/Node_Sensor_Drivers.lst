
d:/Gilbert/Offline_Projects/CSCI_150FA19_Sensor_Network/CSCI_150_Hardware/Node_Sensor_Drivers/target/1.4.2/argon/Node_Sensor_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002370  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00016424  2**0
                  CONTENTS
  4 .data         00000068  2003e3f0  000d6390  0000e3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000398  2003e458  2003e458  0001e458  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d63f8  000d63f8  000163f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6420  000d6420  00016420  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cff76  00000000  00000000  00016424  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000107b5  00000000  00000000  000e639a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00019a3c  00000000  00000000  000f6b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000021b8  00000000  00000000  0011058b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003d90  00000000  00000000  00112743  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035a49  00000000  00000000  001164d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028b24  00000000  00000000  0014bf1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fc161  00000000  00000000  00174a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c0fc  00000000  00000000  00270ba4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f001 ff91 	bl	d5f58 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f001 ff96 	bl	d5f6e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e3f0 	.word	0x2003e3f0
   d404c:	000d6390 	.word	0x000d6390
   d4050:	2003e458 	.word	0x2003e458
   d4054:	2003e458 	.word	0x2003e458
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 fdf3 	bl	d4c48 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6384 	.word	0x000d6384
   d4084:	000d6340 	.word	0x000d6340

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b87c 	b.w	d4184 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f839 	bl	d4104 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 bda5 	b.w	d4be4 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bc6d 	b.w	d4978 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bc73 	b.w	d4988 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bc71 	b.w	d4988 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN5spark9WiFiClass14setCredentialsEPKcjS2_jmm>:

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
    }

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
   d40b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   d40ba:	244c      	movs	r4, #76	; 0x4c

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
    }

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
   d40bc:	b094      	sub	sp, #80	; 0x50
   d40be:	4605      	mov	r5, r0
   d40c0:	4688      	mov	r8, r1
   d40c2:	4617      	mov	r7, r2
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   d40c4:	2100      	movs	r1, #0
   d40c6:	4622      	mov	r2, r4
   d40c8:	a801      	add	r0, sp, #4

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
    }

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
   d40ca:	461e      	mov	r6, r3
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   d40cc:	f001 ff4f 	bl	d5f6e <memset>
        creds.size = sizeof(creds);
        creds.ssid = ssid;
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
   d40d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d40d2:	9305      	str	r3, [sp, #20]
        creds.security = WLanSecurityType(security);
   d40d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d40d6:	f88d 3018 	strb.w	r3, [sp, #24]
        creds.cipher = WLanSecurityCipher(cipher);
   d40da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d40dc:	f88d 3019 	strb.w	r3, [sp, #25]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d40e0:	2300      	movs	r3, #0
   d40e2:	aa01      	add	r2, sp, #4
   d40e4:	4619      	mov	r1, r3
   d40e6:	6868      	ldr	r0, [r5, #4]
    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
        creds.size = sizeof(creds);
   d40e8:	9401      	str	r4, [sp, #4]
        creds.ssid = ssid;
   d40ea:	f8cd 8008 	str.w	r8, [sp, #8]
        creds.ssid_len = ssidLen;
   d40ee:	9703      	str	r7, [sp, #12]
        creds.password = password;
   d40f0:	9604      	str	r6, [sp, #16]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d40f2:	f000 fc19 	bl	d4928 <network_set_credentials>
    }
   d40f6:	fab0 f080 	clz	r0, r0
   d40fa:	0940      	lsrs	r0, r0, #5
   d40fc:	b014      	add	sp, #80	; 0x50
   d40fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4104 <loop>:
  // Debug Setup Code End
#endif

}

void loop() {
   d4104:	b510      	push	{r4, lr}

  sensor0_1.Tick();
   d4106:	4c16      	ldr	r4, [pc, #88]	; (d4160 <loop+0x5c>)
   d4108:	4620      	mov	r0, r4
   d410a:	f000 fa58 	bl	d45be <_ZN5SHT154TickEv>
  tempF = sensor0_1.getTemperatureF();
   d410e:	4620      	mov	r0, r4
   d4110:	f000 f8de 	bl	d42d0 <_ZN5SHT1515getTemperatureFEv>
   d4114:	4b13      	ldr	r3, [pc, #76]	; (d4164 <loop+0x60>)
  tempC = sensor0_1.getTemperatureC();
   d4116:	4620      	mov	r0, r4
}

void loop() {

  sensor0_1.Tick();
  tempF = sensor0_1.getTemperatureF();
   d4118:	ed83 0b00 	vstr	d0, [r3]
  tempC = sensor0_1.getTemperatureC();
   d411c:	f000 f8f4 	bl	d4308 <_ZN5SHT1515getTemperatureCEv>
   d4120:	4b11      	ldr	r3, [pc, #68]	; (d4168 <loop+0x64>)
  humidityLinear = sensor0_1.getHumidityLinear();
   d4122:	4620      	mov	r0, r4

void loop() {

  sensor0_1.Tick();
  tempF = sensor0_1.getTemperatureF();
  tempC = sensor0_1.getTemperatureC();
   d4124:	ed83 0b00 	vstr	d0, [r3]
  humidityLinear = sensor0_1.getHumidityLinear();
   d4128:	f000 f90a 	bl	d4340 <_ZN5SHT1517getHumidityLinearEv>
   d412c:	4b0f      	ldr	r3, [pc, #60]	; (d416c <loop+0x68>)
  humidityTrue = sensor0_1.getHumidityTrue();
   d412e:	4620      	mov	r0, r4
void loop() {

  sensor0_1.Tick();
  tempF = sensor0_1.getTemperatureF();
  tempC = sensor0_1.getTemperatureC();
  humidityLinear = sensor0_1.getHumidityLinear();
   d4130:	ed83 0b00 	vstr	d0, [r3]
  humidityTrue = sensor0_1.getHumidityTrue();
  sensor2.tick();
   d4134:	4c0e      	ldr	r4, [pc, #56]	; (d4170 <loop+0x6c>)

  sensor0_1.Tick();
  tempF = sensor0_1.getTemperatureF();
  tempC = sensor0_1.getTemperatureC();
  humidityLinear = sensor0_1.getHumidityLinear();
  humidityTrue = sensor0_1.getHumidityTrue();
   d4136:	f000 f93f 	bl	d43b8 <_ZN5SHT1515getHumidityTrueEv>
   d413a:	4b0e      	ldr	r3, [pc, #56]	; (d4174 <loop+0x70>)
  sensor2.tick();
   d413c:	4620      	mov	r0, r4

  sensor0_1.Tick();
  tempF = sensor0_1.getTemperatureF();
  tempC = sensor0_1.getTemperatureC();
  humidityLinear = sensor0_1.getHumidityLinear();
  humidityTrue = sensor0_1.getHumidityTrue();
   d413e:	ed83 0b00 	vstr	d0, [r3]
  sensor2.tick();
   d4142:	f000 f881 	bl	d4248 <_ZN5TE2154tickEv>
  GMoisturePercentage = sensor2.getGMoisture();
   d4146:	4620      	mov	r0, r4
   d4148:	f000 f88e 	bl	d4268 <_ZN5TE21512getGMoistureEv>
   d414c:	4b0a      	ldr	r3, [pc, #40]	; (d4178 <loop+0x74>)
   d414e:	ed83 0b00 	vstr	d0, [r3]
  Serial.print(" Variable tempC: ");
  Serial.println(tempC);
  sensor0_1.printVariables();
#endif

  delay(TickRate);
   d4152:	f242 7010 	movw	r0, #10000	; 0x2710
}
   d4156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.print(" Variable tempC: ");
  Serial.println(tempC);
  sensor0_1.printVariables();
#endif

  delay(TickRate);
   d415a:	f000 bd05 	b.w	d4b68 <delay>
   d415e:	bf00      	nop
   d4160:	2003e488 	.word	0x2003e488
   d4164:	2003e460 	.word	0x2003e460
   d4168:	2003e4c0 	.word	0x2003e4c0
   d416c:	2003e478 	.word	0x2003e478
   d4170:	2003e468 	.word	0x2003e468
   d4174:	2003e4b8 	.word	0x2003e4b8
   d4178:	2003e480 	.word	0x2003e480

000d417c <_ZN10CloudClass8variableIA11_cIdEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d417c:	2300      	movs	r3, #0
   d417e:	2209      	movs	r2, #9
   d4180:	f000 bbea 	b.w	d4958 <spark_variable>

000d4184 <setup>:
SHT15 sensor0_1(D1, D0);
TE215 sensor2(A1);

double tempF, tempC, humidityLinear, humidityTrue, GMoisturePercentage;

void setup() {
   d4184:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d4186:	4c16      	ldr	r4, [pc, #88]	; (d41e0 <setup+0x5c>)
   d4188:	4916      	ldr	r1, [pc, #88]	; (d41e4 <setup+0x60>)
   d418a:	2503      	movs	r5, #3
   d418c:	2600      	movs	r6, #0
   d418e:	230a      	movs	r3, #10
   d4190:	e88d 0068 	stmia.w	sp, {r3, r5, r6}
   d4194:	220d      	movs	r2, #13
   d4196:	4b14      	ldr	r3, [pc, #80]	; (d41e8 <setup+0x64>)
   d4198:	4620      	mov	r0, r4
   d419a:	f7ff ff8c 	bl	d40b6 <_ZN5spark9WiFiClass14setCredentialsEPKcjS2_jmm>
   d419e:	2308      	movs	r3, #8
   d41a0:	2214      	movs	r2, #20
   d41a2:	9300      	str	r3, [sp, #0]
   d41a4:	9602      	str	r6, [sp, #8]
   d41a6:	4b11      	ldr	r3, [pc, #68]	; (d41ec <setup+0x68>)
   d41a8:	9501      	str	r5, [sp, #4]
   d41aa:	4911      	ldr	r1, [pc, #68]	; (d41f0 <setup+0x6c>)
   d41ac:	4620      	mov	r0, r4
   d41ae:	f7ff ff82 	bl	d40b6 <_ZN5spark9WiFiClass14setCredentialsEPKcjS2_jmm>
  WiFi.setCredentials("IEEE-THERMALTAK 4824", "3250eJ+9");
  #endif

  // register functions/variables with cloud
  // sensor0_1.cloudRegister();
  Particle.variable("TempF", tempF);
   d41b2:	4910      	ldr	r1, [pc, #64]	; (d41f4 <setup+0x70>)
   d41b4:	4810      	ldr	r0, [pc, #64]	; (d41f8 <setup+0x74>)
   d41b6:	f7ff ffe1 	bl	d417c <_ZN10CloudClass8variableIA11_cIdEEEbRKT_DpRKT0_>
  Particle.variable("TempC", tempC);
   d41ba:	4910      	ldr	r1, [pc, #64]	; (d41fc <setup+0x78>)
   d41bc:	4810      	ldr	r0, [pc, #64]	; (d4200 <setup+0x7c>)
   d41be:	f7ff ffdd 	bl	d417c <_ZN10CloudClass8variableIA11_cIdEEEbRKT_DpRKT0_>
  Particle.variable("HumidityL", humidityLinear);
   d41c2:	4910      	ldr	r1, [pc, #64]	; (d4204 <setup+0x80>)
   d41c4:	4810      	ldr	r0, [pc, #64]	; (d4208 <setup+0x84>)
   d41c6:	f7ff ffd9 	bl	d417c <_ZN10CloudClass8variableIA11_cIdEEEbRKT_DpRKT0_>
  Particle.variable("HumidityT", humidityTrue);
   d41ca:	4910      	ldr	r1, [pc, #64]	; (d420c <setup+0x88>)
   d41cc:	4810      	ldr	r0, [pc, #64]	; (d4210 <setup+0x8c>)
   d41ce:	f7ff ffd5 	bl	d417c <_ZN10CloudClass8variableIA11_cIdEEEbRKT_DpRKT0_>
  Particle.variable("GMoistureP", GMoisturePercentage);
   d41d2:	4910      	ldr	r1, [pc, #64]	; (d4214 <setup+0x90>)
   d41d4:	4810      	ldr	r0, [pc, #64]	; (d4218 <setup+0x94>)
   d41d6:	f7ff ffd1 	bl	d417c <_ZN10CloudClass8variableIA11_cIdEEEbRKT_DpRKT0_>
  while(!Serial.isConnected()) Particle.process();
  Serial.println("Debug Begin");
  // Debug Setup Code End
#endif

}
   d41da:	b004      	add	sp, #16
   d41dc:	bd70      	pop	{r4, r5, r6, pc}
   d41de:	bf00      	nop
   d41e0:	2003e704 	.word	0x2003e704
   d41e4:	000d5fff 	.word	0x000d5fff
   d41e8:	000d5ff4 	.word	0x000d5ff4
   d41ec:	000d600d 	.word	0x000d600d
   d41f0:	000d6016 	.word	0x000d6016
   d41f4:	2003e460 	.word	0x2003e460
   d41f8:	000d602b 	.word	0x000d602b
   d41fc:	2003e4c0 	.word	0x2003e4c0
   d4200:	000d6031 	.word	0x000d6031
   d4204:	2003e478 	.word	0x2003e478
   d4208:	000d6037 	.word	0x000d6037
   d420c:	2003e4b8 	.word	0x2003e4b8
   d4210:	000d6041 	.word	0x000d6041
   d4214:	2003e480 	.word	0x2003e480
   d4218:	000d604b 	.word	0x000d604b

000d421c <_GLOBAL__sub_I_sensor0_1>:
  Serial.println(tempC);
  sensor0_1.printVariables();
#endif

  delay(TickRate);
}
   d421c:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d421e:	f000 f9ef 	bl	d4600 <HAL_Pin_Map>
#include "SHT15.h"
#include "TE215.h"

#define TickRate 10000

SHT15 sensor0_1(D1, D0);
   d4222:	2101      	movs	r1, #1
   d4224:	2200      	movs	r2, #0
   d4226:	4804      	ldr	r0, [pc, #16]	; (d4238 <_GLOBAL__sub_I_sensor0_1+0x1c>)
   d4228:	f000 f833 	bl	d4292 <_ZN5SHT15C1Eii>
TE215 sensor2(A1);
   d422c:	2112      	movs	r1, #18
   d422e:	4803      	ldr	r0, [pc, #12]	; (d423c <_GLOBAL__sub_I_sensor0_1+0x20>)
  Serial.println(tempC);
  sensor0_1.printVariables();
#endif

  delay(TickRate);
}
   d4230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "TE215.h"

#define TickRate 10000

SHT15 sensor0_1(D1, D0);
TE215 sensor2(A1);
   d4234:	f000 b804 	b.w	d4240 <_ZN5TE215C1Eh>
   d4238:	2003e488 	.word	0x2003e488
   d423c:	2003e468 	.word	0x2003e468

000d4240 <_ZN5TE215C1Eh>:

#include "TE215.h"

TE215::TE215(uint8_t analogPin) {
   d4240:	2200      	movs	r2, #0
   d4242:	7082      	strb	r2, [r0, #2]
    _analogPin = analogPin;
   d4244:	7001      	strb	r1, [r0, #0]
}
   d4246:	4770      	bx	lr

000d4248 <_ZN5TE2154tickEv>:
    pinMode(_digitalPin,INPUT);
    _digitalFeature = true;
}


void TE215::tick(){
   d4248:	b510      	push	{r4, lr}
   d424a:	4604      	mov	r4, r0
    _raw = analogRead(_analogPin);
   d424c:	7800      	ldrb	r0, [r0, #0]
   d424e:	f001 f8de 	bl	d540e <analogRead>

    if(_digitalFeature){
   d4252:	78a3      	ldrb	r3, [r4, #2]
    _digitalFeature = true;
}


void TE215::tick(){
    _raw = analogRead(_analogPin);
   d4254:	6060      	str	r0, [r4, #4]

    if(_digitalFeature){
   d4256:	b133      	cbz	r3, d4266 <_ZN5TE2154tickEv+0x1e>
        _wet = digitalRead(_digitalPin);
   d4258:	7860      	ldrb	r0, [r4, #1]
   d425a:	f001 f8c5 	bl	d53e8 <digitalRead>
   d425e:	3000      	adds	r0, #0
   d4260:	bf18      	it	ne
   d4262:	2001      	movne	r0, #1
   d4264:	70e0      	strb	r0, [r4, #3]
   d4266:	bd10      	pop	{r4, pc}

000d4268 <_ZN5TE21512getGMoistureEv>:

bool TE215::isWet(){
    return _wet;
}

double TE215::getGMoisture(){
   d4268:	b513      	push	{r0, r1, r4, lr}
    _GMoisturePercentage = map(_raw, gLow, gHigh, 0, 100);
   d426a:	2364      	movs	r3, #100	; 0x64
   d426c:	9300      	str	r3, [sp, #0]

bool TE215::isWet(){
    return _wet;
}

double TE215::getGMoisture(){
   d426e:	4604      	mov	r4, r0
    _GMoisturePercentage = map(_raw, gLow, gHigh, 0, 100);
   d4270:	2300      	movs	r3, #0
   d4272:	f44f 62af 	mov.w	r2, #1400	; 0x578
   d4276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   d427a:	6840      	ldr	r0, [r0, #4]
   d427c:	f000 fc68 	bl	d4b50 <_Z3mapiiiii>
   d4280:	60a0      	str	r0, [r4, #8]
    return _GMoisturePercentage;
   d4282:	f001 fbe3 	bl	d5a4c <__aeabi_i2d>
    //return _raw;
}
   d4286:	ec41 0b10 	vmov	d0, r0, r1
   d428a:	b002      	add	sp, #8
   d428c:	bd10      	pop	{r4, pc}

000d428e <_GLOBAL__sub_I__ZN5TE215C2Eh>:
   d428e:	f000 b9b7 	b.w	d4600 <HAL_Pin_Map>

000d4292 <_ZN5SHT15C1Eii>:

#include "SHT15.h"

SHT15::SHT15 (int dataPin, int clockPin) {
   d4292:	2303      	movs	r3, #3
   d4294:	b510      	push	{r4, lr}
   d4296:	4604      	mov	r4, r0
   d4298:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
   d429c:	2305      	movs	r3, #5
   d429e:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _dataPin = dataPin;
   d42a2:	b2c8      	uxtb	r0, r1
  _clockPin = clockPin;
   d42a4:	7022      	strb	r2, [r4, #0]

#include "SHT15.h"

SHT15::SHT15 (int dataPin, int clockPin) {
  _dataPin = dataPin;
   d42a6:	7060      	strb	r0, [r4, #1]
  _clockPin = clockPin;
  pinMode(_dataPin, OUTPUT);
   d42a8:	2101      	movs	r1, #1
   d42aa:	f001 f873 	bl	d5394 <pinMode>
  pinMode(_clockPin, OUTPUT);
   d42ae:	7820      	ldrb	r0, [r4, #0]
   d42b0:	2101      	movs	r1, #1
   d42b2:	f001 f86f 	bl	d5394 <pinMode>
  digitalWrite(_dataPin,HIGH);		//dataPin = 1
   d42b6:	7860      	ldrb	r0, [r4, #1]
   d42b8:	2101      	movs	r1, #1
   d42ba:	f001 f87c 	bl	d53b6 <digitalWrite>
  digitalWrite(_clockPin,LOW);		//clkPin  = 0
   d42be:	7820      	ldrb	r0, [r4, #0]
   d42c0:	2100      	movs	r1, #0
   d42c2:	f001 f878 	bl	d53b6 <digitalWrite>
}
   d42c6:	4620      	mov	r0, r4
   d42c8:	bd10      	pop	{r4, pc}
   d42ca:	0000      	movs	r0, r0
   d42cc:	0000      	movs	r0, r0
	...

000d42d0 <_ZN5SHT1515getTemperatureFEv>:
}
//End Debug Functions
#endif

// current temperature in degrees Fahrenheit
double SHT15::getTemperatureF() {
   d42d0:	b510      	push	{r4, lr}
   d42d2:	4604      	mov	r4, r0
  _tempuratureF = ((double) _rawDataT * 0.018) - 39.4; 
   d42d4:	8840      	ldrh	r0, [r0, #2]
   d42d6:	f001 fba9 	bl	d5a2c <__aeabi_ui2d>
   d42da:	a307      	add	r3, pc, #28	; (adr r3, d42f8 <_ZN5SHT1515getTemperatureFEv+0x28>)
   d42dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42e0:	f001 fc1a 	bl	d5b18 <__aeabi_dmul>
   d42e4:	a306      	add	r3, pc, #24	; (adr r3, d4300 <_ZN5SHT1515getTemperatureFEv+0x30>)
   d42e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42ea:	f001 fa61 	bl	d57b0 <__aeabi_dsub>
   d42ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
  return _tempuratureF;
}
   d42f2:	ec41 0b10 	vmov	d0, r0, r1
   d42f6:	bd10      	pop	{r4, pc}
   d42f8:	8d4fdf3b 	.word	0x8d4fdf3b
   d42fc:	3f926e97 	.word	0x3f926e97
   d4300:	33333333 	.word	0x33333333
   d4304:	4043b333 	.word	0x4043b333

000d4308 <_ZN5SHT1515getTemperatureCEv>:

// current temperature in degrees C
double SHT15::getTemperatureC() {
   d4308:	b510      	push	{r4, lr}
   d430a:	4604      	mov	r4, r0
  _tempuratureC = ((double) _rawDataT * 0.01) - 39.65; 
   d430c:	8840      	ldrh	r0, [r0, #2]
   d430e:	f001 fb8d 	bl	d5a2c <__aeabi_ui2d>
   d4312:	a307      	add	r3, pc, #28	; (adr r3, d4330 <_ZN5SHT1515getTemperatureCEv+0x28>)
   d4314:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4318:	f001 fbfe 	bl	d5b18 <__aeabi_dmul>
   d431c:	a306      	add	r3, pc, #24	; (adr r3, d4338 <_ZN5SHT1515getTemperatureCEv+0x30>)
   d431e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4322:	f001 fa45 	bl	d57b0 <__aeabi_dsub>
   d4326:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return _tempuratureC;
}
   d432a:	ec41 0b10 	vmov	d0, r0, r1
   d432e:	bd10      	pop	{r4, pc}
   d4330:	47ae147b 	.word	0x47ae147b
   d4334:	3f847ae1 	.word	0x3f847ae1
   d4338:	33333333 	.word	0x33333333
   d433c:	4043d333 	.word	0x4043d333

000d4340 <_ZN5SHT1517getHumidityLinearEv>:

//get linear humidity reading
double SHT15::getHumidityLinear(){
   d4340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  //expecting 12 bit humidity reading
  _humdityLinear =  -2.0468 + 0.0367 * _rawDataH + -1.5955E-6 * pow(_rawDataH,2.0);
   d4344:	8885      	ldrh	r5, [r0, #4]
  _tempuratureC = ((double) _rawDataT * 0.01) - 39.65; 
  return _tempuratureC;
}

//get linear humidity reading
double SHT15::getHumidityLinear(){
   d4346:	4604      	mov	r4, r0
  //expecting 12 bit humidity reading
  _humdityLinear =  -2.0468 + 0.0367 * _rawDataH + -1.5955E-6 * pow(_rawDataH,2.0);
   d4348:	4628      	mov	r0, r5
   d434a:	f001 fb6f 	bl	d5a2c <__aeabi_ui2d>
   d434e:	4606      	mov	r6, r0
   d4350:	4628      	mov	r0, r5
   d4352:	460f      	mov	r7, r1
   d4354:	f001 fb7a 	bl	d5a4c <__aeabi_i2d>
   d4358:	a311      	add	r3, pc, #68	; (adr r3, d43a0 <_ZN5SHT1517getHumidityLinearEv+0x60>)
   d435a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d435e:	f001 fbdb 	bl	d5b18 <__aeabi_dmul>
   d4362:	a311      	add	r3, pc, #68	; (adr r3, d43a8 <_ZN5SHT1517getHumidityLinearEv+0x68>)
   d4364:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4368:	f001 fa22 	bl	d57b0 <__aeabi_dsub>
   d436c:	4632      	mov	r2, r6
   d436e:	4680      	mov	r8, r0
   d4370:	4689      	mov	r9, r1
   d4372:	463b      	mov	r3, r7
   d4374:	4630      	mov	r0, r6
   d4376:	4639      	mov	r1, r7
   d4378:	f001 fbce 	bl	d5b18 <__aeabi_dmul>
   d437c:	a30c      	add	r3, pc, #48	; (adr r3, d43b0 <_ZN5SHT1517getHumidityLinearEv+0x70>)
   d437e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4382:	f001 fbc9 	bl	d5b18 <__aeabi_dmul>
   d4386:	4602      	mov	r2, r0
   d4388:	460b      	mov	r3, r1
   d438a:	4640      	mov	r0, r8
   d438c:	4649      	mov	r1, r9
   d438e:	f001 fa11 	bl	d57b4 <__adddf3>
   d4392:	e9c4 0106 	strd	r0, r1, [r4, #24]
  return _humdityLinear;
}
   d4396:	ec41 0b10 	vmov	d0, r0, r1
   d439a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d439e:	bf00      	nop
   d43a0:	a786c227 	.word	0xa786c227
   d43a4:	3fa2ca57 	.word	0x3fa2ca57
   d43a8:	adab9f56 	.word	0xadab9f56
   d43ac:	40005fd8 	.word	0x40005fd8
   d43b0:	cd578397 	.word	0xcd578397
   d43b4:	bebac49e 	.word	0xbebac49e

000d43b8 <_ZN5SHT1515getHumidityTrueEv>:

//get true humidity reading // needs linear reading first
double SHT15::getHumidityTrue(){
   d43b8:	b5d0      	push	{r4, r6, r7, lr}
   d43ba:	4604      	mov	r4, r0
  //expecting 12 bit humidity reading
  getHumidityLinear();
   d43bc:	f7ff ffc0 	bl	d4340 <_ZN5SHT1517getHumidityLinearEv>
  _humdityTrue = (_tempuratureC-25.0) * (0.01 + 0.00008 * _rawDataH) + _humdityLinear;
   d43c0:	88a0      	ldrh	r0, [r4, #4]
   d43c2:	f001 fb43 	bl	d5a4c <__aeabi_i2d>
   d43c6:	a311      	add	r3, pc, #68	; (adr r3, d440c <_ZN5SHT1515getHumidityTrueEv+0x54>)
   d43c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43cc:	f001 fba4 	bl	d5b18 <__aeabi_dmul>
   d43d0:	a310      	add	r3, pc, #64	; (adr r3, d4414 <_ZN5SHT1515getHumidityTrueEv+0x5c>)
   d43d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43d6:	f001 f9ed 	bl	d57b4 <__adddf3>
   d43da:	2200      	movs	r2, #0
   d43dc:	4606      	mov	r6, r0
   d43de:	460f      	mov	r7, r1
   d43e0:	4b09      	ldr	r3, [pc, #36]	; (d4408 <_ZN5SHT1515getHumidityTrueEv+0x50>)
   d43e2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   d43e6:	f001 f9e3 	bl	d57b0 <__aeabi_dsub>
   d43ea:	4602      	mov	r2, r0
   d43ec:	460b      	mov	r3, r1
   d43ee:	4630      	mov	r0, r6
   d43f0:	4639      	mov	r1, r7
   d43f2:	f001 fb91 	bl	d5b18 <__aeabi_dmul>
   d43f6:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d43fa:	f001 f9db 	bl	d57b4 <__adddf3>
   d43fe:	e9c4 0108 	strd	r0, r1, [r4, #32]
  return _humdityTrue;
}
   d4402:	ec41 0b10 	vmov	d0, r0, r1
   d4406:	bdd0      	pop	{r4, r6, r7, pc}
   d4408:	40390000 	.word	0x40390000
   d440c:	88e368f1 	.word	0x88e368f1
   d4410:	3f14f8b5 	.word	0x3f14f8b5
   d4414:	47ae147b 	.word	0x47ae147b
   d4418:	3f847ae1 	.word	0x3f847ae1

000d441c <_ZN5SHT1515_sendCommandSHTEh>:
}

// Start SHT Transmission sequence
// Then send Command byte
// then wait for sensor acknowledge
void SHT15::_sendCommandSHT(uint8_t cmd) {
   d441c:	b538      	push	{r3, r4, r5, lr}
   d441e:	4604      	mov	r4, r0
   d4420:	460d      	mov	r5, r1

  bool ACK;
  // Transmission Start sequence
  pinMode(_dataPin, OUTPUT);
   d4422:	7840      	ldrb	r0, [r0, #1]
   d4424:	2101      	movs	r1, #1
   d4426:	f000 ffb5 	bl	d5394 <pinMode>
  pinMode(_clockPin, OUTPUT);
   d442a:	7820      	ldrb	r0, [r4, #0]
   d442c:	2101      	movs	r1, #1
   d442e:	f000 ffb1 	bl	d5394 <pinMode>
  digitalWrite(_dataPin, HIGH);
   d4432:	7860      	ldrb	r0, [r4, #1]
   d4434:	2101      	movs	r1, #1
   d4436:	f000 ffbe 	bl	d53b6 <digitalWrite>
  digitalWrite(_clockPin, HIGH);
   d443a:	7820      	ldrb	r0, [r4, #0]
   d443c:	2101      	movs	r1, #1
   d443e:	f000 ffba 	bl	d53b6 <digitalWrite>
  digitalWrite(_dataPin, LOW);
   d4442:	7860      	ldrb	r0, [r4, #1]
   d4444:	2100      	movs	r1, #0
   d4446:	f000 ffb6 	bl	d53b6 <digitalWrite>
  digitalWrite(_clockPin, LOW);
   d444a:	7820      	ldrb	r0, [r4, #0]
   d444c:	2100      	movs	r1, #0
   d444e:	f000 ffb2 	bl	d53b6 <digitalWrite>
  digitalWrite(_clockPin, HIGH);
   d4452:	7820      	ldrb	r0, [r4, #0]
   d4454:	2101      	movs	r1, #1
   d4456:	f000 ffae 	bl	d53b6 <digitalWrite>
  digitalWrite(_dataPin, HIGH);
   d445a:	7860      	ldrb	r0, [r4, #1]
   d445c:	2101      	movs	r1, #1
   d445e:	f000 ffaa 	bl	d53b6 <digitalWrite>
  digitalWrite(_clockPin, LOW);
   d4462:	7820      	ldrb	r0, [r4, #0]
   d4464:	2100      	movs	r1, #0
   d4466:	f000 ffa6 	bl	d53b6 <digitalWrite>

  // shift out 8 bit cmd
  shiftOut(_dataPin, _clockPin, MSBFIRST, cmd);
   d446a:	462b      	mov	r3, r5
   d446c:	2201      	movs	r2, #1
   d446e:	7821      	ldrb	r1, [r4, #0]
   d4470:	7860      	ldrb	r0, [r4, #1]
   d4472:	f000 ffe3 	bl	d543c <shiftOut>

  // Verify we get the correct ack
  digitalWrite(_clockPin, HIGH);
   d4476:	7820      	ldrb	r0, [r4, #0]
   d4478:	2101      	movs	r1, #1
   d447a:	f000 ff9c 	bl	d53b6 <digitalWrite>
  pinMode(_dataPin, INPUT);
   d447e:	2100      	movs	r1, #0
   d4480:	7860      	ldrb	r0, [r4, #1]
   d4482:	f000 ff87 	bl	d5394 <pinMode>
  ACK = digitalRead(_dataPin);
   d4486:	7860      	ldrb	r0, [r4, #1]
   d4488:	f000 ffae 	bl	d53e8 <digitalRead>
    #ifdef MYDEBUG
    Serial.printlnf("_sendCommandSHT ACK 0 error");
    #endif

  }
  digitalWrite(_clockPin, LOW);
   d448c:	7820      	ldrb	r0, [r4, #0]
   d448e:	2100      	movs	r1, #0
   d4490:	f000 ff91 	bl	d53b6 <digitalWrite>
  ACK = digitalRead(_dataPin);
   d4494:	7860      	ldrb	r0, [r4, #1]

    #ifdef MYDEBUG
    Serial.printlnf("_sendCommandSHT ACK 1 error");
    #endif
  }
}
   d4496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.printlnf("_sendCommandSHT ACK 0 error");
    #endif

  }
  digitalWrite(_clockPin, LOW);
  ACK = digitalRead(_dataPin);
   d449a:	f000 bfa5 	b.w	d53e8 <digitalRead>

000d449e <_ZN5SHT1517_waitForResultSHTEv>:
    #endif
  }
}

// poll data pin for SHT to begin data Transmission
void SHT15::_waitForResultSHT() {
   d449e:	b538      	push	{r3, r4, r5, lr}

  bool ACK;
  pinMode(_dataPin, INPUT);
   d44a0:	2100      	movs	r1, #0
    #endif
  }
}

// poll data pin for SHT to begin data Transmission
void SHT15::_waitForResultSHT() {
   d44a2:	4605      	mov	r5, r0

  bool ACK;
  pinMode(_dataPin, INPUT);
   d44a4:	7840      	ldrb	r0, [r0, #1]
   d44a6:	f000 ff75 	bl	d5394 <pinMode>
   d44aa:	2464      	movs	r4, #100	; 0x64
  // poll data pin for sensor to pull low
  for (int i = 0; i < 100; i++) {
    delay(10);
   d44ac:	200a      	movs	r0, #10
   d44ae:	f000 fb5b 	bl	d4b68 <delay>
    ACK = digitalRead(_dataPin);
   d44b2:	7868      	ldrb	r0, [r5, #1]
   d44b4:	f000 ff98 	bl	d53e8 <digitalRead>
    if (ACK == LOW) {
   d44b8:	b108      	cbz	r0, d44be <_ZN5SHT1517_waitForResultSHTEv+0x20>
void SHT15::_waitForResultSHT() {

  bool ACK;
  pinMode(_dataPin, INPUT);
  // poll data pin for sensor to pull low
  for (int i = 0; i < 100; i++) {
   d44ba:	3c01      	subs	r4, #1
   d44bc:	d1f6      	bne.n	d44ac <_ZN5SHT1517_waitForResultSHTEv+0xe>
   d44be:	bd38      	pop	{r3, r4, r5, pc}

000d44c0 <_ZN5SHT1511_skipCrcSHTEv>:
  Serial.printlnf("*_rawData Contents: %i", *_rawData);
  #endif
}

// ends SHT Transmission without sending CRC
void SHT15::_skipCrcSHT() {
   d44c0:	b510      	push	{r4, lr}
   d44c2:	4604      	mov	r4, r0
  pinMode(_dataPin, OUTPUT);
   d44c4:	2101      	movs	r1, #1
   d44c6:	7840      	ldrb	r0, [r0, #1]
   d44c8:	f000 ff64 	bl	d5394 <pinMode>
  pinMode(_clockPin, OUTPUT);
   d44cc:	7820      	ldrb	r0, [r4, #0]
   d44ce:	2101      	movs	r1, #1
   d44d0:	f000 ff60 	bl	d5394 <pinMode>

  digitalWrite(_dataPin, HIGH);
   d44d4:	7860      	ldrb	r0, [r4, #1]
   d44d6:	2101      	movs	r1, #1
   d44d8:	f000 ff6d 	bl	d53b6 <digitalWrite>
  digitalWrite(_clockPin, HIGH);
   d44dc:	7820      	ldrb	r0, [r4, #0]
   d44de:	2101      	movs	r1, #1
   d44e0:	f000 ff69 	bl	d53b6 <digitalWrite>
  digitalWrite(_clockPin, LOW);
   d44e4:	7820      	ldrb	r0, [r4, #0]
   d44e6:	2100      	movs	r1, #0
}
   d44e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pinMode(_dataPin, OUTPUT);
  pinMode(_clockPin, OUTPUT);

  digitalWrite(_dataPin, HIGH);
  digitalWrite(_clockPin, HIGH);
  digitalWrite(_clockPin, LOW);
   d44ec:	f000 bf63 	b.w	d53b6 <digitalWrite>

000d44f0 <_ZN5SHT1512_dataShiftInEh>:
}

// custom shiftin function for SHT
uint32_t SHT15::_dataShiftIn(uint8_t numBits) {
   d44f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d44f2:	2500      	movs	r5, #0
   d44f4:	4606      	mov	r6, r0
   d44f6:	460f      	mov	r7, r1
  uint32_t bitval = 0;
   d44f8:	462c      	mov	r4, r5

  for (uint8_t i = 0; i < numBits; i++) {
   d44fa:	42bd      	cmp	r5, r7
   d44fc:	d011      	beq.n	d4522 <_ZN5SHT1512_dataShiftInEh+0x32>
    digitalWrite(_clockPin, HIGH);
   d44fe:	2101      	movs	r1, #1
   d4500:	7830      	ldrb	r0, [r6, #0]
   d4502:	f000 ff58 	bl	d53b6 <digitalWrite>
    delay(10);
   d4506:	200a      	movs	r0, #10
   d4508:	f000 fb2e 	bl	d4b68 <delay>
    // shift over bitval while ANDing new reading
    bitval = (bitval << 1) + digitalRead(_dataPin);
   d450c:	7870      	ldrb	r0, [r6, #1]
   d450e:	f000 ff6b 	bl	d53e8 <digitalRead>
   d4512:	0064      	lsls	r4, r4, #1
   d4514:	4404      	add	r4, r0
    digitalWrite(_clockPin, LOW);
   d4516:	2100      	movs	r1, #0
   d4518:	7830      	ldrb	r0, [r6, #0]
   d451a:	f000 ff4c 	bl	d53b6 <digitalWrite>
   d451e:	3501      	adds	r5, #1

// custom shiftin function for SHT
uint32_t SHT15::_dataShiftIn(uint8_t numBits) {
  uint32_t bitval = 0;

  for (uint8_t i = 0; i < numBits; i++) {
   d4520:	e7eb      	b.n	d44fa <_ZN5SHT1512_dataShiftInEh+0xa>
    bitval = (bitval << 1) + digitalRead(_dataPin);
    digitalWrite(_clockPin, LOW);
  }

  return (bitval);
}
   d4522:	4620      	mov	r0, r4
   d4524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4526 <_ZN5SHT1513_getData16SHTEb>:
    #endif
  }
}

// recives SHT data while sending acknowledge signals
void SHT15::_getData16SHT(bool sensor) {
   d4526:	b538      	push	{r3, r4, r5, lr}
   d4528:	4604      	mov	r4, r0
  // 0 = tempurature; 1 = humidity
  uint16_t *_rawData = sensor ? &_rawDataH : &_rawDataT;
   d452a:	b109      	cbz	r1, d4530 <_ZN5SHT1513_getData16SHTEb+0xa>
   d452c:	1d05      	adds	r5, r0, #4
   d452e:	e000      	b.n	d4532 <_ZN5SHT1513_getData16SHTEb+0xc>
   d4530:	1c85      	adds	r5, r0, #2
  // get the MSB
  pinMode(_dataPin, INPUT);
   d4532:	2100      	movs	r1, #0
   d4534:	7860      	ldrb	r0, [r4, #1]
   d4536:	f000 ff2d 	bl	d5394 <pinMode>
  pinMode(_clockPin, OUTPUT);
   d453a:	2101      	movs	r1, #1
   d453c:	7820      	ldrb	r0, [r4, #0]
   d453e:	f000 ff29 	bl	d5394 <pinMode>
  *_rawData = _dataShiftIn(8);
   d4542:	2108      	movs	r1, #8
   d4544:	4620      	mov	r0, r4
   d4546:	f7ff ffd3 	bl	d44f0 <_ZN5SHT1512_dataShiftInEh>

  #ifdef MYDEBUG
  Serial.printlnf("*_rawData MSB Contents: %i", *_rawData);
  #endif

  *_rawData *= 256; // shift msb over for later
   d454a:	0200      	lsls	r0, r0, #8
   d454c:	8028      	strh	r0, [r5, #0]
  #ifdef MYDEBUG
  Serial.printlnf("*_rawData MSB Shifted Contents: %i", *_rawData);
  #endif

  // send ACK
  pinMode(_dataPin, OUTPUT);
   d454e:	2101      	movs	r1, #1
   d4550:	7860      	ldrb	r0, [r4, #1]
   d4552:	f000 ff1f 	bl	d5394 <pinMode>
  digitalWrite(_dataPin, HIGH);
   d4556:	2101      	movs	r1, #1
   d4558:	7860      	ldrb	r0, [r4, #1]
   d455a:	f000 ff2c 	bl	d53b6 <digitalWrite>
  digitalWrite(_dataPin, LOW);
   d455e:	2100      	movs	r1, #0
   d4560:	7860      	ldrb	r0, [r4, #1]
   d4562:	f000 ff28 	bl	d53b6 <digitalWrite>
  digitalWrite(_clockPin, HIGH);
   d4566:	2101      	movs	r1, #1
   d4568:	7820      	ldrb	r0, [r4, #0]
   d456a:	f000 ff24 	bl	d53b6 <digitalWrite>
  digitalWrite(_clockPin, LOW);
   d456e:	2100      	movs	r1, #0
   d4570:	7820      	ldrb	r0, [r4, #0]
   d4572:	f000 ff20 	bl	d53b6 <digitalWrite>

  // get the LSB and OR it
  pinMode(_dataPin, INPUT);
   d4576:	2100      	movs	r1, #0
   d4578:	7860      	ldrb	r0, [r4, #1]
   d457a:	f000 ff0b 	bl	d5394 <pinMode>
  *_rawData |= _dataShiftIn(8);
   d457e:	2108      	movs	r1, #8
   d4580:	4620      	mov	r0, r4
   d4582:	f7ff ffb5 	bl	d44f0 <_ZN5SHT1512_dataShiftInEh>
   d4586:	882b      	ldrh	r3, [r5, #0]
   d4588:	4318      	orrs	r0, r3
   d458a:	8028      	strh	r0, [r5, #0]
   d458c:	bd38      	pop	{r3, r4, r5, pc}

000d458e <_ZN5SHT1512_readDataRawEb>:
  _readDataRaw(1);
}


// get unprocessed Sensor reading from SHT
void SHT15::_readDataRaw(bool sensor) {
   d458e:	b538      	push	{r3, r4, r5, lr}
   d4590:	4604      	mov	r4, r0
  // 0 = tempurature; 1 = humidity
  int cmd = sensor ? _getHumidityCmd : _getTempCmd;
   d4592:	460d      	mov	r5, r1
   d4594:	b111      	cbz	r1, d459c <_ZN5SHT1512_readDataRawEb+0xe>
   d4596:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
   d459a:	e001      	b.n	d45a0 <_ZN5SHT1512_readDataRawEb+0x12>
   d459c:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28

  #ifdef MYDEBUG
  Serial.printlnf("_readDataRaw cmd: %u", cmd);
  #endif

  _sendCommandSHT(cmd);
   d45a0:	4620      	mov	r0, r4
   d45a2:	f7ff ff3b 	bl	d441c <_ZN5SHT1515_sendCommandSHTEh>
  _waitForResultSHT();
   d45a6:	4620      	mov	r0, r4
   d45a8:	f7ff ff79 	bl	d449e <_ZN5SHT1517_waitForResultSHTEv>
  _getData16SHT(sensor);
   d45ac:	4620      	mov	r0, r4
   d45ae:	4629      	mov	r1, r5
   d45b0:	f7ff ffb9 	bl	d4526 <_ZN5SHT1513_getData16SHTEb>
  _skipCrcSHT();
   d45b4:	4620      	mov	r0, r4
}
   d45b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  #endif

  _sendCommandSHT(cmd);
  _waitForResultSHT();
  _getData16SHT(sensor);
  _skipCrcSHT();
   d45ba:	f7ff bf81 	b.w	d44c0 <_ZN5SHT1511_skipCrcSHTEv>

000d45be <_ZN5SHT154TickEv>:
  getHumidityLinear();
  _humdityTrue = (_tempuratureC-25.0) * (0.01 + 0.00008 * _rawDataH) + _humdityLinear;
  return _humdityTrue;
}

void SHT15::Tick(){
   d45be:	b510      	push	{r4, lr}
  //read temp sensor
  _readDataRaw(0);
   d45c0:	2100      	movs	r1, #0
  getHumidityLinear();
  _humdityTrue = (_tempuratureC-25.0) * (0.01 + 0.00008 * _rawDataH) + _humdityLinear;
  return _humdityTrue;
}

void SHT15::Tick(){
   d45c2:	4604      	mov	r4, r0
  //read temp sensor
  _readDataRaw(0);
   d45c4:	f7ff ffe3 	bl	d458e <_ZN5SHT1512_readDataRawEb>
  delay(1000);
   d45c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d45cc:	f000 facc 	bl	d4b68 <delay>
  //read humidity sensor
  _readDataRaw(1);
   d45d0:	4620      	mov	r0, r4
   d45d2:	2101      	movs	r1, #1
}
   d45d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SHT15::Tick(){
  //read temp sensor
  _readDataRaw(0);
  delay(1000);
  //read humidity sensor
  _readDataRaw(1);
   d45d8:	f7ff bfd9 	b.w	d458e <_ZN5SHT1512_readDataRawEb>

000d45dc <_GLOBAL__sub_I__ZN5SHT15C2Eii>:
   d45dc:	f000 b810 	b.w	d4600 <HAL_Pin_Map>

000d45e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <netdb_freeaddrinfo+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	689b      	ldr	r3, [r3, #8]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030268 	.word	0x00030268

000d45f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <netdb_getaddrinfo+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	68db      	ldr	r3, [r3, #12]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030268 	.word	0x00030268

000d4600 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <HAL_Pin_Map+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	681b      	ldr	r3, [r3, #0]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	0003022c 	.word	0x0003022c

000d4610 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <HAL_Validate_Pin_Function+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	685b      	ldr	r3, [r3, #4]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	0003022c 	.word	0x0003022c

000d4620 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <HAL_Pin_Mode+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	689b      	ldr	r3, [r3, #8]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	0003022c 	.word	0x0003022c

000d4630 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <HAL_Get_Pin_Mode+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	68db      	ldr	r3, [r3, #12]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	0003022c 	.word	0x0003022c

000d4640 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <HAL_GPIO_Write+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	691b      	ldr	r3, [r3, #16]
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	0003022c 	.word	0x0003022c

000d4650 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <HAL_GPIO_Read+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	695b      	ldr	r3, [r3, #20]
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	0003022c 	.word	0x0003022c

000d4660 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <HAL_ADC_Read+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	0003022c 	.word	0x0003022c

000d4670 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <HAL_SPI_Init+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	69db      	ldr	r3, [r3, #28]
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030230 	.word	0x00030230

000d4680 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <HAL_SPI_Is_Enabled+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	6a1b      	ldr	r3, [r3, #32]
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	00030230 	.word	0x00030230

000d4690 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <HAL_RNG_GetRandomNumber+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	685b      	ldr	r3, [r3, #4]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	00030218 	.word	0x00030218

000d46a0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	695b      	ldr	r3, [r3, #20]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	00030218 	.word	0x00030218

000d46b0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <os_thread_is_current+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	689b      	ldr	r3, [r3, #8]
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	00030248 	.word	0x00030248

000d46c0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <os_thread_join+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	691b      	ldr	r3, [r3, #16]
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	00030248 	.word	0x00030248

000d46d0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <os_thread_cleanup+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	695b      	ldr	r3, [r3, #20]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	00030248 	.word	0x00030248

000d46e0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <os_mutex_create+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	00030248 	.word	0x00030248

000d46f0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <os_mutex_recursive_create+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	00030248 	.word	0x00030248

000d4700 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <inet_inet_ntop+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	695b      	ldr	r3, [r3, #20]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	00030264 	.word	0x00030264

000d4710 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <HAL_USART_Init+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	681b      	ldr	r3, [r3, #0]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	0003023c 	.word	0x0003023c

000d4720 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <HAL_USART_Write_Data+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	68db      	ldr	r3, [r3, #12]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	0003023c 	.word	0x0003023c

000d4730 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <HAL_USART_Available_Data+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	691b      	ldr	r3, [r3, #16]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	0003023c 	.word	0x0003023c

000d4740 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <HAL_USART_Read_Data+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	695b      	ldr	r3, [r3, #20]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	0003023c 	.word	0x0003023c

000d4750 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <HAL_USART_Peek_Data+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	699b      	ldr	r3, [r3, #24]
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	0003023c 	.word	0x0003023c

000d4760 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <HAL_USART_Flush_Data+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	69db      	ldr	r3, [r3, #28]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	0003023c 	.word	0x0003023c

000d4770 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <HAL_USART_Is_Enabled+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	6a1b      	ldr	r3, [r3, #32]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	0003023c 	.word	0x0003023c

000d4780 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <HAL_USART_Available_Data_For_Write+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	0003023c 	.word	0x0003023c

000d4790 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <HAL_I2C_Write_Data+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	6a1b      	ldr	r3, [r3, #32]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030228 	.word	0x00030228

000d47a0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <HAL_I2C_Available_Data+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030228 	.word	0x00030228

000d47b0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <HAL_I2C_Read_Data+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030228 	.word	0x00030228

000d47c0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <HAL_I2C_Peek_Data+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030228 	.word	0x00030228

000d47d0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <HAL_I2C_Flush_Data+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030228 	.word	0x00030228

000d47e0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <HAL_I2C_Is_Enabled+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030228 	.word	0x00030228

000d47f0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <HAL_I2C_Init+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030228 	.word	0x00030228

000d4800 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <HAL_USB_USART_Init+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	681b      	ldr	r3, [r3, #0]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	0003024c 	.word	0x0003024c

000d4810 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <HAL_USB_USART_Available_Data+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	691b      	ldr	r3, [r3, #16]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	0003024c 	.word	0x0003024c

000d4820 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	695b      	ldr	r3, [r3, #20]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003024c 	.word	0x0003024c

000d4830 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <HAL_USB_USART_Receive_Data+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	699b      	ldr	r3, [r3, #24]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	0003024c 	.word	0x0003024c

000d4840 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <HAL_USB_USART_Send_Data+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	69db      	ldr	r3, [r3, #28]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	0003024c 	.word	0x0003024c

000d4850 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <HAL_USB_USART_Flush_Data+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	6a1b      	ldr	r3, [r3, #32]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	0003024c 	.word	0x0003024c

000d4860 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <set_system_mode+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	685b      	ldr	r3, [r3, #4]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	00030220 	.word	0x00030220

000d4870 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <system_delay_ms+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	695b      	ldr	r3, [r3, #20]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030220 	.word	0x00030220

000d4880 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b03      	ldr	r3, [pc, #12]	; (d4890 <system_ctrl_set_app_request_handler+0x10>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d488a:	9301      	str	r3, [sp, #4]
   d488c:	bd08      	pop	{r3, pc}
   d488e:	0000      	.short	0x0000
   d4890:	00030220 	.word	0x00030220

000d4894 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b03      	ldr	r3, [pc, #12]	; (d48a4 <system_ctrl_set_result+0x10>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d489e:	9301      	str	r3, [sp, #4]
   d48a0:	bd08      	pop	{r3, pc}
   d48a2:	0000      	.short	0x0000
   d48a4:	00030220 	.word	0x00030220

000d48a8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <network_connect+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	685b      	ldr	r3, [r3, #4]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030240 	.word	0x00030240

000d48b8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <network_connecting+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	689b      	ldr	r3, [r3, #8]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030240 	.word	0x00030240

000d48c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <network_disconnect+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	68db      	ldr	r3, [r3, #12]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030240 	.word	0x00030240

000d48d8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <network_ready+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	691b      	ldr	r3, [r3, #16]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030240 	.word	0x00030240

000d48e8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <network_on+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	695b      	ldr	r3, [r3, #20]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030240 	.word	0x00030240

000d48f8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <network_off+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	699b      	ldr	r3, [r3, #24]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030240 	.word	0x00030240

000d4908 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <network_listen+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	69db      	ldr	r3, [r3, #28]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030240 	.word	0x00030240

000d4918 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <network_listening+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	6a1b      	ldr	r3, [r3, #32]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030240 	.word	0x00030240

000d4928 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <network_set_credentials+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030240 	.word	0x00030240

000d4938 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <network_set_listen_timeout+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030240 	.word	0x00030240

000d4948 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <network_get_listen_timeout+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030240 	.word	0x00030240

000d4958 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <spark_variable+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	681b      	ldr	r3, [r3, #0]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030244 	.word	0x00030244

000d4968 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <spark_set_random_seed_from_cloud_handler+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030244 	.word	0x00030244

000d4978 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <malloc+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	681b      	ldr	r3, [r3, #0]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	0003021c 	.word	0x0003021c

000d4988 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <free+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	685b      	ldr	r3, [r3, #4]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	0003021c 	.word	0x0003021c

000d4998 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4998:	2200      	movs	r2, #0
   d499a:	4611      	mov	r1, r2
   d499c:	6840      	ldr	r0, [r0, #4]
   d499e:	f7ff bfbb 	b.w	d4918 <network_listening>

000d49a2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d49a2:	2200      	movs	r2, #0
   d49a4:	4611      	mov	r1, r2
   d49a6:	6840      	ldr	r0, [r0, #4]
   d49a8:	f7ff bfce 	b.w	d4948 <network_get_listen_timeout>

000d49ac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d49ac:	2200      	movs	r2, #0
   d49ae:	6840      	ldr	r0, [r0, #4]
   d49b0:	f7ff bfc2 	b.w	d4938 <network_set_listen_timeout>

000d49b4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d49b4:	2200      	movs	r2, #0
   d49b6:	f081 0101 	eor.w	r1, r1, #1
   d49ba:	6840      	ldr	r0, [r0, #4]
   d49bc:	f7ff bfa4 	b.w	d4908 <network_listen>

000d49c0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d49c0:	2300      	movs	r3, #0
   d49c2:	461a      	mov	r2, r3
   d49c4:	4619      	mov	r1, r3
   d49c6:	6840      	ldr	r0, [r0, #4]
   d49c8:	f7ff bf96 	b.w	d48f8 <network_off>

000d49cc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d49cc:	2300      	movs	r3, #0
   d49ce:	461a      	mov	r2, r3
   d49d0:	4619      	mov	r1, r3
   d49d2:	6840      	ldr	r0, [r0, #4]
   d49d4:	f7ff bf88 	b.w	d48e8 <network_on>

000d49d8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d49d8:	2200      	movs	r2, #0
   d49da:	4611      	mov	r1, r2
   d49dc:	6840      	ldr	r0, [r0, #4]
   d49de:	f7ff bf7b 	b.w	d48d8 <network_ready>

000d49e2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d49e2:	2200      	movs	r2, #0
   d49e4:	4611      	mov	r1, r2
   d49e6:	6840      	ldr	r0, [r0, #4]
   d49e8:	f7ff bf66 	b.w	d48b8 <network_connecting>

000d49ec <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d49ec:	2200      	movs	r2, #0
   d49ee:	2102      	movs	r1, #2
   d49f0:	6840      	ldr	r0, [r0, #4]
   d49f2:	f7ff bf69 	b.w	d48c8 <network_disconnect>

000d49f6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d49f6:	2300      	movs	r3, #0
   d49f8:	461a      	mov	r2, r3
   d49fa:	6840      	ldr	r0, [r0, #4]
   d49fc:	f7ff bf54 	b.w	d48a8 <network_connect>

000d4a00 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4a00:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4a02:	2203      	movs	r2, #3
   d4a04:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4a06:	4a02      	ldr	r2, [pc, #8]	; (d4a10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4a08:	601a      	str	r2, [r3, #0]
   d4a0a:	4770      	bx	lr
   d4a0c:	2003e4c8 	.word	0x2003e4c8
   d4a10:	000d6060 	.word	0x000d6060

000d4a14 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4a14:	4770      	bx	lr

000d4a16 <_ZN8SPIClassD0Ev>:
   d4a16:	b510      	push	{r4, lr}
   d4a18:	2110      	movs	r1, #16
   d4a1a:	4604      	mov	r4, r0
   d4a1c:	f000 fd79 	bl	d5512 <_ZdlPvj>
   d4a20:	4620      	mov	r0, r4
   d4a22:	bd10      	pop	{r4, pc}

000d4a24 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4a24:	b570      	push	{r4, r5, r6, lr}
   d4a26:	4b08      	ldr	r3, [pc, #32]	; (d4a48 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4a28:	6003      	str	r3, [r0, #0]
   d4a2a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4a2c:	2500      	movs	r5, #0
   d4a2e:	460e      	mov	r6, r1
   d4a30:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4a34:	f7ff fe54 	bl	d46e0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4a38:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4a3a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4a3c:	f7ff fe18 	bl	d4670 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4a40:	60a5      	str	r5, [r4, #8]
}
   d4a42:	4620      	mov	r0, r4
   d4a44:	bd70      	pop	{r4, r5, r6, pc}
   d4a46:	bf00      	nop
   d4a48:	000d6094 	.word	0x000d6094

000d4a4c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4a4c:	7900      	ldrb	r0, [r0, #4]
   d4a4e:	f7ff be17 	b.w	d4680 <HAL_SPI_Is_Enabled>
	...

000d4a54 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4a54:	4b04      	ldr	r3, [pc, #16]	; (d4a68 <_GLOBAL__sub_I_System+0x14>)
   d4a56:	2000      	movs	r0, #0
   d4a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4a5c:	7018      	strb	r0, [r3, #0]
   d4a5e:	8058      	strh	r0, [r3, #2]
   d4a60:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4a62:	f7ff befd 	b.w	d4860 <set_system_mode>
   d4a66:	bf00      	nop
   d4a68:	2003e4d0 	.word	0x2003e4d0

000d4a6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4a6c:	4802      	ldr	r0, [pc, #8]	; (d4a78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4a6e:	2300      	movs	r3, #0
   d4a70:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4a72:	f7ff be3d 	b.w	d46f0 <os_mutex_recursive_create>
   d4a76:	bf00      	nop
   d4a78:	2003e4d8 	.word	0x2003e4d8

000d4a7c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a7e:	4606      	mov	r6, r0
   d4a80:	460d      	mov	r5, r1
   d4a82:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4a84:	2400      	movs	r4, #0
  while (size--) {
   d4a86:	42bd      	cmp	r5, r7
   d4a88:	d00c      	beq.n	d4aa4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4a8a:	6833      	ldr	r3, [r6, #0]
   d4a8c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4a90:	689b      	ldr	r3, [r3, #8]
   d4a92:	4630      	mov	r0, r6
   d4a94:	4798      	blx	r3
     if (chunk>=0)
   d4a96:	2800      	cmp	r0, #0
   d4a98:	db01      	blt.n	d4a9e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4a9a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4a9c:	e7f3      	b.n	d4a86 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4a9e:	2c00      	cmp	r4, #0
   d4aa0:	bf08      	it	eq
   d4aa2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4aa4:	4620      	mov	r0, r4
   d4aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4aa8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4aa8:	b570      	push	{r4, r5, r6, lr}
   d4aaa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4aac:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4aae:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4ab0:	b149      	cbz	r1, d4ac6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4ab2:	f001 fa8d 	bl	d5fd0 <strlen>
   d4ab6:	682b      	ldr	r3, [r5, #0]
   d4ab8:	4602      	mov	r2, r0
   d4aba:	4621      	mov	r1, r4
   d4abc:	4628      	mov	r0, r5
   d4abe:	68db      	ldr	r3, [r3, #12]
    }
   d4ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4ac4:	4718      	bx	r3
    }
   d4ac6:	bd70      	pop	{r4, r5, r6, pc}

000d4ac8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4ac8:	6803      	ldr	r3, [r0, #0]
   d4aca:	689b      	ldr	r3, [r3, #8]
   d4acc:	4718      	bx	r3

000d4ace <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4ace:	b530      	push	{r4, r5, lr}
   d4ad0:	b08b      	sub	sp, #44	; 0x2c
   d4ad2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ad4:	2100      	movs	r1, #0
   d4ad6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4ada:	2a01      	cmp	r2, #1
   d4adc:	bf98      	it	ls
   d4ade:	220a      	movls	r2, #10
   d4ae0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4ae4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4ae8:	fb05 3312 	mls	r3, r5, r2, r3
   d4aec:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4af0:	2b09      	cmp	r3, #9
   d4af2:	bf94      	ite	ls
   d4af4:	3330      	addls	r3, #48	; 0x30
   d4af6:	3337      	addhi	r3, #55	; 0x37
   d4af8:	b2db      	uxtb	r3, r3
   d4afa:	4621      	mov	r1, r4
   d4afc:	f804 3901 	strb.w	r3, [r4], #-1
   d4b00:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4b02:	2d00      	cmp	r5, #0
   d4b04:	d1ee      	bne.n	d4ae4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4b06:	f7ff ffcf 	bl	d4aa8 <_ZN5Print5writeEPKc>
}
   d4b0a:	b00b      	add	sp, #44	; 0x2c
   d4b0c:	bd30      	pop	{r4, r5, pc}

000d4b0e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4b0e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4b10:	b92a      	cbnz	r2, d4b1e <_ZN5Print5printEmi+0x10>
   d4b12:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4b14:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4b18:	689b      	ldr	r3, [r3, #8]
   d4b1a:	b2c9      	uxtb	r1, r1
   d4b1c:	4718      	bx	r3
  else return printNumber(n, base);
   d4b1e:	b2d2      	uxtb	r2, r2
}
   d4b20:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4b24:	f7ff bfd3 	b.w	d4ace <_ZN5Print11printNumberEmh>

000d4b28 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4b28:	f7ff bff1 	b.w	d4b0e <_ZN5Print5printEmi>

000d4b2c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4b2c:	4b01      	ldr	r3, [pc, #4]	; (d4b34 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4b2e:	4a02      	ldr	r2, [pc, #8]	; (d4b38 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4b30:	601a      	str	r2, [r3, #0]
   d4b32:	4770      	bx	lr
   d4b34:	2003e4dc 	.word	0x2003e4dc
   d4b38:	000d610f 	.word	0x000d610f

000d4b3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4b3c:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4b3e:	681a      	ldr	r2, [r3, #0]
   d4b40:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4b42:	601a      	str	r2, [r3, #0]
   d4b44:	4770      	bx	lr
   d4b46:	bf00      	nop
   d4b48:	2003e3f0 	.word	0x2003e3f0
   d4b4c:	2003e4e0 	.word	0x2003e4e0

000d4b50 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d4b50:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d4b52:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d4b54:	d007      	beq.n	d4b66 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d4b56:	9d03      	ldr	r5, [sp, #12]
   d4b58:	1a44      	subs	r4, r0, r1
   d4b5a:	1aed      	subs	r5, r5, r3
   d4b5c:	436c      	muls	r4, r5
   d4b5e:	1a52      	subs	r2, r2, r1
   d4b60:	fb94 f4f2 	sdiv	r4, r4, r2
   d4b64:	18e0      	adds	r0, r4, r3
}
   d4b66:	bd30      	pop	{r4, r5, pc}

000d4b68 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4b68:	2100      	movs	r1, #0
   d4b6a:	f7ff be81 	b.w	d4870 <system_delay_ms>

000d4b6e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b6e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4b70:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b72:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4b74:	b113      	cbz	r3, d4b7c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b76:	2203      	movs	r2, #3
   d4b78:	4601      	mov	r1, r0
   d4b7a:	4798      	blx	r3
    }
   d4b7c:	4620      	mov	r0, r4
   d4b7e:	bd10      	pop	{r4, pc}

000d4b80 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4b80:	b510      	push	{r4, lr}
   d4b82:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4b84:	f7ff fff3 	bl	d4b6e <_ZNSt14_Function_baseD1Ev>
   d4b88:	4620      	mov	r0, r4
   d4b8a:	bd10      	pop	{r4, pc}

000d4b8c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b8c:	4803      	ldr	r0, [pc, #12]	; (d4b9c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4b8e:	4a04      	ldr	r2, [pc, #16]	; (d4ba0 <_GLOBAL__sub_I_RGB+0x14>)
   d4b90:	4904      	ldr	r1, [pc, #16]	; (d4ba4 <_GLOBAL__sub_I_RGB+0x18>)
   d4b92:	2300      	movs	r3, #0
   d4b94:	6083      	str	r3, [r0, #8]
   d4b96:	f000 bcb7 	b.w	d5508 <__aeabi_atexit>
   d4b9a:	bf00      	nop
   d4b9c:	2003e4e4 	.word	0x2003e4e4
   d4ba0:	2003e458 	.word	0x2003e458
   d4ba4:	000d4b81 	.word	0x000d4b81

000d4ba8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4ba8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4baa:	4b0c      	ldr	r3, [pc, #48]	; (d4bdc <serialEventRun+0x34>)
   d4bac:	b133      	cbz	r3, d4bbc <serialEventRun+0x14>
   d4bae:	f000 f935 	bl	d4e1c <_Z16_fetch_usbserialv>
   d4bb2:	6803      	ldr	r3, [r0, #0]
   d4bb4:	691b      	ldr	r3, [r3, #16]
   d4bb6:	4798      	blx	r3
   d4bb8:	2800      	cmp	r0, #0
   d4bba:	dc09      	bgt.n	d4bd0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4bbc:	4b08      	ldr	r3, [pc, #32]	; (d4be0 <serialEventRun+0x38>)
   d4bbe:	b163      	cbz	r3, d4bda <serialEventRun+0x32>
   d4bc0:	f000 f9ae 	bl	d4f20 <_Z22__fetch_global_Serial1v>
   d4bc4:	6803      	ldr	r3, [r0, #0]
   d4bc6:	691b      	ldr	r3, [r3, #16]
   d4bc8:	4798      	blx	r3
   d4bca:	2800      	cmp	r0, #0
   d4bcc:	dc03      	bgt.n	d4bd6 <serialEventRun+0x2e>
   d4bce:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4bd0:	f3af 8000 	nop.w
   d4bd4:	e7f2      	b.n	d4bbc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4bd6:	f3af 8000 	nop.w
   d4bda:	bd08      	pop	{r3, pc}
	...

000d4be4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4be4:	b508      	push	{r3, lr}
	serialEventRun();
   d4be6:	f7ff ffdf 	bl	d4ba8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4bea:	f7ff fd59 	bl	d46a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4bee:	4b01      	ldr	r3, [pc, #4]	; (d4bf4 <_post_loop+0x10>)
   d4bf0:	6018      	str	r0, [r3, #0]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	2003e734 	.word	0x2003e734

000d4bf8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4bf8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4bfa:	2300      	movs	r3, #0
   d4bfc:	9300      	str	r3, [sp, #0]
   d4bfe:	461a      	mov	r2, r3
   d4c00:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4c04:	f7ff fe46 	bl	d4894 <system_ctrl_set_result>
}
   d4c08:	b003      	add	sp, #12
   d4c0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4c10 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4c10:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4c12:	8843      	ldrh	r3, [r0, #2]
   d4c14:	2b0a      	cmp	r3, #10
   d4c16:	d008      	beq.n	d4c2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4c18:	2b50      	cmp	r3, #80	; 0x50
   d4c1a:	d109      	bne.n	d4c30 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4c1c:	4b09      	ldr	r3, [pc, #36]	; (d4c44 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4c1e:	681b      	ldr	r3, [r3, #0]
   d4c20:	b13b      	cbz	r3, d4c32 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4c22:	b003      	add	sp, #12
   d4c24:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4c28:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4c2a:	f7ff ffe5 	bl	d4bf8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4c2e:	e006      	b.n	d4c3e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4c30:	2300      	movs	r3, #0
   d4c32:	9300      	str	r3, [sp, #0]
   d4c34:	461a      	mov	r2, r3
   d4c36:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4c3a:	f7ff fe2b 	bl	d4894 <system_ctrl_set_result>
        break;
    }
}
   d4c3e:	b003      	add	sp, #12
   d4c40:	f85d fb04 	ldr.w	pc, [sp], #4
   d4c44:	2003e4f4 	.word	0x2003e4f4

000d4c48 <module_user_init_hook>:

void module_user_init_hook()
{
   d4c48:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4c4a:	f7ff fd21 	bl	d4690 <HAL_RNG_GetRandomNumber>
   d4c4e:	4604      	mov	r4, r0
    srand(seed);
   d4c50:	f001 f996 	bl	d5f80 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4c54:	4b07      	ldr	r3, [pc, #28]	; (d4c74 <module_user_init_hook+0x2c>)
   d4c56:	b113      	cbz	r3, d4c5e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4c58:	4620      	mov	r0, r4
   d4c5a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4c5e:	2100      	movs	r1, #0
   d4c60:	4804      	ldr	r0, [pc, #16]	; (d4c74 <module_user_init_hook+0x2c>)
   d4c62:	f7ff fe81 	bl	d4968 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c66:	2100      	movs	r1, #0
   d4c68:	4803      	ldr	r0, [pc, #12]	; (d4c78 <module_user_init_hook+0x30>)
}
   d4c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c6e:	f7ff be07 	b.w	d4880 <system_ctrl_set_app_request_handler>
   d4c72:	bf00      	nop
   d4c74:	00000000 	.word	0x00000000
   d4c78:	000d4c11 	.word	0x000d4c11

000d4c7c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4c7c:	4770      	bx	lr

000d4c7e <_ZN9IPAddressD0Ev>:
   d4c7e:	b510      	push	{r4, lr}
   d4c80:	2118      	movs	r1, #24
   d4c82:	4604      	mov	r4, r0
   d4c84:	f000 fc45 	bl	d5512 <_ZdlPvj>
   d4c88:	4620      	mov	r0, r4
   d4c8a:	bd10      	pop	{r4, pc}

000d4c8c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c8e:	7d03      	ldrb	r3, [r0, #20]
   d4c90:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c92:	b08d      	sub	sp, #52	; 0x34
   d4c94:	460e      	mov	r6, r1
   d4c96:	f100 0704 	add.w	r7, r0, #4
   d4c9a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c9e:	d002      	beq.n	d4ca6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4ca0:	f100 0508 	add.w	r5, r0, #8
   d4ca4:	e018      	b.n	d4cd8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4ca6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4ca8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4caa:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4cae:	232f      	movs	r3, #47	; 0x2f
   d4cb0:	462a      	mov	r2, r5
   d4cb2:	200a      	movs	r0, #10
   d4cb4:	f7ff fd24 	bl	d4700 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4cb8:	4628      	mov	r0, r5
   d4cba:	f001 f989 	bl	d5fd0 <strlen>
   d4cbe:	6833      	ldr	r3, [r6, #0]
   d4cc0:	4602      	mov	r2, r0
   d4cc2:	68db      	ldr	r3, [r3, #12]
   d4cc4:	4629      	mov	r1, r5
   d4cc6:	4630      	mov	r0, r6
   d4cc8:	4798      	blx	r3
   d4cca:	e00f      	b.n	d4cec <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4ccc:	b124      	cbz	r4, d4cd8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4cce:	212e      	movs	r1, #46	; 0x2e
   d4cd0:	4630      	mov	r0, r6
   d4cd2:	f7ff fef9 	bl	d4ac8 <_ZN5Print5printEc>
   d4cd6:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4cd8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4cdc:	220a      	movs	r2, #10
   d4cde:	4630      	mov	r0, r6
   d4ce0:	f7ff ff22 	bl	d4b28 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ce4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ce6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ce8:	d1f0      	bne.n	d4ccc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4cea:	4620      	mov	r0, r4
    }
    return n;
}
   d4cec:	b00d      	add	sp, #52	; 0x34
   d4cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4cf0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4cf0:	b510      	push	{r4, lr}
   d4cf2:	4b05      	ldr	r3, [pc, #20]	; (d4d08 <_ZN9IPAddressC1Ev+0x18>)
   d4cf4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4cf6:	2211      	movs	r2, #17
   d4cf8:	f840 3b04 	str.w	r3, [r0], #4
   d4cfc:	2100      	movs	r1, #0
   d4cfe:	f001 f936 	bl	d5f6e <memset>
{
    clear();
}
   d4d02:	4620      	mov	r0, r4
   d4d04:	bd10      	pop	{r4, pc}
   d4d06:	bf00      	nop
   d4d08:	000d61b0 	.word	0x000d61b0

000d4d0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4d0c:	4603      	mov	r3, r0
   d4d0e:	4a07      	ldr	r2, [pc, #28]	; (d4d2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4d10:	b510      	push	{r4, lr}
   d4d12:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4d16:	f101 0210 	add.w	r2, r1, #16
   d4d1a:	f851 4b04 	ldr.w	r4, [r1], #4
   d4d1e:	f843 4b04 	str.w	r4, [r3], #4
   d4d22:	4291      	cmp	r1, r2
   d4d24:	d1f9      	bne.n	d4d1a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4d26:	780a      	ldrb	r2, [r1, #0]
   d4d28:	701a      	strb	r2, [r3, #0]
}
   d4d2a:	bd10      	pop	{r4, pc}
   d4d2c:	000d61b0 	.word	0x000d61b0

000d4d30 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4d30:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4d32:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4d36:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4d3a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4d3e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4d42:	2304      	movs	r3, #4
   d4d44:	6041      	str	r1, [r0, #4]
   d4d46:	7503      	strb	r3, [r0, #20]
   d4d48:	bd10      	pop	{r4, pc}

000d4d4a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4d4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4d4c:	780d      	ldrb	r5, [r1, #0]
   d4d4e:	788b      	ldrb	r3, [r1, #2]
   d4d50:	784a      	ldrb	r2, [r1, #1]
   d4d52:	78c9      	ldrb	r1, [r1, #3]
   d4d54:	9100      	str	r1, [sp, #0]
   d4d56:	4629      	mov	r1, r5
   d4d58:	f7ff ffea 	bl	d4d30 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4d5c:	b003      	add	sp, #12
   d4d5e:	bd30      	pop	{r4, r5, pc}

000d4d60 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4d60:	7441      	strb	r1, [r0, #17]
   d4d62:	4770      	bx	lr

000d4d64 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4d64:	4770      	bx	lr

000d4d66 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4d66:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4d68:	2100      	movs	r1, #0
   d4d6a:	7c00      	ldrb	r0, [r0, #16]
   d4d6c:	f7ff fd60 	bl	d4830 <HAL_USB_USART_Receive_Data>
}
   d4d70:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d74:	bf28      	it	cs
   d4d76:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d7a:	bd08      	pop	{r3, pc}

000d4d7c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4d7c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4d7e:	2101      	movs	r1, #1
   d4d80:	7c00      	ldrb	r0, [r0, #16]
   d4d82:	f7ff fd55 	bl	d4830 <HAL_USB_USART_Receive_Data>
}
   d4d86:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d8a:	bf28      	it	cs
   d4d8c:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d90:	bd08      	pop	{r3, pc}

000d4d92 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4d92:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4d94:	7c00      	ldrb	r0, [r0, #16]
   d4d96:	f7ff fd43 	bl	d4820 <HAL_USB_USART_Available_Data_For_Write>
}
   d4d9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d9e:	bd08      	pop	{r3, pc}

000d4da0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4da0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4da2:	7c00      	ldrb	r0, [r0, #16]
   d4da4:	f7ff fd34 	bl	d4810 <HAL_USB_USART_Available_Data>
}
   d4da8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4dac:	bd08      	pop	{r3, pc}

000d4dae <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4dae:	7c00      	ldrb	r0, [r0, #16]
   d4db0:	f7ff bd4e 	b.w	d4850 <HAL_USB_USART_Flush_Data>

000d4db4 <_ZN9USBSerialD0Ev>:
   d4db4:	b510      	push	{r4, lr}
   d4db6:	2114      	movs	r1, #20
   d4db8:	4604      	mov	r4, r0
   d4dba:	f000 fbaa 	bl	d5512 <_ZdlPvj>
   d4dbe:	4620      	mov	r0, r4
   d4dc0:	bd10      	pop	{r4, pc}

000d4dc2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4dc2:	b538      	push	{r3, r4, r5, lr}
   d4dc4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4dc6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4dc8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4dca:	f7ff fd29 	bl	d4820 <HAL_USB_USART_Available_Data_For_Write>
   d4dce:	2800      	cmp	r0, #0
   d4dd0:	dc01      	bgt.n	d4dd6 <_ZN9USBSerial5writeEh+0x14>
   d4dd2:	7c60      	ldrb	r0, [r4, #17]
   d4dd4:	b128      	cbz	r0, d4de2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4dd6:	4629      	mov	r1, r5
   d4dd8:	7c20      	ldrb	r0, [r4, #16]
   d4dda:	f7ff fd31 	bl	d4840 <HAL_USB_USART_Send_Data>
   d4dde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4de2:	bd38      	pop	{r3, r4, r5, pc}

000d4de4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4de4:	b510      	push	{r4, lr}
   d4de6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4de8:	2300      	movs	r3, #0
   d4dea:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4df0:	60a3      	str	r3, [r4, #8]
   d4df2:	4b05      	ldr	r3, [pc, #20]	; (d4e08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4df4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4df6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4df8:	4608      	mov	r0, r1
{
  _serial = serial;
   d4dfa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4dfc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4dfe:	4611      	mov	r1, r2
   d4e00:	f7ff fcfe 	bl	d4800 <HAL_USB_USART_Init>
}
   d4e04:	4620      	mov	r0, r4
   d4e06:	bd10      	pop	{r4, pc}
   d4e08:	000d61c4 	.word	0x000d61c4

000d4e0c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4e0c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4e0e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4e10:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4e12:	2100      	movs	r1, #0
   d4e14:	f001 f8ab 	bl	d5f6e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4e18:	4620      	mov	r0, r4
   d4e1a:	bd10      	pop	{r4, pc}

000d4e1c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4e1c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4e1e:	4d0e      	ldr	r5, [pc, #56]	; (d4e58 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4e20:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4e22:	a801      	add	r0, sp, #4
   d4e24:	f7ff fff2 	bl	d4e0c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4e28:	6829      	ldr	r1, [r5, #0]
   d4e2a:	f011 0401 	ands.w	r4, r1, #1
   d4e2e:	d110      	bne.n	d4e52 <_Z16_fetch_usbserialv+0x36>
   d4e30:	4628      	mov	r0, r5
   d4e32:	f7ff f938 	bl	d40a6 <__cxa_guard_acquire>
   d4e36:	b160      	cbz	r0, d4e52 <_Z16_fetch_usbserialv+0x36>
   d4e38:	aa01      	add	r2, sp, #4
   d4e3a:	4621      	mov	r1, r4
   d4e3c:	4807      	ldr	r0, [pc, #28]	; (d4e5c <_Z16_fetch_usbserialv+0x40>)
   d4e3e:	f7ff ffd1 	bl	d4de4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4e42:	4628      	mov	r0, r5
   d4e44:	f7ff f934 	bl	d40b0 <__cxa_guard_release>
   d4e48:	4a05      	ldr	r2, [pc, #20]	; (d4e60 <_Z16_fetch_usbserialv+0x44>)
   d4e4a:	4906      	ldr	r1, [pc, #24]	; (d4e64 <_Z16_fetch_usbserialv+0x48>)
   d4e4c:	4803      	ldr	r0, [pc, #12]	; (d4e5c <_Z16_fetch_usbserialv+0x40>)
   d4e4e:	f000 fb5b 	bl	d5508 <__aeabi_atexit>
	return _usbserial;
}
   d4e52:	4802      	ldr	r0, [pc, #8]	; (d4e5c <_Z16_fetch_usbserialv+0x40>)
   d4e54:	b007      	add	sp, #28
   d4e56:	bd30      	pop	{r4, r5, pc}
   d4e58:	2003e4f8 	.word	0x2003e4f8
   d4e5c:	2003e4fc 	.word	0x2003e4fc
   d4e60:	2003e458 	.word	0x2003e458
   d4e64:	000d4d65 	.word	0x000d4d65

000d4e68 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4e68:	4770      	bx	lr

000d4e6a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4e6a:	7441      	strb	r1, [r0, #17]
   d4e6c:	4770      	bx	lr

000d4e6e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4e6e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4e70:	7c00      	ldrb	r0, [r0, #16]
   d4e72:	f7ff fc85 	bl	d4780 <HAL_USART_Available_Data_For_Write>
}
   d4e76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e7a:	bd08      	pop	{r3, pc}

000d4e7c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4e7c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4e7e:	7c00      	ldrb	r0, [r0, #16]
   d4e80:	f7ff fc56 	bl	d4730 <HAL_USART_Available_Data>
}
   d4e84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e88:	bd08      	pop	{r3, pc}

000d4e8a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4e8a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4e8c:	7c00      	ldrb	r0, [r0, #16]
   d4e8e:	f7ff fc5f 	bl	d4750 <HAL_USART_Peek_Data>
}
   d4e92:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e96:	bf28      	it	cs
   d4e98:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e9c:	bd08      	pop	{r3, pc}

000d4e9e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4e9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4ea0:	7c00      	ldrb	r0, [r0, #16]
   d4ea2:	f7ff fc4d 	bl	d4740 <HAL_USART_Read_Data>
}
   d4ea6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4eaa:	bf28      	it	cs
   d4eac:	f04f 30ff 	movcs.w	r0, #4294967295
   d4eb0:	bd08      	pop	{r3, pc}

000d4eb2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4eb2:	7c00      	ldrb	r0, [r0, #16]
   d4eb4:	f7ff bc54 	b.w	d4760 <HAL_USART_Flush_Data>

000d4eb8 <_ZN11USARTSerialD0Ev>:
   d4eb8:	b510      	push	{r4, lr}
   d4eba:	2114      	movs	r1, #20
   d4ebc:	4604      	mov	r4, r0
   d4ebe:	f000 fb28 	bl	d5512 <_ZdlPvj>
   d4ec2:	4620      	mov	r0, r4
   d4ec4:	bd10      	pop	{r4, pc}

000d4ec6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4ec6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4ec8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4eca:	4604      	mov	r4, r0
   d4ecc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4ece:	b925      	cbnz	r5, d4eda <_ZN11USARTSerial5writeEh+0x14>
   d4ed0:	7c00      	ldrb	r0, [r0, #16]
   d4ed2:	f7ff fc55 	bl	d4780 <HAL_USART_Available_Data_For_Write>
   d4ed6:	2800      	cmp	r0, #0
   d4ed8:	dd05      	ble.n	d4ee6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4eda:	4631      	mov	r1, r6
   d4edc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4ee2:	f7ff bc1d 	b.w	d4720 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4ee6:	4628      	mov	r0, r5
   d4ee8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4eec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4eec:	b510      	push	{r4, lr}
   d4eee:	4604      	mov	r4, r0
   d4ef0:	4608      	mov	r0, r1
   d4ef2:	4611      	mov	r1, r2
   d4ef4:	2200      	movs	r2, #0
   d4ef6:	6062      	str	r2, [r4, #4]
   d4ef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4efc:	60a2      	str	r2, [r4, #8]
   d4efe:	4a05      	ldr	r2, [pc, #20]	; (d4f14 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4f00:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4f02:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4f04:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4f06:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4f08:	461a      	mov	r2, r3
   d4f0a:	f7ff fc01 	bl	d4710 <HAL_USART_Init>
}
   d4f0e:	4620      	mov	r0, r4
   d4f10:	bd10      	pop	{r4, pc}
   d4f12:	bf00      	nop
   d4f14:	000d61f4 	.word	0x000d61f4

000d4f18 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4f18:	7c00      	ldrb	r0, [r0, #16]
   d4f1a:	f7ff bc29 	b.w	d4770 <HAL_USART_Is_Enabled>
	...

000d4f20 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d4f22:	4c19      	ldr	r4, [pc, #100]	; (d4f88 <_Z22__fetch_global_Serial1v+0x68>)
   d4f24:	6825      	ldr	r5, [r4, #0]
   d4f26:	b94d      	cbnz	r5, d4f3c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d4f28:	2084      	movs	r0, #132	; 0x84
   d4f2a:	f7ff f8b6 	bl	d409a <_Znwj>
   d4f2e:	4606      	mov	r6, r0
   d4f30:	b118      	cbz	r0, d4f3a <_Z22__fetch_global_Serial1v+0x1a>
   d4f32:	2284      	movs	r2, #132	; 0x84
   d4f34:	4629      	mov	r1, r5
   d4f36:	f001 f81a 	bl	d5f6e <memset>
   d4f3a:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d4f3c:	4d13      	ldr	r5, [pc, #76]	; (d4f8c <_Z22__fetch_global_Serial1v+0x6c>)
   d4f3e:	682e      	ldr	r6, [r5, #0]
   d4f40:	b94e      	cbnz	r6, d4f56 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d4f42:	2084      	movs	r0, #132	; 0x84
   d4f44:	f7ff f8a9 	bl	d409a <_Znwj>
   d4f48:	4607      	mov	r7, r0
   d4f4a:	b118      	cbz	r0, d4f54 <_Z22__fetch_global_Serial1v+0x34>
   d4f4c:	2284      	movs	r2, #132	; 0x84
   d4f4e:	4631      	mov	r1, r6
   d4f50:	f001 f80d 	bl	d5f6e <memset>
   d4f54:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d4f56:	4f0e      	ldr	r7, [pc, #56]	; (d4f90 <_Z22__fetch_global_Serial1v+0x70>)
   d4f58:	6839      	ldr	r1, [r7, #0]
   d4f5a:	f011 0601 	ands.w	r6, r1, #1
   d4f5e:	d111      	bne.n	d4f84 <_Z22__fetch_global_Serial1v+0x64>
   d4f60:	4638      	mov	r0, r7
   d4f62:	f7ff f8a0 	bl	d40a6 <__cxa_guard_acquire>
   d4f66:	b168      	cbz	r0, d4f84 <_Z22__fetch_global_Serial1v+0x64>
   d4f68:	6822      	ldr	r2, [r4, #0]
   d4f6a:	682b      	ldr	r3, [r5, #0]
   d4f6c:	4809      	ldr	r0, [pc, #36]	; (d4f94 <_Z22__fetch_global_Serial1v+0x74>)
   d4f6e:	4631      	mov	r1, r6
   d4f70:	f7ff ffbc 	bl	d4eec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4f74:	4638      	mov	r0, r7
   d4f76:	f7ff f89b 	bl	d40b0 <__cxa_guard_release>
   d4f7a:	4a07      	ldr	r2, [pc, #28]	; (d4f98 <_Z22__fetch_global_Serial1v+0x78>)
   d4f7c:	4907      	ldr	r1, [pc, #28]	; (d4f9c <_Z22__fetch_global_Serial1v+0x7c>)
   d4f7e:	4805      	ldr	r0, [pc, #20]	; (d4f94 <_Z22__fetch_global_Serial1v+0x74>)
   d4f80:	f000 fac2 	bl	d5508 <__aeabi_atexit>
#endif
	return serial1;
}
   d4f84:	4803      	ldr	r0, [pc, #12]	; (d4f94 <_Z22__fetch_global_Serial1v+0x74>)
   d4f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4f88:	2003e52c 	.word	0x2003e52c
   d4f8c:	2003e524 	.word	0x2003e524
   d4f90:	2003e528 	.word	0x2003e528
   d4f94:	2003e510 	.word	0x2003e510
   d4f98:	2003e458 	.word	0x2003e458
   d4f9c:	000d4e69 	.word	0x000d4e69

000d4fa0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4fa0:	4770      	bx	lr

000d4fa2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4fa4:	4606      	mov	r6, r0
   d4fa6:	4615      	mov	r5, r2
   d4fa8:	460c      	mov	r4, r1
   d4faa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4fac:	42bc      	cmp	r4, r7
   d4fae:	d006      	beq.n	d4fbe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4fb0:	6833      	ldr	r3, [r6, #0]
   d4fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4fb6:	689b      	ldr	r3, [r3, #8]
   d4fb8:	4630      	mov	r0, r6
   d4fba:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4fbc:	e7f6      	b.n	d4fac <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4fbe:	4628      	mov	r0, r5
   d4fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fc2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4fc2:	2200      	movs	r2, #0
   d4fc4:	7c00      	ldrb	r0, [r0, #16]
   d4fc6:	f7ff bbe3 	b.w	d4790 <HAL_I2C_Write_Data>

000d4fca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4fca:	2100      	movs	r1, #0
   d4fcc:	7c00      	ldrb	r0, [r0, #16]
   d4fce:	f7ff bbe7 	b.w	d47a0 <HAL_I2C_Available_Data>

000d4fd2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4fd2:	2100      	movs	r1, #0
   d4fd4:	7c00      	ldrb	r0, [r0, #16]
   d4fd6:	f7ff bbeb 	b.w	d47b0 <HAL_I2C_Read_Data>

000d4fda <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4fda:	2100      	movs	r1, #0
   d4fdc:	7c00      	ldrb	r0, [r0, #16]
   d4fde:	f7ff bbef 	b.w	d47c0 <HAL_I2C_Peek_Data>

000d4fe2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4fe2:	2100      	movs	r1, #0
   d4fe4:	7c00      	ldrb	r0, [r0, #16]
   d4fe6:	f7ff bbf3 	b.w	d47d0 <HAL_I2C_Flush_Data>

000d4fea <_ZN7TwoWireD0Ev>:
   d4fea:	b510      	push	{r4, lr}
   d4fec:	2114      	movs	r1, #20
   d4fee:	4604      	mov	r4, r0
   d4ff0:	f000 fa8f 	bl	d5512 <_ZdlPvj>
   d4ff4:	4620      	mov	r0, r4
   d4ff6:	bd10      	pop	{r4, pc}

000d4ff8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4ff8:	b510      	push	{r4, lr}
   d4ffa:	4604      	mov	r4, r0
   d4ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5000:	4608      	mov	r0, r1
   d5002:	60a3      	str	r3, [r4, #8]
   d5004:	2100      	movs	r1, #0
   d5006:	4b04      	ldr	r3, [pc, #16]	; (d5018 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5008:	7420      	strb	r0, [r4, #16]
   d500a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d500c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d500e:	f7ff fbef 	bl	d47f0 <HAL_I2C_Init>

}
   d5012:	4620      	mov	r0, r4
   d5014:	bd10      	pop	{r4, pc}
   d5016:	bf00      	nop
   d5018:	000d6224 	.word	0x000d6224

000d501c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d501c:	2100      	movs	r1, #0
   d501e:	7c00      	ldrb	r0, [r0, #16]
   d5020:	f7ff bbde 	b.w	d47e0 <HAL_I2C_Is_Enabled>

000d5024 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5024:	2200      	movs	r2, #0
   d5026:	4611      	mov	r1, r2
   d5028:	6840      	ldr	r0, [r0, #4]
   d502a:	f7ff bc75 	b.w	d4918 <network_listening>

000d502e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d502e:	2200      	movs	r2, #0
   d5030:	4611      	mov	r1, r2
   d5032:	6840      	ldr	r0, [r0, #4]
   d5034:	f7ff bc88 	b.w	d4948 <network_get_listen_timeout>

000d5038 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5038:	2200      	movs	r2, #0
   d503a:	6840      	ldr	r0, [r0, #4]
   d503c:	f7ff bc7c 	b.w	d4938 <network_set_listen_timeout>

000d5040 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5040:	2200      	movs	r2, #0
   d5042:	f081 0101 	eor.w	r1, r1, #1
   d5046:	6840      	ldr	r0, [r0, #4]
   d5048:	f7ff bc5e 	b.w	d4908 <network_listen>

000d504c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d504c:	2300      	movs	r3, #0
   d504e:	461a      	mov	r2, r3
   d5050:	2101      	movs	r1, #1
   d5052:	6840      	ldr	r0, [r0, #4]
   d5054:	f7ff bc50 	b.w	d48f8 <network_off>

000d5058 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5058:	2300      	movs	r3, #0
   d505a:	461a      	mov	r2, r3
   d505c:	4619      	mov	r1, r3
   d505e:	6840      	ldr	r0, [r0, #4]
   d5060:	f7ff bc42 	b.w	d48e8 <network_on>

000d5064 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5064:	2200      	movs	r2, #0
   d5066:	4611      	mov	r1, r2
   d5068:	6840      	ldr	r0, [r0, #4]
   d506a:	f7ff bc35 	b.w	d48d8 <network_ready>

000d506e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d506e:	2200      	movs	r2, #0
   d5070:	4611      	mov	r1, r2
   d5072:	6840      	ldr	r0, [r0, #4]
   d5074:	f7ff bc20 	b.w	d48b8 <network_connecting>

000d5078 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5078:	2200      	movs	r2, #0
   d507a:	2102      	movs	r1, #2
   d507c:	6840      	ldr	r0, [r0, #4]
   d507e:	f7ff bc23 	b.w	d48c8 <network_disconnect>

000d5082 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5082:	2300      	movs	r3, #0
   d5084:	461a      	mov	r2, r3
   d5086:	6840      	ldr	r0, [r0, #4]
   d5088:	f7ff bc0e 	b.w	d48a8 <network_connect>

000d508c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d508c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d508e:	4605      	mov	r5, r0
   d5090:	b188      	cbz	r0, d50b6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5092:	6804      	ldr	r4, [r0, #0]
   d5094:	b14c      	cbz	r4, d50aa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5096:	68a3      	ldr	r3, [r4, #8]
   d5098:	b11b      	cbz	r3, d50a2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d509a:	2203      	movs	r2, #3
   d509c:	4621      	mov	r1, r4
   d509e:	4620      	mov	r0, r4
   d50a0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50a2:	2110      	movs	r1, #16
   d50a4:	4620      	mov	r0, r4
   d50a6:	f000 fa34 	bl	d5512 <_ZdlPvj>
   d50aa:	4628      	mov	r0, r5
   d50ac:	2114      	movs	r1, #20
      }
   d50ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50b2:	f000 ba2e 	b.w	d5512 <_ZdlPvj>
   d50b6:	bd38      	pop	{r3, r4, r5, pc}

000d50b8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d50b8:	b110      	cbz	r0, d50c0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d50ba:	6803      	ldr	r3, [r0, #0]
   d50bc:	685b      	ldr	r3, [r3, #4]
   d50be:	4718      	bx	r3
   d50c0:	4770      	bx	lr

000d50c2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d50c2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d50c4:	6803      	ldr	r3, [r0, #0]
   d50c6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d50c8:	b1bb      	cbz	r3, d50fa <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d50ca:	6858      	ldr	r0, [r3, #4]
   d50cc:	f7ff faf0 	bl	d46b0 <os_thread_is_current>
   d50d0:	b978      	cbnz	r0, d50f2 <_ZN6ThreadD1Ev+0x30>
   d50d2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d50d4:	7c5a      	ldrb	r2, [r3, #17]
   d50d6:	b912      	cbnz	r2, d50de <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d50d8:	6858      	ldr	r0, [r3, #4]
   d50da:	f7ff faf1 	bl	d46c0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d50de:	6823      	ldr	r3, [r4, #0]
   d50e0:	6858      	ldr	r0, [r3, #4]
   d50e2:	f7ff faf5 	bl	d46d0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50e6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d50e8:	2300      	movs	r3, #0
   d50ea:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d50ec:	b128      	cbz	r0, d50fa <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d50ee:	f7ff ffcd 	bl	d508c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d50f2:	6820      	ldr	r0, [r4, #0]
   d50f4:	b108      	cbz	r0, d50fa <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d50f6:	f7ff ffc9 	bl	d508c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d50fa:	4620      	mov	r0, r4
   d50fc:	bd10      	pop	{r4, pc}
	...

000d5100 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5100:	b538      	push	{r3, r4, r5, lr}
   d5102:	4b0c      	ldr	r3, [pc, #48]	; (d5134 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5104:	6003      	str	r3, [r0, #0]
   d5106:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5108:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d510c:	b108      	cbz	r0, d5112 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d510e:	f7fe ffc8 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5112:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5116:	b135      	cbz	r5, d5126 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5118:	4628      	mov	r0, r5
   d511a:	f7ff ffd2 	bl	d50c2 <_ZN6ThreadD1Ev>
   d511e:	2104      	movs	r1, #4
   d5120:	4628      	mov	r0, r5
   d5122:	f000 f9f6 	bl	d5512 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5126:	68a0      	ldr	r0, [r4, #8]
   d5128:	b108      	cbz	r0, d512e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d512a:	f7ff ffc5 	bl	d50b8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d512e:	4620      	mov	r0, r4
   d5130:	bd38      	pop	{r3, r4, r5, pc}
   d5132:	bf00      	nop
   d5134:	000d624c 	.word	0x000d624c

000d5138 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5138:	b538      	push	{r3, r4, r5, lr}
   d513a:	4c0e      	ldr	r4, [pc, #56]	; (d5174 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d513c:	4b0e      	ldr	r3, [pc, #56]	; (d5178 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d513e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5140:	2500      	movs	r5, #0
   d5142:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5144:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5148:	6063      	str	r3, [r4, #4]
   d514a:	60a5      	str	r5, [r4, #8]
   d514c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5150:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5154:	f7ff facc 	bl	d46f0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5158:	4b08      	ldr	r3, [pc, #32]	; (d517c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d515a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d515e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5162:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5164:	4620      	mov	r0, r4
   d5166:	4a06      	ldr	r2, [pc, #24]	; (d5180 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5168:	4906      	ldr	r1, [pc, #24]	; (d5184 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d516a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d516e:	f000 b9cb 	b.w	d5508 <__aeabi_atexit>
   d5172:	bf00      	nop
   d5174:	2003e530 	.word	0x2003e530
   d5178:	000d62b4 	.word	0x000d62b4
   d517c:	000d624c 	.word	0x000d624c
   d5180:	2003e458 	.word	0x2003e458
   d5184:	000d5101 	.word	0x000d5101

000d5188 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5188:	2200      	movs	r2, #0
   d518a:	4611      	mov	r1, r2
   d518c:	6840      	ldr	r0, [r0, #4]
   d518e:	f7ff bba3 	b.w	d48d8 <network_ready>

000d5192 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5192:	2200      	movs	r2, #0
   d5194:	4611      	mov	r1, r2
   d5196:	6840      	ldr	r0, [r0, #4]
   d5198:	f7ff bbbe 	b.w	d4918 <network_listening>

000d519c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d519c:	2200      	movs	r2, #0
   d519e:	4611      	mov	r1, r2
   d51a0:	6840      	ldr	r0, [r0, #4]
   d51a2:	f7ff bbd1 	b.w	d4948 <network_get_listen_timeout>

000d51a6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d51a6:	2200      	movs	r2, #0
   d51a8:	6840      	ldr	r0, [r0, #4]
   d51aa:	f7ff bbc5 	b.w	d4938 <network_set_listen_timeout>

000d51ae <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d51ae:	2200      	movs	r2, #0
   d51b0:	f081 0101 	eor.w	r1, r1, #1
   d51b4:	6840      	ldr	r0, [r0, #4]
   d51b6:	f7ff bba7 	b.w	d4908 <network_listen>

000d51ba <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d51ba:	2300      	movs	r3, #0
   d51bc:	461a      	mov	r2, r3
   d51be:	4619      	mov	r1, r3
   d51c0:	6840      	ldr	r0, [r0, #4]
   d51c2:	f7ff bb99 	b.w	d48f8 <network_off>

000d51c6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d51c6:	2300      	movs	r3, #0
   d51c8:	461a      	mov	r2, r3
   d51ca:	4619      	mov	r1, r3
   d51cc:	6840      	ldr	r0, [r0, #4]
   d51ce:	f7ff bb8b 	b.w	d48e8 <network_on>

000d51d2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d51d2:	2200      	movs	r2, #0
   d51d4:	4611      	mov	r1, r2
   d51d6:	6840      	ldr	r0, [r0, #4]
   d51d8:	f7ff bb6e 	b.w	d48b8 <network_connecting>

000d51dc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d51dc:	2200      	movs	r2, #0
   d51de:	2102      	movs	r1, #2
   d51e0:	6840      	ldr	r0, [r0, #4]
   d51e2:	f7ff bb71 	b.w	d48c8 <network_disconnect>

000d51e6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d51e6:	2300      	movs	r3, #0
   d51e8:	461a      	mov	r2, r3
   d51ea:	6840      	ldr	r0, [r0, #4]
   d51ec:	f7ff bb5c 	b.w	d48a8 <network_connect>

000d51f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d51f0:	4b02      	ldr	r3, [pc, #8]	; (d51fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d51f2:	2204      	movs	r2, #4
   d51f4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d51f6:	4a02      	ldr	r2, [pc, #8]	; (d5200 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d51f8:	601a      	str	r2, [r3, #0]
   d51fa:	4770      	bx	lr
   d51fc:	2003e704 	.word	0x2003e704
   d5200:	000d6280 	.word	0x000d6280

000d5204 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5204:	2300      	movs	r3, #0
   d5206:	461a      	mov	r2, r3
   d5208:	6840      	ldr	r0, [r0, #4]
   d520a:	f7ff bb4d 	b.w	d48a8 <network_connect>

000d520e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d520e:	2200      	movs	r2, #0
   d5210:	2102      	movs	r1, #2
   d5212:	6840      	ldr	r0, [r0, #4]
   d5214:	f7ff bb58 	b.w	d48c8 <network_disconnect>

000d5218 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5218:	2200      	movs	r2, #0
   d521a:	4611      	mov	r1, r2
   d521c:	6840      	ldr	r0, [r0, #4]
   d521e:	f7ff bb4b 	b.w	d48b8 <network_connecting>

000d5222 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5222:	2200      	movs	r2, #0
   d5224:	4611      	mov	r1, r2
   d5226:	6840      	ldr	r0, [r0, #4]
   d5228:	f7ff bb56 	b.w	d48d8 <network_ready>

000d522c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d522c:	2300      	movs	r3, #0
   d522e:	461a      	mov	r2, r3
   d5230:	4619      	mov	r1, r3
   d5232:	6840      	ldr	r0, [r0, #4]
   d5234:	f7ff bb58 	b.w	d48e8 <network_on>

000d5238 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5238:	2300      	movs	r3, #0
   d523a:	461a      	mov	r2, r3
   d523c:	4619      	mov	r1, r3
   d523e:	6840      	ldr	r0, [r0, #4]
   d5240:	f7ff bb5a 	b.w	d48f8 <network_off>

000d5244 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5244:	2200      	movs	r2, #0
   d5246:	f081 0101 	eor.w	r1, r1, #1
   d524a:	6840      	ldr	r0, [r0, #4]
   d524c:	f7ff bb5c 	b.w	d4908 <network_listen>

000d5250 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5250:	2200      	movs	r2, #0
   d5252:	6840      	ldr	r0, [r0, #4]
   d5254:	f7ff bb70 	b.w	d4938 <network_set_listen_timeout>

000d5258 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5258:	2200      	movs	r2, #0
   d525a:	4611      	mov	r1, r2
   d525c:	6840      	ldr	r0, [r0, #4]
   d525e:	f7ff bb73 	b.w	d4948 <network_get_listen_timeout>

000d5262 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5262:	2200      	movs	r2, #0
   d5264:	4611      	mov	r1, r2
   d5266:	6840      	ldr	r0, [r0, #4]
   d5268:	f7ff bb56 	b.w	d4918 <network_listening>

000d526c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d526c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5270:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5272:	b095      	sub	sp, #84	; 0x54
   d5274:	4616      	mov	r6, r2
   d5276:	460d      	mov	r5, r1
   d5278:	4607      	mov	r7, r0
    IPAddress addr;
   d527a:	f7ff fd39 	bl	d4cf0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d527e:	4621      	mov	r1, r4
   d5280:	2220      	movs	r2, #32
   d5282:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5284:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5286:	f000 fe72 	bl	d5f6e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d528a:	2340      	movs	r3, #64	; 0x40
   d528c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d528e:	4621      	mov	r1, r4
   d5290:	466b      	mov	r3, sp
   d5292:	aa0c      	add	r2, sp, #48	; 0x30
   d5294:	4630      	mov	r0, r6
   d5296:	f7ff f9ab 	bl	d45f0 <netdb_getaddrinfo>
    if (!r) {
   d529a:	4604      	mov	r4, r0
   d529c:	2800      	cmp	r0, #0
   d529e:	d144      	bne.n	d532a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d52a0:	4602      	mov	r2, r0
   d52a2:	2101      	movs	r1, #1
   d52a4:	6868      	ldr	r0, [r5, #4]
   d52a6:	f7ff fb17 	bl	d48d8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52aa:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d52ac:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52ae:	4622      	mov	r2, r4
   d52b0:	6868      	ldr	r0, [r5, #4]
   d52b2:	f7ff fb11 	bl	d48d8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d52b6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52b8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d52ba:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d52bc:	2e00      	cmp	r6, #0
   d52be:	d034      	beq.n	d532a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d52c0:	2900      	cmp	r1, #0
   d52c2:	d132      	bne.n	d532a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d52c4:	6873      	ldr	r3, [r6, #4]
   d52c6:	2b02      	cmp	r3, #2
   d52c8:	d002      	beq.n	d52d0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d52ca:	2b0a      	cmp	r3, #10
   d52cc:	d009      	beq.n	d52e2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d52ce:	e02a      	b.n	d5326 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d52d0:	f1b8 0f00 	cmp.w	r8, #0
   d52d4:	d027      	beq.n	d5326 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d52d6:	6971      	ldr	r1, [r6, #20]
   d52d8:	4638      	mov	r0, r7
   d52da:	3104      	adds	r1, #4
   d52dc:	f7ff fd35 	bl	d4d4a <_ZN9IPAddressaSEPKh>
   d52e0:	e020      	b.n	d5324 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d52e2:	f1b9 0f00 	cmp.w	r9, #0
   d52e6:	d01e      	beq.n	d5326 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d52e8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d52ea:	2211      	movs	r2, #17
   d52ec:	a801      	add	r0, sp, #4
   d52ee:	f000 fe3e 	bl	d5f6e <memset>
                    a.v = 6;
   d52f2:	2306      	movs	r3, #6
   d52f4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d52f8:	ad01      	add	r5, sp, #4
   d52fa:	f104 0308 	add.w	r3, r4, #8
   d52fe:	3418      	adds	r4, #24
   d5300:	6818      	ldr	r0, [r3, #0]
   d5302:	6859      	ldr	r1, [r3, #4]
   d5304:	462a      	mov	r2, r5
   d5306:	c203      	stmia	r2!, {r0, r1}
   d5308:	3308      	adds	r3, #8
   d530a:	42a3      	cmp	r3, r4
   d530c:	4615      	mov	r5, r2
   d530e:	d1f7      	bne.n	d5300 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5310:	a901      	add	r1, sp, #4
   d5312:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5314:	ad07      	add	r5, sp, #28
   d5316:	f7ff fcf9 	bl	d4d0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d531a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d531c:	1d3c      	adds	r4, r7, #4
   d531e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5320:	682b      	ldr	r3, [r5, #0]
   d5322:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5324:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5326:	69f6      	ldr	r6, [r6, #28]
   d5328:	e7c8      	b.n	d52bc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d532a:	9800      	ldr	r0, [sp, #0]
   d532c:	f7ff f958 	bl	d45e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5330:	4638      	mov	r0, r7
   d5332:	b015      	add	sp, #84	; 0x54
   d5334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5338 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5338:	4b02      	ldr	r3, [pc, #8]	; (d5344 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d533a:	4a03      	ldr	r2, [pc, #12]	; (d5348 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d533c:	601a      	str	r2, [r3, #0]
   d533e:	2200      	movs	r2, #0
   d5340:	605a      	str	r2, [r3, #4]
   d5342:	4770      	bx	lr
   d5344:	2003e70c 	.word	0x2003e70c
   d5348:	000d62b4 	.word	0x000d62b4

000d534c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d534c:	b510      	push	{r4, lr}
   d534e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5350:	480f      	ldr	r0, [pc, #60]	; (d5390 <pinAvailable+0x44>)
   d5352:	f7ff fb7b 	bl	d4a4c <_ZN8SPIClass9isEnabledEv>
   d5356:	b128      	cbz	r0, d5364 <pinAvailable+0x18>
   d5358:	f1a4 030b 	sub.w	r3, r4, #11
   d535c:	2b02      	cmp	r3, #2
   d535e:	d801      	bhi.n	d5364 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5360:	2000      	movs	r0, #0
   d5362:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5364:	f000 f8b0 	bl	d54c8 <_Z19__fetch_global_Wirev>
   d5368:	f7ff fe58 	bl	d501c <_ZN7TwoWire9isEnabledEv>
   d536c:	b108      	cbz	r0, d5372 <pinAvailable+0x26>
   d536e:	2c01      	cmp	r4, #1
   d5370:	d9f6      	bls.n	d5360 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5372:	f7ff fdd5 	bl	d4f20 <_Z22__fetch_global_Serial1v>
   d5376:	f7ff fdcf 	bl	d4f18 <_ZN11USARTSerial9isEnabledEv>
   d537a:	b118      	cbz	r0, d5384 <pinAvailable+0x38>
   d537c:	f1a4 0309 	sub.w	r3, r4, #9
   d5380:	2b01      	cmp	r3, #1
   d5382:	d9ed      	bls.n	d5360 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5384:	2c23      	cmp	r4, #35	; 0x23
   d5386:	bf8c      	ite	hi
   d5388:	2000      	movhi	r0, #0
   d538a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d538c:	bd10      	pop	{r4, pc}
   d538e:	bf00      	nop
   d5390:	2003e714 	.word	0x2003e714

000d5394 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5394:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5396:	b538      	push	{r3, r4, r5, lr}
   d5398:	4604      	mov	r4, r0
   d539a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d539c:	d80a      	bhi.n	d53b4 <pinMode+0x20>
   d539e:	29ff      	cmp	r1, #255	; 0xff
   d53a0:	d008      	beq.n	d53b4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d53a2:	f7ff ffd3 	bl	d534c <pinAvailable>
   d53a6:	b128      	cbz	r0, d53b4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d53a8:	4629      	mov	r1, r5
   d53aa:	4620      	mov	r0, r4
}
   d53ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d53b0:	f7ff b936 	b.w	d4620 <HAL_Pin_Mode>
   d53b4:	bd38      	pop	{r3, r4, r5, pc}

000d53b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d53b6:	b538      	push	{r3, r4, r5, lr}
   d53b8:	4604      	mov	r4, r0
   d53ba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d53bc:	f7ff f938 	bl	d4630 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d53c0:	28ff      	cmp	r0, #255	; 0xff
   d53c2:	d010      	beq.n	d53e6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d53c4:	2806      	cmp	r0, #6
   d53c6:	d804      	bhi.n	d53d2 <digitalWrite+0x1c>
   d53c8:	234d      	movs	r3, #77	; 0x4d
   d53ca:	fa23 f000 	lsr.w	r0, r3, r0
   d53ce:	07c3      	lsls	r3, r0, #31
   d53d0:	d409      	bmi.n	d53e6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d53d2:	4620      	mov	r0, r4
   d53d4:	f7ff ffba 	bl	d534c <pinAvailable>
   d53d8:	b128      	cbz	r0, d53e6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d53da:	4629      	mov	r1, r5
   d53dc:	4620      	mov	r0, r4
}
   d53de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d53e2:	f7ff b92d 	b.w	d4640 <HAL_GPIO_Write>
   d53e6:	bd38      	pop	{r3, r4, r5, pc}

000d53e8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d53e8:	b510      	push	{r4, lr}
   d53ea:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d53ec:	f7ff f920 	bl	d4630 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d53f0:	3804      	subs	r0, #4
   d53f2:	b2c0      	uxtb	r0, r0
   d53f4:	2801      	cmp	r0, #1
   d53f6:	d908      	bls.n	d540a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d53f8:	4620      	mov	r0, r4
   d53fa:	f7ff ffa7 	bl	d534c <pinAvailable>
   d53fe:	b120      	cbz	r0, d540a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5400:	4620      	mov	r0, r4
}
   d5402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5406:	f7ff b923 	b.w	d4650 <HAL_GPIO_Read>
}
   d540a:	2000      	movs	r0, #0
   d540c:	bd10      	pop	{r4, pc}

000d540e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d540e:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5410:	b510      	push	{r4, lr}
   d5412:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5414:	bf9c      	itt	ls
   d5416:	340e      	addls	r4, #14
   d5418:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d541a:	4620      	mov	r0, r4
   d541c:	f7ff ff96 	bl	d534c <pinAvailable>
   d5420:	b150      	cbz	r0, d5438 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5422:	2103      	movs	r1, #3
   d5424:	4620      	mov	r0, r4
   d5426:	f7ff f8f3 	bl	d4610 <HAL_Validate_Pin_Function>
   d542a:	2803      	cmp	r0, #3
   d542c:	d104      	bne.n	d5438 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d542e:	4620      	mov	r0, r4
}
   d5430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5434:	f7ff b914 	b.w	d4660 <HAL_ADC_Read>
}
   d5438:	2000      	movs	r0, #0
   d543a:	bd10      	pop	{r4, pc}

000d543c <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d543c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5440:	4690      	mov	r8, r2
   d5442:	461e      	mov	r6, r3
   d5444:	2407      	movs	r4, #7
   d5446:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d5448:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d544a:	f1b8 0f00 	cmp.w	r8, #0
   d544e:	d104      	bne.n	d545a <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d5450:	f1c4 0107 	rsb	r1, r4, #7
   d5454:	fa46 f101 	asr.w	r1, r6, r1
   d5458:	e001      	b.n	d545e <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d545a:	fa46 f104 	asr.w	r1, r6, r4
   d545e:	f001 0101 	and.w	r1, r1, #1
   d5462:	4638      	mov	r0, r7
   d5464:	f7ff ffa7 	bl	d53b6 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d5468:	2101      	movs	r1, #1
   d546a:	4628      	mov	r0, r5
   d546c:	f7ff ffa3 	bl	d53b6 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d5470:	2100      	movs	r1, #0
   d5472:	4628      	mov	r0, r5
   d5474:	f7ff ff9f 	bl	d53b6 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d5478:	f114 34ff 	adds.w	r4, r4, #4294967295
   d547c:	d2e5      	bcs.n	d544a <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d547e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5484 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5484:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5486:	4c0c      	ldr	r4, [pc, #48]	; (d54b8 <_GLOBAL__sub_I_SPI+0x34>)
   d5488:	4e0c      	ldr	r6, [pc, #48]	; (d54bc <_GLOBAL__sub_I_SPI+0x38>)
   d548a:	4d0d      	ldr	r5, [pc, #52]	; (d54c0 <_GLOBAL__sub_I_SPI+0x3c>)
   d548c:	2100      	movs	r1, #0
   d548e:	4620      	mov	r0, r4
   d5490:	f7ff fac8 	bl	d4a24 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5494:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5496:	4c0b      	ldr	r4, [pc, #44]	; (d54c4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5498:	4632      	mov	r2, r6
   d549a:	4629      	mov	r1, r5
   d549c:	f000 f834 	bl	d5508 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d54a0:	2101      	movs	r1, #1
   d54a2:	4620      	mov	r0, r4
   d54a4:	f7ff fabe 	bl	d4a24 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d54a8:	4632      	mov	r2, r6
   d54aa:	4629      	mov	r1, r5
   d54ac:	4620      	mov	r0, r4
   d54ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d54b2:	f000 b829 	b.w	d5508 <__aeabi_atexit>
   d54b6:	bf00      	nop
   d54b8:	2003e714 	.word	0x2003e714
   d54bc:	2003e458 	.word	0x2003e458
   d54c0:	000d4a15 	.word	0x000d4a15
   d54c4:	2003e724 	.word	0x2003e724

000d54c8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d54c8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d54ca:	4d0b      	ldr	r5, [pc, #44]	; (d54f8 <_Z19__fetch_global_Wirev+0x30>)
   d54cc:	6829      	ldr	r1, [r5, #0]
   d54ce:	f011 0401 	ands.w	r4, r1, #1
   d54d2:	d10f      	bne.n	d54f4 <_Z19__fetch_global_Wirev+0x2c>
   d54d4:	4628      	mov	r0, r5
   d54d6:	f7fe fde6 	bl	d40a6 <__cxa_guard_acquire>
   d54da:	b158      	cbz	r0, d54f4 <_Z19__fetch_global_Wirev+0x2c>
   d54dc:	4621      	mov	r1, r4
   d54de:	4807      	ldr	r0, [pc, #28]	; (d54fc <_Z19__fetch_global_Wirev+0x34>)
   d54e0:	f7ff fd8a 	bl	d4ff8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d54e4:	4628      	mov	r0, r5
   d54e6:	f7fe fde3 	bl	d40b0 <__cxa_guard_release>
   d54ea:	4a05      	ldr	r2, [pc, #20]	; (d5500 <_Z19__fetch_global_Wirev+0x38>)
   d54ec:	4905      	ldr	r1, [pc, #20]	; (d5504 <_Z19__fetch_global_Wirev+0x3c>)
   d54ee:	4803      	ldr	r0, [pc, #12]	; (d54fc <_Z19__fetch_global_Wirev+0x34>)
   d54f0:	f000 f80a 	bl	d5508 <__aeabi_atexit>
	return wire;
}
   d54f4:	4801      	ldr	r0, [pc, #4]	; (d54fc <_Z19__fetch_global_Wirev+0x34>)
   d54f6:	bd38      	pop	{r3, r4, r5, pc}
   d54f8:	2003e738 	.word	0x2003e738
   d54fc:	2003e73c 	.word	0x2003e73c
   d5500:	2003e458 	.word	0x2003e458
   d5504:	000d4fa1 	.word	0x000d4fa1

000d5508 <__aeabi_atexit>:
   d5508:	460b      	mov	r3, r1
   d550a:	4601      	mov	r1, r0
   d550c:	4618      	mov	r0, r3
   d550e:	f000 bd15 	b.w	d5f3c <__cxa_atexit>

000d5512 <_ZdlPvj>:
   d5512:	f7fe bdc4 	b.w	d409e <_ZdlPv>
	...

000d5518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5518:	4b18      	ldr	r3, [pc, #96]	; (d557c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d551a:	681a      	ldr	r2, [r3, #0]
   d551c:	07d1      	lsls	r1, r2, #31
   d551e:	bf5c      	itt	pl
   d5520:	2201      	movpl	r2, #1
   d5522:	601a      	strpl	r2, [r3, #0]
   d5524:	4b16      	ldr	r3, [pc, #88]	; (d5580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5526:	681a      	ldr	r2, [r3, #0]
   d5528:	07d2      	lsls	r2, r2, #31
   d552a:	bf5c      	itt	pl
   d552c:	2201      	movpl	r2, #1
   d552e:	601a      	strpl	r2, [r3, #0]
   d5530:	4b14      	ldr	r3, [pc, #80]	; (d5584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5532:	681a      	ldr	r2, [r3, #0]
   d5534:	07d0      	lsls	r0, r2, #31
   d5536:	bf5c      	itt	pl
   d5538:	2201      	movpl	r2, #1
   d553a:	601a      	strpl	r2, [r3, #0]
   d553c:	4b12      	ldr	r3, [pc, #72]	; (d5588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d553e:	681a      	ldr	r2, [r3, #0]
   d5540:	07d1      	lsls	r1, r2, #31
   d5542:	bf5c      	itt	pl
   d5544:	2201      	movpl	r2, #1
   d5546:	601a      	strpl	r2, [r3, #0]
   d5548:	4b10      	ldr	r3, [pc, #64]	; (d558c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d554a:	681a      	ldr	r2, [r3, #0]
   d554c:	07d2      	lsls	r2, r2, #31
   d554e:	bf5c      	itt	pl
   d5550:	2201      	movpl	r2, #1
   d5552:	601a      	strpl	r2, [r3, #0]
   d5554:	4b0e      	ldr	r3, [pc, #56]	; (d5590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5556:	681a      	ldr	r2, [r3, #0]
   d5558:	07d0      	lsls	r0, r2, #31
   d555a:	bf5c      	itt	pl
   d555c:	2201      	movpl	r2, #1
   d555e:	601a      	strpl	r2, [r3, #0]
   d5560:	4b0c      	ldr	r3, [pc, #48]	; (d5594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5562:	681a      	ldr	r2, [r3, #0]
   d5564:	07d1      	lsls	r1, r2, #31
   d5566:	bf5c      	itt	pl
   d5568:	2201      	movpl	r2, #1
   d556a:	601a      	strpl	r2, [r3, #0]
   d556c:	4b0a      	ldr	r3, [pc, #40]	; (d5598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d556e:	681a      	ldr	r2, [r3, #0]
   d5570:	07d2      	lsls	r2, r2, #31
   d5572:	bf5c      	itt	pl
   d5574:	2201      	movpl	r2, #1
   d5576:	601a      	strpl	r2, [r3, #0]
   d5578:	4770      	bx	lr
   d557a:	bf00      	nop
   d557c:	2003e76c 	.word	0x2003e76c
   d5580:	2003e768 	.word	0x2003e768
   d5584:	2003e764 	.word	0x2003e764
   d5588:	2003e760 	.word	0x2003e760
   d558c:	2003e75c 	.word	0x2003e75c
   d5590:	2003e758 	.word	0x2003e758
   d5594:	2003e754 	.word	0x2003e754
   d5598:	2003e750 	.word	0x2003e750

000d559c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d559c:	4b24      	ldr	r3, [pc, #144]	; (d5630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d559e:	681a      	ldr	r2, [r3, #0]
   d55a0:	07d0      	lsls	r0, r2, #31
   d55a2:	bf5c      	itt	pl
   d55a4:	2201      	movpl	r2, #1
   d55a6:	601a      	strpl	r2, [r3, #0]
   d55a8:	4b22      	ldr	r3, [pc, #136]	; (d5634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d55aa:	681a      	ldr	r2, [r3, #0]
   d55ac:	07d1      	lsls	r1, r2, #31
   d55ae:	bf5c      	itt	pl
   d55b0:	2201      	movpl	r2, #1
   d55b2:	601a      	strpl	r2, [r3, #0]
   d55b4:	4b20      	ldr	r3, [pc, #128]	; (d5638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d55b6:	681a      	ldr	r2, [r3, #0]
   d55b8:	07d2      	lsls	r2, r2, #31
   d55ba:	bf5c      	itt	pl
   d55bc:	2201      	movpl	r2, #1
   d55be:	601a      	strpl	r2, [r3, #0]
   d55c0:	4b1e      	ldr	r3, [pc, #120]	; (d563c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d55c2:	681a      	ldr	r2, [r3, #0]
   d55c4:	07d0      	lsls	r0, r2, #31
   d55c6:	bf5c      	itt	pl
   d55c8:	2201      	movpl	r2, #1
   d55ca:	601a      	strpl	r2, [r3, #0]
   d55cc:	4b1c      	ldr	r3, [pc, #112]	; (d5640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d55ce:	681a      	ldr	r2, [r3, #0]
   d55d0:	07d1      	lsls	r1, r2, #31
   d55d2:	bf5c      	itt	pl
   d55d4:	2201      	movpl	r2, #1
   d55d6:	601a      	strpl	r2, [r3, #0]
   d55d8:	4b1a      	ldr	r3, [pc, #104]	; (d5644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d55da:	681a      	ldr	r2, [r3, #0]
   d55dc:	07d2      	lsls	r2, r2, #31
   d55de:	bf5c      	itt	pl
   d55e0:	2201      	movpl	r2, #1
   d55e2:	601a      	strpl	r2, [r3, #0]
   d55e4:	4b18      	ldr	r3, [pc, #96]	; (d5648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d55e6:	681a      	ldr	r2, [r3, #0]
   d55e8:	07d0      	lsls	r0, r2, #31
   d55ea:	bf5c      	itt	pl
   d55ec:	2201      	movpl	r2, #1
   d55ee:	601a      	strpl	r2, [r3, #0]
   d55f0:	4b16      	ldr	r3, [pc, #88]	; (d564c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d55f2:	681a      	ldr	r2, [r3, #0]
   d55f4:	07d1      	lsls	r1, r2, #31
   d55f6:	bf5c      	itt	pl
   d55f8:	2201      	movpl	r2, #1
   d55fa:	601a      	strpl	r2, [r3, #0]
   d55fc:	4b14      	ldr	r3, [pc, #80]	; (d5650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d55fe:	681a      	ldr	r2, [r3, #0]
   d5600:	07d2      	lsls	r2, r2, #31
   d5602:	bf5c      	itt	pl
   d5604:	2201      	movpl	r2, #1
   d5606:	601a      	strpl	r2, [r3, #0]
   d5608:	4b12      	ldr	r3, [pc, #72]	; (d5654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d560a:	681a      	ldr	r2, [r3, #0]
   d560c:	07d0      	lsls	r0, r2, #31
   d560e:	bf5c      	itt	pl
   d5610:	2201      	movpl	r2, #1
   d5612:	601a      	strpl	r2, [r3, #0]
   d5614:	4b10      	ldr	r3, [pc, #64]	; (d5658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5616:	681a      	ldr	r2, [r3, #0]
   d5618:	07d1      	lsls	r1, r2, #31
   d561a:	bf5c      	itt	pl
   d561c:	2201      	movpl	r2, #1
   d561e:	601a      	strpl	r2, [r3, #0]
   d5620:	4b0e      	ldr	r3, [pc, #56]	; (d565c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5622:	681a      	ldr	r2, [r3, #0]
   d5624:	07d2      	lsls	r2, r2, #31
   d5626:	bf5c      	itt	pl
   d5628:	2201      	movpl	r2, #1
   d562a:	601a      	strpl	r2, [r3, #0]
   d562c:	4770      	bx	lr
   d562e:	bf00      	nop
   d5630:	2003e79c 	.word	0x2003e79c
   d5634:	2003e798 	.word	0x2003e798
   d5638:	2003e794 	.word	0x2003e794
   d563c:	2003e790 	.word	0x2003e790
   d5640:	2003e78c 	.word	0x2003e78c
   d5644:	2003e788 	.word	0x2003e788
   d5648:	2003e784 	.word	0x2003e784
   d564c:	2003e780 	.word	0x2003e780
   d5650:	2003e77c 	.word	0x2003e77c
   d5654:	2003e778 	.word	0x2003e778
   d5658:	2003e774 	.word	0x2003e774
   d565c:	2003e770 	.word	0x2003e770

000d5660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5660:	4b24      	ldr	r3, [pc, #144]	; (d56f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5662:	681a      	ldr	r2, [r3, #0]
   d5664:	07d0      	lsls	r0, r2, #31
   d5666:	bf5c      	itt	pl
   d5668:	2201      	movpl	r2, #1
   d566a:	601a      	strpl	r2, [r3, #0]
   d566c:	4b22      	ldr	r3, [pc, #136]	; (d56f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d566e:	681a      	ldr	r2, [r3, #0]
   d5670:	07d1      	lsls	r1, r2, #31
   d5672:	bf5c      	itt	pl
   d5674:	2201      	movpl	r2, #1
   d5676:	601a      	strpl	r2, [r3, #0]
   d5678:	4b20      	ldr	r3, [pc, #128]	; (d56fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d567a:	681a      	ldr	r2, [r3, #0]
   d567c:	07d2      	lsls	r2, r2, #31
   d567e:	bf5c      	itt	pl
   d5680:	2201      	movpl	r2, #1
   d5682:	601a      	strpl	r2, [r3, #0]
   d5684:	4b1e      	ldr	r3, [pc, #120]	; (d5700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5686:	681a      	ldr	r2, [r3, #0]
   d5688:	07d0      	lsls	r0, r2, #31
   d568a:	bf5c      	itt	pl
   d568c:	2201      	movpl	r2, #1
   d568e:	601a      	strpl	r2, [r3, #0]
   d5690:	4b1c      	ldr	r3, [pc, #112]	; (d5704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5692:	681a      	ldr	r2, [r3, #0]
   d5694:	07d1      	lsls	r1, r2, #31
   d5696:	bf5c      	itt	pl
   d5698:	2201      	movpl	r2, #1
   d569a:	601a      	strpl	r2, [r3, #0]
   d569c:	4b1a      	ldr	r3, [pc, #104]	; (d5708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d569e:	681a      	ldr	r2, [r3, #0]
   d56a0:	07d2      	lsls	r2, r2, #31
   d56a2:	bf5c      	itt	pl
   d56a4:	2201      	movpl	r2, #1
   d56a6:	601a      	strpl	r2, [r3, #0]
   d56a8:	4b18      	ldr	r3, [pc, #96]	; (d570c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d56aa:	681a      	ldr	r2, [r3, #0]
   d56ac:	07d0      	lsls	r0, r2, #31
   d56ae:	bf5c      	itt	pl
   d56b0:	2201      	movpl	r2, #1
   d56b2:	601a      	strpl	r2, [r3, #0]
   d56b4:	4b16      	ldr	r3, [pc, #88]	; (d5710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d56b6:	681a      	ldr	r2, [r3, #0]
   d56b8:	07d1      	lsls	r1, r2, #31
   d56ba:	bf5c      	itt	pl
   d56bc:	2201      	movpl	r2, #1
   d56be:	601a      	strpl	r2, [r3, #0]
   d56c0:	4b14      	ldr	r3, [pc, #80]	; (d5714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d56c2:	681a      	ldr	r2, [r3, #0]
   d56c4:	07d2      	lsls	r2, r2, #31
   d56c6:	bf5c      	itt	pl
   d56c8:	2201      	movpl	r2, #1
   d56ca:	601a      	strpl	r2, [r3, #0]
   d56cc:	4b12      	ldr	r3, [pc, #72]	; (d5718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d56ce:	681a      	ldr	r2, [r3, #0]
   d56d0:	07d0      	lsls	r0, r2, #31
   d56d2:	bf5c      	itt	pl
   d56d4:	2201      	movpl	r2, #1
   d56d6:	601a      	strpl	r2, [r3, #0]
   d56d8:	4b10      	ldr	r3, [pc, #64]	; (d571c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d56da:	681a      	ldr	r2, [r3, #0]
   d56dc:	07d1      	lsls	r1, r2, #31
   d56de:	bf5c      	itt	pl
   d56e0:	2201      	movpl	r2, #1
   d56e2:	601a      	strpl	r2, [r3, #0]
   d56e4:	4b0e      	ldr	r3, [pc, #56]	; (d5720 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d56e6:	681a      	ldr	r2, [r3, #0]
   d56e8:	07d2      	lsls	r2, r2, #31
   d56ea:	bf5c      	itt	pl
   d56ec:	2201      	movpl	r2, #1
   d56ee:	601a      	strpl	r2, [r3, #0]
   d56f0:	4770      	bx	lr
   d56f2:	bf00      	nop
   d56f4:	2003e7cc 	.word	0x2003e7cc
   d56f8:	2003e7c8 	.word	0x2003e7c8
   d56fc:	2003e7c4 	.word	0x2003e7c4
   d5700:	2003e7c0 	.word	0x2003e7c0
   d5704:	2003e7bc 	.word	0x2003e7bc
   d5708:	2003e7b8 	.word	0x2003e7b8
   d570c:	2003e7b4 	.word	0x2003e7b4
   d5710:	2003e7b0 	.word	0x2003e7b0
   d5714:	2003e7ac 	.word	0x2003e7ac
   d5718:	2003e7a8 	.word	0x2003e7a8
   d571c:	2003e7a4 	.word	0x2003e7a4
   d5720:	2003e7a0 	.word	0x2003e7a0

000d5724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5724:	4b18      	ldr	r3, [pc, #96]	; (d5788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5726:	681a      	ldr	r2, [r3, #0]
   d5728:	07d1      	lsls	r1, r2, #31
   d572a:	bf5c      	itt	pl
   d572c:	2201      	movpl	r2, #1
   d572e:	601a      	strpl	r2, [r3, #0]
   d5730:	4b16      	ldr	r3, [pc, #88]	; (d578c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5732:	681a      	ldr	r2, [r3, #0]
   d5734:	07d2      	lsls	r2, r2, #31
   d5736:	bf5c      	itt	pl
   d5738:	2201      	movpl	r2, #1
   d573a:	601a      	strpl	r2, [r3, #0]
   d573c:	4b14      	ldr	r3, [pc, #80]	; (d5790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d573e:	681a      	ldr	r2, [r3, #0]
   d5740:	07d0      	lsls	r0, r2, #31
   d5742:	bf5c      	itt	pl
   d5744:	2201      	movpl	r2, #1
   d5746:	601a      	strpl	r2, [r3, #0]
   d5748:	4b12      	ldr	r3, [pc, #72]	; (d5794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d574a:	681a      	ldr	r2, [r3, #0]
   d574c:	07d1      	lsls	r1, r2, #31
   d574e:	bf5c      	itt	pl
   d5750:	2201      	movpl	r2, #1
   d5752:	601a      	strpl	r2, [r3, #0]
   d5754:	4b10      	ldr	r3, [pc, #64]	; (d5798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5756:	681a      	ldr	r2, [r3, #0]
   d5758:	07d2      	lsls	r2, r2, #31
   d575a:	bf5c      	itt	pl
   d575c:	2201      	movpl	r2, #1
   d575e:	601a      	strpl	r2, [r3, #0]
   d5760:	4b0e      	ldr	r3, [pc, #56]	; (d579c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5762:	681a      	ldr	r2, [r3, #0]
   d5764:	07d0      	lsls	r0, r2, #31
   d5766:	bf5c      	itt	pl
   d5768:	2201      	movpl	r2, #1
   d576a:	601a      	strpl	r2, [r3, #0]
   d576c:	4b0c      	ldr	r3, [pc, #48]	; (d57a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d576e:	681a      	ldr	r2, [r3, #0]
   d5770:	07d1      	lsls	r1, r2, #31
   d5772:	bf5c      	itt	pl
   d5774:	2201      	movpl	r2, #1
   d5776:	601a      	strpl	r2, [r3, #0]
   d5778:	4b0a      	ldr	r3, [pc, #40]	; (d57a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d577a:	681a      	ldr	r2, [r3, #0]
   d577c:	07d2      	lsls	r2, r2, #31
   d577e:	bf5c      	itt	pl
   d5780:	2201      	movpl	r2, #1
   d5782:	601a      	strpl	r2, [r3, #0]
   d5784:	4770      	bx	lr
   d5786:	bf00      	nop
   d5788:	2003e7ec 	.word	0x2003e7ec
   d578c:	2003e7e8 	.word	0x2003e7e8
   d5790:	2003e7e4 	.word	0x2003e7e4
   d5794:	2003e7e0 	.word	0x2003e7e0
   d5798:	2003e7dc 	.word	0x2003e7dc
   d579c:	2003e7d8 	.word	0x2003e7d8
   d57a0:	2003e7d4 	.word	0x2003e7d4
   d57a4:	2003e7d0 	.word	0x2003e7d0

000d57a8 <__aeabi_drsub>:
   d57a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d57ac:	e002      	b.n	d57b4 <__adddf3>
   d57ae:	bf00      	nop

000d57b0 <__aeabi_dsub>:
   d57b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d57b4 <__adddf3>:
   d57b4:	b530      	push	{r4, r5, lr}
   d57b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d57ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d57be:	ea94 0f05 	teq	r4, r5
   d57c2:	bf08      	it	eq
   d57c4:	ea90 0f02 	teqeq	r0, r2
   d57c8:	bf1f      	itttt	ne
   d57ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   d57ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   d57d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d57d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d57da:	f000 80e2 	beq.w	d59a2 <__adddf3+0x1ee>
   d57de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d57e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d57e6:	bfb8      	it	lt
   d57e8:	426d      	neglt	r5, r5
   d57ea:	dd0c      	ble.n	d5806 <__adddf3+0x52>
   d57ec:	442c      	add	r4, r5
   d57ee:	ea80 0202 	eor.w	r2, r0, r2
   d57f2:	ea81 0303 	eor.w	r3, r1, r3
   d57f6:	ea82 0000 	eor.w	r0, r2, r0
   d57fa:	ea83 0101 	eor.w	r1, r3, r1
   d57fe:	ea80 0202 	eor.w	r2, r0, r2
   d5802:	ea81 0303 	eor.w	r3, r1, r3
   d5806:	2d36      	cmp	r5, #54	; 0x36
   d5808:	bf88      	it	hi
   d580a:	bd30      	pophi	{r4, r5, pc}
   d580c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5810:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5814:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5818:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d581c:	d002      	beq.n	d5824 <__adddf3+0x70>
   d581e:	4240      	negs	r0, r0
   d5820:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5824:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5828:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d582c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5830:	d002      	beq.n	d5838 <__adddf3+0x84>
   d5832:	4252      	negs	r2, r2
   d5834:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5838:	ea94 0f05 	teq	r4, r5
   d583c:	f000 80a7 	beq.w	d598e <__adddf3+0x1da>
   d5840:	f1a4 0401 	sub.w	r4, r4, #1
   d5844:	f1d5 0e20 	rsbs	lr, r5, #32
   d5848:	db0d      	blt.n	d5866 <__adddf3+0xb2>
   d584a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d584e:	fa22 f205 	lsr.w	r2, r2, r5
   d5852:	1880      	adds	r0, r0, r2
   d5854:	f141 0100 	adc.w	r1, r1, #0
   d5858:	fa03 f20e 	lsl.w	r2, r3, lr
   d585c:	1880      	adds	r0, r0, r2
   d585e:	fa43 f305 	asr.w	r3, r3, r5
   d5862:	4159      	adcs	r1, r3
   d5864:	e00e      	b.n	d5884 <__adddf3+0xd0>
   d5866:	f1a5 0520 	sub.w	r5, r5, #32
   d586a:	f10e 0e20 	add.w	lr, lr, #32
   d586e:	2a01      	cmp	r2, #1
   d5870:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5874:	bf28      	it	cs
   d5876:	f04c 0c02 	orrcs.w	ip, ip, #2
   d587a:	fa43 f305 	asr.w	r3, r3, r5
   d587e:	18c0      	adds	r0, r0, r3
   d5880:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5884:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5888:	d507      	bpl.n	d589a <__adddf3+0xe6>
   d588a:	f04f 0e00 	mov.w	lr, #0
   d588e:	f1dc 0c00 	rsbs	ip, ip, #0
   d5892:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5896:	eb6e 0101 	sbc.w	r1, lr, r1
   d589a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d589e:	d31b      	bcc.n	d58d8 <__adddf3+0x124>
   d58a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d58a4:	d30c      	bcc.n	d58c0 <__adddf3+0x10c>
   d58a6:	0849      	lsrs	r1, r1, #1
   d58a8:	ea5f 0030 	movs.w	r0, r0, rrx
   d58ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d58b0:	f104 0401 	add.w	r4, r4, #1
   d58b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d58b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d58bc:	f080 809a 	bcs.w	d59f4 <__adddf3+0x240>
   d58c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d58c4:	bf08      	it	eq
   d58c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d58ca:	f150 0000 	adcs.w	r0, r0, #0
   d58ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d58d2:	ea41 0105 	orr.w	r1, r1, r5
   d58d6:	bd30      	pop	{r4, r5, pc}
   d58d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d58dc:	4140      	adcs	r0, r0
   d58de:	eb41 0101 	adc.w	r1, r1, r1
   d58e2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d58e6:	f1a4 0401 	sub.w	r4, r4, #1
   d58ea:	d1e9      	bne.n	d58c0 <__adddf3+0x10c>
   d58ec:	f091 0f00 	teq	r1, #0
   d58f0:	bf04      	itt	eq
   d58f2:	4601      	moveq	r1, r0
   d58f4:	2000      	moveq	r0, #0
   d58f6:	fab1 f381 	clz	r3, r1
   d58fa:	bf08      	it	eq
   d58fc:	3320      	addeq	r3, #32
   d58fe:	f1a3 030b 	sub.w	r3, r3, #11
   d5902:	f1b3 0220 	subs.w	r2, r3, #32
   d5906:	da0c      	bge.n	d5922 <__adddf3+0x16e>
   d5908:	320c      	adds	r2, #12
   d590a:	dd08      	ble.n	d591e <__adddf3+0x16a>
   d590c:	f102 0c14 	add.w	ip, r2, #20
   d5910:	f1c2 020c 	rsb	r2, r2, #12
   d5914:	fa01 f00c 	lsl.w	r0, r1, ip
   d5918:	fa21 f102 	lsr.w	r1, r1, r2
   d591c:	e00c      	b.n	d5938 <__adddf3+0x184>
   d591e:	f102 0214 	add.w	r2, r2, #20
   d5922:	bfd8      	it	le
   d5924:	f1c2 0c20 	rsble	ip, r2, #32
   d5928:	fa01 f102 	lsl.w	r1, r1, r2
   d592c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5930:	bfdc      	itt	le
   d5932:	ea41 010c 	orrle.w	r1, r1, ip
   d5936:	4090      	lslle	r0, r2
   d5938:	1ae4      	subs	r4, r4, r3
   d593a:	bfa2      	ittt	ge
   d593c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5940:	4329      	orrge	r1, r5
   d5942:	bd30      	popge	{r4, r5, pc}
   d5944:	ea6f 0404 	mvn.w	r4, r4
   d5948:	3c1f      	subs	r4, #31
   d594a:	da1c      	bge.n	d5986 <__adddf3+0x1d2>
   d594c:	340c      	adds	r4, #12
   d594e:	dc0e      	bgt.n	d596e <__adddf3+0x1ba>
   d5950:	f104 0414 	add.w	r4, r4, #20
   d5954:	f1c4 0220 	rsb	r2, r4, #32
   d5958:	fa20 f004 	lsr.w	r0, r0, r4
   d595c:	fa01 f302 	lsl.w	r3, r1, r2
   d5960:	ea40 0003 	orr.w	r0, r0, r3
   d5964:	fa21 f304 	lsr.w	r3, r1, r4
   d5968:	ea45 0103 	orr.w	r1, r5, r3
   d596c:	bd30      	pop	{r4, r5, pc}
   d596e:	f1c4 040c 	rsb	r4, r4, #12
   d5972:	f1c4 0220 	rsb	r2, r4, #32
   d5976:	fa20 f002 	lsr.w	r0, r0, r2
   d597a:	fa01 f304 	lsl.w	r3, r1, r4
   d597e:	ea40 0003 	orr.w	r0, r0, r3
   d5982:	4629      	mov	r1, r5
   d5984:	bd30      	pop	{r4, r5, pc}
   d5986:	fa21 f004 	lsr.w	r0, r1, r4
   d598a:	4629      	mov	r1, r5
   d598c:	bd30      	pop	{r4, r5, pc}
   d598e:	f094 0f00 	teq	r4, #0
   d5992:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5996:	bf06      	itte	eq
   d5998:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d599c:	3401      	addeq	r4, #1
   d599e:	3d01      	subne	r5, #1
   d59a0:	e74e      	b.n	d5840 <__adddf3+0x8c>
   d59a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d59a6:	bf18      	it	ne
   d59a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d59ac:	d029      	beq.n	d5a02 <__adddf3+0x24e>
   d59ae:	ea94 0f05 	teq	r4, r5
   d59b2:	bf08      	it	eq
   d59b4:	ea90 0f02 	teqeq	r0, r2
   d59b8:	d005      	beq.n	d59c6 <__adddf3+0x212>
   d59ba:	ea54 0c00 	orrs.w	ip, r4, r0
   d59be:	bf04      	itt	eq
   d59c0:	4619      	moveq	r1, r3
   d59c2:	4610      	moveq	r0, r2
   d59c4:	bd30      	pop	{r4, r5, pc}
   d59c6:	ea91 0f03 	teq	r1, r3
   d59ca:	bf1e      	ittt	ne
   d59cc:	2100      	movne	r1, #0
   d59ce:	2000      	movne	r0, #0
   d59d0:	bd30      	popne	{r4, r5, pc}
   d59d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d59d6:	d105      	bne.n	d59e4 <__adddf3+0x230>
   d59d8:	0040      	lsls	r0, r0, #1
   d59da:	4149      	adcs	r1, r1
   d59dc:	bf28      	it	cs
   d59de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d59e2:	bd30      	pop	{r4, r5, pc}
   d59e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d59e8:	bf3c      	itt	cc
   d59ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d59ee:	bd30      	popcc	{r4, r5, pc}
   d59f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d59f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d59f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d59fc:	f04f 0000 	mov.w	r0, #0
   d5a00:	bd30      	pop	{r4, r5, pc}
   d5a02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5a06:	bf1a      	itte	ne
   d5a08:	4619      	movne	r1, r3
   d5a0a:	4610      	movne	r0, r2
   d5a0c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5a10:	bf1c      	itt	ne
   d5a12:	460b      	movne	r3, r1
   d5a14:	4602      	movne	r2, r0
   d5a16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5a1a:	bf06      	itte	eq
   d5a1c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5a20:	ea91 0f03 	teqeq	r1, r3
   d5a24:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5a28:	bd30      	pop	{r4, r5, pc}
   d5a2a:	bf00      	nop

000d5a2c <__aeabi_ui2d>:
   d5a2c:	f090 0f00 	teq	r0, #0
   d5a30:	bf04      	itt	eq
   d5a32:	2100      	moveq	r1, #0
   d5a34:	4770      	bxeq	lr
   d5a36:	b530      	push	{r4, r5, lr}
   d5a38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a40:	f04f 0500 	mov.w	r5, #0
   d5a44:	f04f 0100 	mov.w	r1, #0
   d5a48:	e750      	b.n	d58ec <__adddf3+0x138>
   d5a4a:	bf00      	nop

000d5a4c <__aeabi_i2d>:
   d5a4c:	f090 0f00 	teq	r0, #0
   d5a50:	bf04      	itt	eq
   d5a52:	2100      	moveq	r1, #0
   d5a54:	4770      	bxeq	lr
   d5a56:	b530      	push	{r4, r5, lr}
   d5a58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a60:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5a64:	bf48      	it	mi
   d5a66:	4240      	negmi	r0, r0
   d5a68:	f04f 0100 	mov.w	r1, #0
   d5a6c:	e73e      	b.n	d58ec <__adddf3+0x138>
   d5a6e:	bf00      	nop

000d5a70 <__aeabi_f2d>:
   d5a70:	0042      	lsls	r2, r0, #1
   d5a72:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5a76:	ea4f 0131 	mov.w	r1, r1, rrx
   d5a7a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5a7e:	bf1f      	itttt	ne
   d5a80:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5a84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5a88:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5a8c:	4770      	bxne	lr
   d5a8e:	f092 0f00 	teq	r2, #0
   d5a92:	bf14      	ite	ne
   d5a94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5a98:	4770      	bxeq	lr
   d5a9a:	b530      	push	{r4, r5, lr}
   d5a9c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5aa0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5aa4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5aa8:	e720      	b.n	d58ec <__adddf3+0x138>
   d5aaa:	bf00      	nop

000d5aac <__aeabi_ul2d>:
   d5aac:	ea50 0201 	orrs.w	r2, r0, r1
   d5ab0:	bf08      	it	eq
   d5ab2:	4770      	bxeq	lr
   d5ab4:	b530      	push	{r4, r5, lr}
   d5ab6:	f04f 0500 	mov.w	r5, #0
   d5aba:	e00a      	b.n	d5ad2 <__aeabi_l2d+0x16>

000d5abc <__aeabi_l2d>:
   d5abc:	ea50 0201 	orrs.w	r2, r0, r1
   d5ac0:	bf08      	it	eq
   d5ac2:	4770      	bxeq	lr
   d5ac4:	b530      	push	{r4, r5, lr}
   d5ac6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5aca:	d502      	bpl.n	d5ad2 <__aeabi_l2d+0x16>
   d5acc:	4240      	negs	r0, r0
   d5ace:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5ad2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ad6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ada:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5ade:	f43f aedc 	beq.w	d589a <__adddf3+0xe6>
   d5ae2:	f04f 0203 	mov.w	r2, #3
   d5ae6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5aea:	bf18      	it	ne
   d5aec:	3203      	addne	r2, #3
   d5aee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5af2:	bf18      	it	ne
   d5af4:	3203      	addne	r2, #3
   d5af6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5afa:	f1c2 0320 	rsb	r3, r2, #32
   d5afe:	fa00 fc03 	lsl.w	ip, r0, r3
   d5b02:	fa20 f002 	lsr.w	r0, r0, r2
   d5b06:	fa01 fe03 	lsl.w	lr, r1, r3
   d5b0a:	ea40 000e 	orr.w	r0, r0, lr
   d5b0e:	fa21 f102 	lsr.w	r1, r1, r2
   d5b12:	4414      	add	r4, r2
   d5b14:	e6c1      	b.n	d589a <__adddf3+0xe6>
   d5b16:	bf00      	nop

000d5b18 <__aeabi_dmul>:
   d5b18:	b570      	push	{r4, r5, r6, lr}
   d5b1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5b1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5b22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5b26:	bf1d      	ittte	ne
   d5b28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5b2c:	ea94 0f0c 	teqne	r4, ip
   d5b30:	ea95 0f0c 	teqne	r5, ip
   d5b34:	f000 f8de 	bleq	d5cf4 <__aeabi_dmul+0x1dc>
   d5b38:	442c      	add	r4, r5
   d5b3a:	ea81 0603 	eor.w	r6, r1, r3
   d5b3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5b42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5b46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5b4a:	bf18      	it	ne
   d5b4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5b50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5b54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5b58:	d038      	beq.n	d5bcc <__aeabi_dmul+0xb4>
   d5b5a:	fba0 ce02 	umull	ip, lr, r0, r2
   d5b5e:	f04f 0500 	mov.w	r5, #0
   d5b62:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5b66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5b6a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5b6e:	f04f 0600 	mov.w	r6, #0
   d5b72:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5b76:	f09c 0f00 	teq	ip, #0
   d5b7a:	bf18      	it	ne
   d5b7c:	f04e 0e01 	orrne.w	lr, lr, #1
   d5b80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5b84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5b88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5b8c:	d204      	bcs.n	d5b98 <__aeabi_dmul+0x80>
   d5b8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5b92:	416d      	adcs	r5, r5
   d5b94:	eb46 0606 	adc.w	r6, r6, r6
   d5b98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5b9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5ba0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5ba4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5ba8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5bac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5bb0:	bf88      	it	hi
   d5bb2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5bb6:	d81e      	bhi.n	d5bf6 <__aeabi_dmul+0xde>
   d5bb8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5bbc:	bf08      	it	eq
   d5bbe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5bc2:	f150 0000 	adcs.w	r0, r0, #0
   d5bc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5bca:	bd70      	pop	{r4, r5, r6, pc}
   d5bcc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5bd0:	ea46 0101 	orr.w	r1, r6, r1
   d5bd4:	ea40 0002 	orr.w	r0, r0, r2
   d5bd8:	ea81 0103 	eor.w	r1, r1, r3
   d5bdc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5be0:	bfc2      	ittt	gt
   d5be2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5be6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5bea:	bd70      	popgt	{r4, r5, r6, pc}
   d5bec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5bf0:	f04f 0e00 	mov.w	lr, #0
   d5bf4:	3c01      	subs	r4, #1
   d5bf6:	f300 80ab 	bgt.w	d5d50 <__aeabi_dmul+0x238>
   d5bfa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5bfe:	bfde      	ittt	le
   d5c00:	2000      	movle	r0, #0
   d5c02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5c06:	bd70      	pople	{r4, r5, r6, pc}
   d5c08:	f1c4 0400 	rsb	r4, r4, #0
   d5c0c:	3c20      	subs	r4, #32
   d5c0e:	da35      	bge.n	d5c7c <__aeabi_dmul+0x164>
   d5c10:	340c      	adds	r4, #12
   d5c12:	dc1b      	bgt.n	d5c4c <__aeabi_dmul+0x134>
   d5c14:	f104 0414 	add.w	r4, r4, #20
   d5c18:	f1c4 0520 	rsb	r5, r4, #32
   d5c1c:	fa00 f305 	lsl.w	r3, r0, r5
   d5c20:	fa20 f004 	lsr.w	r0, r0, r4
   d5c24:	fa01 f205 	lsl.w	r2, r1, r5
   d5c28:	ea40 0002 	orr.w	r0, r0, r2
   d5c2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5c30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5c34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5c38:	fa21 f604 	lsr.w	r6, r1, r4
   d5c3c:	eb42 0106 	adc.w	r1, r2, r6
   d5c40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c44:	bf08      	it	eq
   d5c46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c4a:	bd70      	pop	{r4, r5, r6, pc}
   d5c4c:	f1c4 040c 	rsb	r4, r4, #12
   d5c50:	f1c4 0520 	rsb	r5, r4, #32
   d5c54:	fa00 f304 	lsl.w	r3, r0, r4
   d5c58:	fa20 f005 	lsr.w	r0, r0, r5
   d5c5c:	fa01 f204 	lsl.w	r2, r1, r4
   d5c60:	ea40 0002 	orr.w	r0, r0, r2
   d5c64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5c6c:	f141 0100 	adc.w	r1, r1, #0
   d5c70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c74:	bf08      	it	eq
   d5c76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c7a:	bd70      	pop	{r4, r5, r6, pc}
   d5c7c:	f1c4 0520 	rsb	r5, r4, #32
   d5c80:	fa00 f205 	lsl.w	r2, r0, r5
   d5c84:	ea4e 0e02 	orr.w	lr, lr, r2
   d5c88:	fa20 f304 	lsr.w	r3, r0, r4
   d5c8c:	fa01 f205 	lsl.w	r2, r1, r5
   d5c90:	ea43 0302 	orr.w	r3, r3, r2
   d5c94:	fa21 f004 	lsr.w	r0, r1, r4
   d5c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c9c:	fa21 f204 	lsr.w	r2, r1, r4
   d5ca0:	ea20 0002 	bic.w	r0, r0, r2
   d5ca4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5ca8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5cac:	bf08      	it	eq
   d5cae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5cb2:	bd70      	pop	{r4, r5, r6, pc}
   d5cb4:	f094 0f00 	teq	r4, #0
   d5cb8:	d10f      	bne.n	d5cda <__aeabi_dmul+0x1c2>
   d5cba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5cbe:	0040      	lsls	r0, r0, #1
   d5cc0:	eb41 0101 	adc.w	r1, r1, r1
   d5cc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5cc8:	bf08      	it	eq
   d5cca:	3c01      	subeq	r4, #1
   d5ccc:	d0f7      	beq.n	d5cbe <__aeabi_dmul+0x1a6>
   d5cce:	ea41 0106 	orr.w	r1, r1, r6
   d5cd2:	f095 0f00 	teq	r5, #0
   d5cd6:	bf18      	it	ne
   d5cd8:	4770      	bxne	lr
   d5cda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5cde:	0052      	lsls	r2, r2, #1
   d5ce0:	eb43 0303 	adc.w	r3, r3, r3
   d5ce4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5ce8:	bf08      	it	eq
   d5cea:	3d01      	subeq	r5, #1
   d5cec:	d0f7      	beq.n	d5cde <__aeabi_dmul+0x1c6>
   d5cee:	ea43 0306 	orr.w	r3, r3, r6
   d5cf2:	4770      	bx	lr
   d5cf4:	ea94 0f0c 	teq	r4, ip
   d5cf8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5cfc:	bf18      	it	ne
   d5cfe:	ea95 0f0c 	teqne	r5, ip
   d5d02:	d00c      	beq.n	d5d1e <__aeabi_dmul+0x206>
   d5d04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d08:	bf18      	it	ne
   d5d0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d0e:	d1d1      	bne.n	d5cb4 <__aeabi_dmul+0x19c>
   d5d10:	ea81 0103 	eor.w	r1, r1, r3
   d5d14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d18:	f04f 0000 	mov.w	r0, #0
   d5d1c:	bd70      	pop	{r4, r5, r6, pc}
   d5d1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d22:	bf06      	itte	eq
   d5d24:	4610      	moveq	r0, r2
   d5d26:	4619      	moveq	r1, r3
   d5d28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d2c:	d019      	beq.n	d5d62 <__aeabi_dmul+0x24a>
   d5d2e:	ea94 0f0c 	teq	r4, ip
   d5d32:	d102      	bne.n	d5d3a <__aeabi_dmul+0x222>
   d5d34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5d38:	d113      	bne.n	d5d62 <__aeabi_dmul+0x24a>
   d5d3a:	ea95 0f0c 	teq	r5, ip
   d5d3e:	d105      	bne.n	d5d4c <__aeabi_dmul+0x234>
   d5d40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5d44:	bf1c      	itt	ne
   d5d46:	4610      	movne	r0, r2
   d5d48:	4619      	movne	r1, r3
   d5d4a:	d10a      	bne.n	d5d62 <__aeabi_dmul+0x24a>
   d5d4c:	ea81 0103 	eor.w	r1, r1, r3
   d5d50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5d58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5d5c:	f04f 0000 	mov.w	r0, #0
   d5d60:	bd70      	pop	{r4, r5, r6, pc}
   d5d62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5d66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5d6a:	bd70      	pop	{r4, r5, r6, pc}

000d5d6c <__aeabi_ddiv>:
   d5d6c:	b570      	push	{r4, r5, r6, lr}
   d5d6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5d72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5d76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5d7a:	bf1d      	ittte	ne
   d5d7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5d80:	ea94 0f0c 	teqne	r4, ip
   d5d84:	ea95 0f0c 	teqne	r5, ip
   d5d88:	f000 f8a7 	bleq	d5eda <__aeabi_ddiv+0x16e>
   d5d8c:	eba4 0405 	sub.w	r4, r4, r5
   d5d90:	ea81 0e03 	eor.w	lr, r1, r3
   d5d94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5d98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5d9c:	f000 8088 	beq.w	d5eb0 <__aeabi_ddiv+0x144>
   d5da0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5da4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5da8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5dac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5db0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5db4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5db8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5dbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5dc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5dc4:	429d      	cmp	r5, r3
   d5dc6:	bf08      	it	eq
   d5dc8:	4296      	cmpeq	r6, r2
   d5dca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5dce:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5dd2:	d202      	bcs.n	d5dda <__aeabi_ddiv+0x6e>
   d5dd4:	085b      	lsrs	r3, r3, #1
   d5dd6:	ea4f 0232 	mov.w	r2, r2, rrx
   d5dda:	1ab6      	subs	r6, r6, r2
   d5ddc:	eb65 0503 	sbc.w	r5, r5, r3
   d5de0:	085b      	lsrs	r3, r3, #1
   d5de2:	ea4f 0232 	mov.w	r2, r2, rrx
   d5de6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5dea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5dee:	ebb6 0e02 	subs.w	lr, r6, r2
   d5df2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5df6:	bf22      	ittt	cs
   d5df8:	1ab6      	subcs	r6, r6, r2
   d5dfa:	4675      	movcs	r5, lr
   d5dfc:	ea40 000c 	orrcs.w	r0, r0, ip
   d5e00:	085b      	lsrs	r3, r3, #1
   d5e02:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e06:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e0e:	bf22      	ittt	cs
   d5e10:	1ab6      	subcs	r6, r6, r2
   d5e12:	4675      	movcs	r5, lr
   d5e14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5e18:	085b      	lsrs	r3, r3, #1
   d5e1a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e1e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e22:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e26:	bf22      	ittt	cs
   d5e28:	1ab6      	subcs	r6, r6, r2
   d5e2a:	4675      	movcs	r5, lr
   d5e2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5e30:	085b      	lsrs	r3, r3, #1
   d5e32:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e36:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e3e:	bf22      	ittt	cs
   d5e40:	1ab6      	subcs	r6, r6, r2
   d5e42:	4675      	movcs	r5, lr
   d5e44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5e48:	ea55 0e06 	orrs.w	lr, r5, r6
   d5e4c:	d018      	beq.n	d5e80 <__aeabi_ddiv+0x114>
   d5e4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5e52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5e56:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5e5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5e5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5e62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5e66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5e6a:	d1c0      	bne.n	d5dee <__aeabi_ddiv+0x82>
   d5e6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5e70:	d10b      	bne.n	d5e8a <__aeabi_ddiv+0x11e>
   d5e72:	ea41 0100 	orr.w	r1, r1, r0
   d5e76:	f04f 0000 	mov.w	r0, #0
   d5e7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5e7e:	e7b6      	b.n	d5dee <__aeabi_ddiv+0x82>
   d5e80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5e84:	bf04      	itt	eq
   d5e86:	4301      	orreq	r1, r0
   d5e88:	2000      	moveq	r0, #0
   d5e8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5e8e:	bf88      	it	hi
   d5e90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5e94:	f63f aeaf 	bhi.w	d5bf6 <__aeabi_dmul+0xde>
   d5e98:	ebb5 0c03 	subs.w	ip, r5, r3
   d5e9c:	bf04      	itt	eq
   d5e9e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5ea2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5ea6:	f150 0000 	adcs.w	r0, r0, #0
   d5eaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5eae:	bd70      	pop	{r4, r5, r6, pc}
   d5eb0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5eb4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5eb8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5ebc:	bfc2      	ittt	gt
   d5ebe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5ec2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5ec6:	bd70      	popgt	{r4, r5, r6, pc}
   d5ec8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5ecc:	f04f 0e00 	mov.w	lr, #0
   d5ed0:	3c01      	subs	r4, #1
   d5ed2:	e690      	b.n	d5bf6 <__aeabi_dmul+0xde>
   d5ed4:	ea45 0e06 	orr.w	lr, r5, r6
   d5ed8:	e68d      	b.n	d5bf6 <__aeabi_dmul+0xde>
   d5eda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5ede:	ea94 0f0c 	teq	r4, ip
   d5ee2:	bf08      	it	eq
   d5ee4:	ea95 0f0c 	teqeq	r5, ip
   d5ee8:	f43f af3b 	beq.w	d5d62 <__aeabi_dmul+0x24a>
   d5eec:	ea94 0f0c 	teq	r4, ip
   d5ef0:	d10a      	bne.n	d5f08 <__aeabi_ddiv+0x19c>
   d5ef2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5ef6:	f47f af34 	bne.w	d5d62 <__aeabi_dmul+0x24a>
   d5efa:	ea95 0f0c 	teq	r5, ip
   d5efe:	f47f af25 	bne.w	d5d4c <__aeabi_dmul+0x234>
   d5f02:	4610      	mov	r0, r2
   d5f04:	4619      	mov	r1, r3
   d5f06:	e72c      	b.n	d5d62 <__aeabi_dmul+0x24a>
   d5f08:	ea95 0f0c 	teq	r5, ip
   d5f0c:	d106      	bne.n	d5f1c <__aeabi_ddiv+0x1b0>
   d5f0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5f12:	f43f aefd 	beq.w	d5d10 <__aeabi_dmul+0x1f8>
   d5f16:	4610      	mov	r0, r2
   d5f18:	4619      	mov	r1, r3
   d5f1a:	e722      	b.n	d5d62 <__aeabi_dmul+0x24a>
   d5f1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5f20:	bf18      	it	ne
   d5f22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5f26:	f47f aec5 	bne.w	d5cb4 <__aeabi_dmul+0x19c>
   d5f2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5f2e:	f47f af0d 	bne.w	d5d4c <__aeabi_dmul+0x234>
   d5f32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5f36:	f47f aeeb 	bne.w	d5d10 <__aeabi_dmul+0x1f8>
   d5f3a:	e712      	b.n	d5d62 <__aeabi_dmul+0x24a>

000d5f3c <__cxa_atexit>:
   d5f3c:	b510      	push	{r4, lr}
   d5f3e:	4c05      	ldr	r4, [pc, #20]	; (d5f54 <__cxa_atexit+0x18>)
   d5f40:	4613      	mov	r3, r2
   d5f42:	b12c      	cbz	r4, d5f50 <__cxa_atexit+0x14>
   d5f44:	460a      	mov	r2, r1
   d5f46:	4601      	mov	r1, r0
   d5f48:	2002      	movs	r0, #2
   d5f4a:	f3af 8000 	nop.w
   d5f4e:	bd10      	pop	{r4, pc}
   d5f50:	4620      	mov	r0, r4
   d5f52:	bd10      	pop	{r4, pc}
   d5f54:	00000000 	.word	0x00000000

000d5f58 <memcpy>:
   d5f58:	b510      	push	{r4, lr}
   d5f5a:	1e43      	subs	r3, r0, #1
   d5f5c:	440a      	add	r2, r1
   d5f5e:	4291      	cmp	r1, r2
   d5f60:	d004      	beq.n	d5f6c <memcpy+0x14>
   d5f62:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5f66:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5f6a:	e7f8      	b.n	d5f5e <memcpy+0x6>
   d5f6c:	bd10      	pop	{r4, pc}

000d5f6e <memset>:
   d5f6e:	4402      	add	r2, r0
   d5f70:	4603      	mov	r3, r0
   d5f72:	4293      	cmp	r3, r2
   d5f74:	d002      	beq.n	d5f7c <memset+0xe>
   d5f76:	f803 1b01 	strb.w	r1, [r3], #1
   d5f7a:	e7fa      	b.n	d5f72 <memset+0x4>
   d5f7c:	4770      	bx	lr
	...

000d5f80 <srand>:
   d5f80:	b538      	push	{r3, r4, r5, lr}
   d5f82:	4b12      	ldr	r3, [pc, #72]	; (d5fcc <srand+0x4c>)
   d5f84:	681c      	ldr	r4, [r3, #0]
   d5f86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5f88:	4605      	mov	r5, r0
   d5f8a:	b9d3      	cbnz	r3, d5fc2 <srand+0x42>
   d5f8c:	2018      	movs	r0, #24
   d5f8e:	f7fe fcf3 	bl	d4978 <malloc>
   d5f92:	f243 330e 	movw	r3, #13070	; 0x330e
   d5f96:	63a0      	str	r0, [r4, #56]	; 0x38
   d5f98:	8003      	strh	r3, [r0, #0]
   d5f9a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5f9e:	8043      	strh	r3, [r0, #2]
   d5fa0:	f241 2334 	movw	r3, #4660	; 0x1234
   d5fa4:	8083      	strh	r3, [r0, #4]
   d5fa6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5faa:	80c3      	strh	r3, [r0, #6]
   d5fac:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5fb0:	8103      	strh	r3, [r0, #8]
   d5fb2:	2305      	movs	r3, #5
   d5fb4:	8143      	strh	r3, [r0, #10]
   d5fb6:	230b      	movs	r3, #11
   d5fb8:	8183      	strh	r3, [r0, #12]
   d5fba:	2201      	movs	r2, #1
   d5fbc:	2300      	movs	r3, #0
   d5fbe:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5fc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5fc4:	2200      	movs	r2, #0
   d5fc6:	611d      	str	r5, [r3, #16]
   d5fc8:	615a      	str	r2, [r3, #20]
   d5fca:	bd38      	pop	{r3, r4, r5, pc}
   d5fcc:	2003e454 	.word	0x2003e454

000d5fd0 <strlen>:
   d5fd0:	4603      	mov	r3, r0
   d5fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5fd6:	2a00      	cmp	r2, #0
   d5fd8:	d1fb      	bne.n	d5fd2 <strlen+0x2>
   d5fda:	1a18      	subs	r0, r3, r0
   d5fdc:	3801      	subs	r0, #1
   d5fde:	4770      	bx	lr

000d5fe0 <dynalib_user>:
   d5fe0:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d5ff0:	0000 0000 6170 7373 7277 3164 3030 4d00     ....passwrd100.M
   d6000:	5341 4554 5f52 414c 5450 504f 3300 3532     ASTER_LAPTOP.325
   d6010:	6530 2b4a 0039 4549 4545 542d 4548 4d52     0eJ+9.IEEE-THERM
   d6020:	4c41 4154 204b 3834 3432 5400 6d65 4670     ALTAK 4824.TempF
   d6030:	5400 6d65 4370 4800 6d75 6469 7469 4c79     .TempC.HumidityL
   d6040:	4800 6d75 6469 7469 5479 4700 6f4d 7369     .HumidityT.GMois
   d6050:	7574 6572 0050 0000                         tureP...

000d6058 <_ZTVN5spark13EthernetClassE>:
	...
   d6060:	49f7 000d 49ed 000d 49e3 000d 49d9 000d     .I...I...I...I..
   d6070:	49cd 000d 49c1 000d 49b5 000d 49ad 000d     .I...I...I...I..
   d6080:	49a3 000d 4999 000d 526d 000d               .I...I..mR..

000d608c <_ZTV8SPIClass>:
	...
   d6094:	4a15 000d 4a17 000d 6162 6475 5300 7265     .J...J..baud.Ser
   d60a4:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d60b4:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d60c4:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d60d4:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d60e4:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d60f4:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d6104:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d6114:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d6124:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d6134:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d6144:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d6154:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d6164:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d6174:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d6184:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d6194:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d61a4:	0065 0000                                   e...

000d61a8 <_ZTV9IPAddress>:
	...
   d61b0:	4c8d 000d 4c7d 000d 4c7f 000d               .L..}L...L..

000d61bc <_ZTV9USBSerial>:
	...
   d61c4:	4d65 000d 4db5 000d 4dc3 000d 4a7d 000d     eM...M...M..}J..
   d61d4:	4da1 000d 4d67 000d 4d7d 000d 4daf 000d     .M..gM..}M...M..
   d61e4:	4d93 000d 4d61 000d                         .M..aM..

000d61ec <_ZTV11USARTSerial>:
	...
   d61f4:	4e69 000d 4eb9 000d 4ec7 000d 4a7d 000d     iN...N...N..}J..
   d6204:	4e7d 000d 4e9f 000d 4e8b 000d 4eb3 000d     }N...N...N...N..
   d6214:	4e6b 000d 4e6f 000d                         kN..oN..

000d621c <_ZTV7TwoWire>:
	...
   d6224:	4fa1 000d 4feb 000d 4fc3 000d 4fa3 000d     .O...O...O...O..
   d6234:	4fcb 000d 4fd3 000d 4fdb 000d 4fe3 000d     .O...O...O...O..

000d6244 <_ZTVN5spark9MeshClassE>:
	...
   d624c:	5083 000d 5079 000d 506f 000d 5065 000d     .P..yP..oP..eP..
   d625c:	5059 000d 504d 000d 5041 000d 5039 000d     YP..MP..AP..9P..
   d626c:	502f 000d 5025 000d 526d 000d               /P..%P..mR..

000d6278 <_ZTVN5spark9WiFiClassE>:
	...
   d6280:	51e7 000d 51dd 000d 51d3 000d 5189 000d     .Q...Q...Q...Q..
   d6290:	51c7 000d 51bb 000d 51af 000d 51a7 000d     .Q...Q...Q...Q..
   d62a0:	519d 000d 5193 000d 526d 000d               .Q...Q..mR..

000d62ac <_ZTVN5spark12NetworkClassE>:
	...
   d62b4:	5205 000d 520f 000d 5219 000d 5223 000d     .R...R...R..#R..
   d62c4:	522d 000d 5239 000d 5245 000d 5251 000d     -R..9R..ER..QR..
   d62d4:	5259 000d 5263 000d 526d 000d               YR..cR..mR..

000d62e0 <__sf_fake_stdin>:
	...

000d6300 <__sf_fake_stdout>:
	...

000d6320 <__sf_fake_stderr>:
	...

000d6340 <link_const_variable_data_end>:
   d6340:	000d421d 	.word	0x000d421d
   d6344:	000d428f 	.word	0x000d428f
   d6348:	000d45dd 	.word	0x000d45dd
   d634c:	000d4a01 	.word	0x000d4a01
   d6350:	000d4a55 	.word	0x000d4a55
   d6354:	000d4a6d 	.word	0x000d4a6d
   d6358:	000d4b2d 	.word	0x000d4b2d
   d635c:	000d4b3d 	.word	0x000d4b3d
   d6360:	000d4b8d 	.word	0x000d4b8d
   d6364:	000d5139 	.word	0x000d5139
   d6368:	000d51f1 	.word	0x000d51f1
   d636c:	000d5339 	.word	0x000d5339
   d6370:	000d5485 	.word	0x000d5485
   d6374:	000d5519 	.word	0x000d5519
   d6378:	000d559d 	.word	0x000d559d
   d637c:	000d5661 	.word	0x000d5661
   d6380:	000d5725 	.word	0x000d5725

000d6384 <link_constructors_end>:
	...
